<html>





<HTML>

<HEAD>

<!--  formamus.htm version 02 February 1998 

      INSTRUCTIONS FOR SUBMITTING: DO NOT USE HTML EDITORS!

      SEARCH THIS TEXT FOR THE STRING "Your_" 

      AND REPLACE WITH WHATEVER YOU WANT TO PUBLISH! 

      THANKS A LOT: this will allow automated retrieval -->

<TITLE>owlimpo.htm HWINFO Defeated: Cracking the impossible</TITLE>

</HEAD>

<BODY BGCOLOR=#C0C0C0 TEXT=#001010 VLINK=#405040>

<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%  HEIGHT=" 22">

<TR><td></td>

<td>

<!-- Choose  a TITLE probably wont be changed -->

<center><FONT SIZE="+2">HWiNFO Defeated</fonT><br>

        <FONT SIZE="+1">Cracking the impossible</fonT>

</center>

</td>



<bR><td>

<!-- Choose  a PROJECT GIF, leave this if unsure -->

<center><a href="advanced.htm" tppabs="http://www.anticrack.de/fravia/advanced.htm"><IMG SRC="xtranio.gif" tppabs="http://www.anticrack.de/fravia/xtranio.gif" ALT="advanced" 

ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 

HSPACE=0></a>

<br>

<font color=gray>Advanced</FonT>

</center></td></tr>

<tR>

<td bgcolor="#FFFFEA"><center>

<FONT COLOR="890000">

<!-- CHOOSE A DATE (will probably be changed) -->

12 December 1998

</FONT></center>

</td>

<td bgcolor="#FFFFEA"><center>by <font size=+3>

<!-- CHOOSE A HANDLE (wont be changed) -->

The Owl

</fonT></center>

</td>

<td VALIGN="center" bgcolor="#FFFFEA">

<!--

<a href="hcu98_3.htm" tppabs="http://www.anticrack.de/fravia/hcu98_3.htm"><IMG SRC="hcu1.gif" tppabs="http://www.anticrack.de/fravia/hcu1.gif" ALT="+cracker" ALIGN=BOTTOM 

WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>

-->

</td>

</tr>

<TR><td><center><a href="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALIGN="BOTTOM" 

BORDER="0" VSPACE="0" HSPACE="0" width="13" height="13"></a></center></td>

<TD BGCOLOR="898030"><center>Courtesy of Fravia's page of 

reverse engineering</center> 

</center></TD>

<td BGCOLOR="898030">

<center>

<!-- Your truly+ will edit only if really necessary 

slightly edited<br>

by fravia+ --></center></td>

</TR>

<!-- this is for the data.....fra_00xx....yymmdd....handle..beg+int...not ass... -->

<tr><td><font color="#C4C0CF">fra_00xx<bR>981212<br>The_Owl<br>0010<br>AD<br>PC<br></fonT></td><td><i><center>

<!-- Your truly+ comments -->

This hungarian master deserves praise, admiration and thanks. He began years ago 

to conduct an incredible 'one-man-show' on the cracking scene. He 

has explained quite complicated aspects 

of our trade, he was capable to delve inside softice like noone else did, 

showing the possible ways out of 

many crackers' dead ends.<bR>

If I were a software house manager I would enlist him at once.<bR>In 

the mean time I'm happy that he's still working for all of us, for free, and I thank him 

sincerely for giving us his superior knowledge, his feeling , his 

understandings... Head the advice of a really great 

+cracker: "<font color=purple>do not destroy what you have not built yourself</FONT>"!</I>

<HR><B>Off topic... but important for us</B><BR>

Since I happen to 

know that The Owl was a personal friend of +ORC, and since I'm sure that 

+ORC -wherever he is-  

will of course read a new essay written by the Owl, I'll take this opportunity to ask the Old Red Cracker 

to contact us. We don't have any news since July. That's not nice for many young (and less young) 

reversers 

that need guidance... What's going on master? 

</I></CENTER></TD>

<TD></TD>

</TR>

<TR><TD></TD>

<!-- Leonard Coehn's old song, because we are poets, not only crackers -->

<TD BGCOLOR="898030"><CENTER></I><B>There is a crack, a crack in everything 

That's how the light gets in</B></CENTER>

<!-- Leonard Coehn's old song, because we are poets, not only crackers -->

</CENTER></TD><TD></TD>

</TR>

<TR>

<TD VALIGN= "MIDDLE" bgcolor="#C6E7C6"><FONT color=blue><CENTER>

Rating</FONT></FONT></CENTER>

</TD>

<TD VALIGN = "MIDDLE" bgcolor="#C6E7C6"><FONT color=blue><CENTER>

<!-- CHOOSE A RATING (may be changed) -->

( )<B>Beginner</B> ( )<B>Intermediate</B> (x)<B>Advanced</B> ( )<B>Expert</B></FONT>

</CENTER></TD>

<TD></TD>

</TR>

</TABLE>

<!-- END HEAD  -->

<BR>

<!-- CORPUS  -->



<BR><!-- CHOOSE A COMMENT (may be changed)  -->

if you have ever wondered how one breaks a 64 bit long secret key, read on...

<HR>

<CENTER>

   <FONT SIZE="+2">

<!-- CHOOSE A TITLE (wont probably be changed) -->

HWiNFO Defeated

   </FONT><BR>

   <FONT SIZE="+2">

<!-- CHOOSE A SUBTITLE (wont proabbly be changed) -->

Cracking the impossible

   </FONT><BR>

   <FONT COLOR="0B7FC1">

<!-- REPEAT YOUR CHOSEN HANDLE HERE -->Written by 

The Owl

   </FONT>

</CENTER><BR><BR>



<BR><!-- INTRO STARTS HERE -->

<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >

<TR><TD bgcolor="#C6E7C6"><CENTER><FONT size=+2><FONT color=blue>Introduction</FONT>

</FONT></CENTER></TD></TR></TABLE>

<PRE>

HWiNFO is a very nice hardware detection tool running under DOS. but that's not<BR>the only thing it has been famous for... the registration scheme developed by<BR>its author is very unique in that it uses a proprietary encryption algorithm to<BR>protect a registration check related routine which is decrypted runtime only.<BR>since the key used is 64 bits long, brute force attack has no chance to succeed.

</PRE>

<BR><BR>



<BR><!-- TOOLS STARTS HERE -->

<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >

<TR><TD bgcolor="#C6E7C6"><CENTER><FONT size=+2><FONT color=blue>Tools required</FONT>

</FONT></CENTER></TD></TR></TABLE>

softice, a dumper, IDA, hiew and most important of all your brain...

<BR><BR>



<BR><!-- TARGET URL STARTS HERE -->

<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >

<TR><TD bgcolor="#C6E7C6"><CENTER><FONT size=+2><FONT color=blue>Target's URL/FTP</FONT>

</FONT></CENTER></TD></TR></TABLE>

<!-- DON'T FORGET TO PASTE HERE THE URL/FTP OF YOUR TARGET(S) -->

<A href="javascript:if(confirm('http://www.svf.stuba.sk/~malik/hwinfo.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.svf.stuba.sk/~malik/hwinfo.html'" tppabs="http://www.svf.stuba.sk/~malik/hwinfo.html">HWiNFO home page</A>

<BR><BR>



<BR><!-- PROGRAM HISTORY STARTS HERE -->

<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >

<TR><TD bgcolor="#C6E7C6"><CENTER><FONT size=+2><FONT color=blue>Program History</FONT>

</FONT></CENTER></TD></TR></TABLE>

<!-- PASTE HERE YOUR TARGET'S HISTORY (if any) -->

<PRE><BR>yes, as you will see, history does play a very important role in cracking HWiNFO<BR>so let me tell you about it. it began like 2.5 years ago when i first ran into<BR>this program at <A href="javascript:if(confirm('ftp://ftp.elf.stuba.sk/pub/pc/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='ftp://ftp.elf.stuba.sk/pub/pc/'" tppabs="ftp://ftp.elf.stuba.sk/pub/pc/">SAC</A>. it had a very good executable protection, which i eventually<BR>broke and could finally load it into IDA to study the registration scheme. the<BR>basic idea is that upon registration the user is provided with a character<BR>string that encodes a 64 bit long number (four 16 bit ones actually). i don't<BR>really have memories any longer if the key length was this much at the<BR>beginning but for the v4.x versions it is the case.<P>

this long key was then used to decrypt a small routine runtime. initially the<BR>length of the encrypted data was 64 bytes but last year when a few successful<BR>cracks showed up (clever patches) the author increased it to 105 bytes (and<BR>added a few more checks on the return values of this subroutine) which has<BR>remained so up until v4.4.3. <P>

when one compared these encrypted blocks to each other it became obvious that<BR>the core of the function has not changed, the new code was responsible for<BR>generating the return values only. one possible way to get to the secret key<BR>could have been the successful guessing of some plaintext bytes which would<BR>have allowed the recovery of the key (we shall see soon how the encryption<BR>algorithm works). unfortunately all of my attempts at this have failed for<BR>over 2.5 years, no wonder now though ;-).<P>

what changed the situation is however the release of v4.4.4 at the end of<BR>november where the author introduced yet another change in the encrypted data<BR>(length became 107 bytes) because of another clever crack (which still wasn't<BR>a full key generator since for that one would have needed the secret key). what<BR>makes this change important is however the fact that the author inadvertantly<BR>created a situation where the secret key could have been successfully recovered.<P>

the rest of the essay will concentrate on this recovery procedure but NOT on<BR>a full featured key generator which i will personally refrain from writing ever<BR>since the author has all my respects for his creation. i would also like to <BR>discourage the reader from attempting this since HWiNFO itself is full-featured<BR>and has a nag screen only that one can live with...

<BR>

in short, do not destroy what you have not built yourself.<BR><BR><BR></PRE><BR><!-- REAL ESSAY  STARTS HERE -->

<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >

<TR><TD bgcolor="#C6E7C6"><CENTER><FONT size=+2><FONT color=blue>Essay</FONT></FONT>

</CENTER></TD></TR></TABLE>

<!-- PASTE HERE THE TEXT OF YOUR ESSAY

     THIS IS OF COURSE THE MOST IMPORTANT PART

     PLEASE CHECK THE MARGINS WHEN YOU ARE FINISHED! 

     SHOULD NOT BLAST NETSCAPE MARGINS OUT! HAVE A LOOK INSIDE

     YOUR OWN BROWSER WHEN YOU HAVE FINISHED!  -->

<PRE>

so, first let's see how the encryption/decryption algorithm works (study the 

code below for a few minutes):



               mov   si, offset pEncryptedData

<BR>           mov   bx, [bp+key1]                       ; initialize registers

<BR>           mov   dx, [bp+key2]                       ; with the key

<BR>           mov   di, [bp+key3]                       ;

<BR>           mov   cx, [bp+key4]                       ;loop:

<BR>           xor   [si], bx                            ; decrypt a block

<BR>           add   [si+2], dx                          ;

<BR>           sub   [si+4], di                          ;

<BR>           xor   [si+6], cx                          ;

<BR>           not   word ptr [si+6]                     ;

<BR            rol   bx, 1                               ; generate keys for the

<bR>           ror   cx, 1                               ; next round

<BR>           neg   dx                                  ;

<BR>           xor   di, 1234h                           ;

<BR>           xchg  dx, cx                              ;

<BR>           xchg  bx, di                              ;

<BR>           add   si, 8

<BR>           cmp   si, offset pEncryptedDataEnd

<BR>           jb    loop                                

<BR>

<BR>           ;... some parameter setup code 

<BR>

<BR>           call  pEncryptedData

<BR>

<BR>           ;... checks for the return values



we can observe a few things from this code excerpt. first of all, we can divide<BR>the subroutine into two independent parts. the first 5 instructions of the<BR>decryption loop do the actual decryption (8 bytes at a time), the rest of the<BR>loop prepares the keys for the next round. it is very important to note that<BR>the key stream generation does NOT depend on the encrypted/decrypted data at<BR>all. in other words, if we knew the initial values of the 16 bit key words <BR>(THE key actually ;-), we could generate the rest of the key stream for an<BR>arbitrary length of data.

<BR>

let's make a little drawing on the relationship between the ciphertext bytes<BR>and the keystream bytes. the initial values of the 16 bit key words are denoted<BR>by A0, B0, C0 and D0, the upcoming generations by Ai, Bi, Ci and Di where i is<BR>an integer. the encrypted data is represented by Ei, the decrypted data by Fi.



<BR>           E0  E1  E2  E3  E4  E5  E6  E7  E8  ...

<BR>           A0  B0  C0  D0  C1  D1  A1  B1  A2  ...

<BR>           F0  F1  F2  F3  F4  F5  F6  F7  F8  ...<BR>



there's a very simple relationship between the values in each column (read the<BR>

code ;-), and between two consecutive generations of the 16 bit key words<BR>(i use the C language operators here and some ASM instructions):<BR>

<BR>   F0 = E0 ^ A0      A(2*i+1) = ROL A(2*i),1       A(2*i) = XOR A(2*i-1),1234h

<BR>   F1 = E1 + B0      B(2*i+1) = NEG B(2*i)         B(2*i) = ROR B(2*i-1),1<BR>   F2 = E2 - C0      C(2*i+1) = XOR C(2*i),1234h   C(2*i) = ROL C(2*i-1),1

<BR>   F3 = ~(E3 ^ D0)   D(2*i+1) = ROR D(2*i),1       D(2*i) = NEG D2

<BR>

<BR>so far so good, but why the heck does this help us in any way in recovering A0,<BR>B0, C0 and D0? from a cryptoanalytical point of view one would need to know the<BR>values of Fi in order to be able compute the key words. this is where one can<BR>make educated guesses only, e.g. observe the compiler generated code elsewhere<BR>in the program and assume that our encrypted routine has some similar code<BR>patterns as well (which turns out not to be case in the end, but it's a good<BR>exercise anyway to give it a few tries). we could also guess some other<BR>instructions which must occur in the code, e.g. retn or retf, or some other<BR>magical numbers i didn't talk about (nor will i since this is not a keygen<BR>tutorial).

<BR>

this has been the situation for a few years now, however as i already mentioned<BR>something happened in the latest version of HWiNFO... let's have a look at the<BR>new decryption routine (only the change):



<BR>           mov   si, offset pEncryptedData-2



           ;... usual register setup

           ;... usual decryption loop

           ;... usual parameter setup



           call pEncryptedData



           ;... usual checks

<BR>

<BR>so, what happened? we have an extra 2 bytes at the beginning of our encrypted<BR>routine, which effectively shifts the applied keystream by 2 bytes as well.<BR>let's make another drawing to make it clear (underscore refers to the fact<BR>that we could have different values at those positions than previously):



           E-1 E0_ E1_ E2_ E3_ E4_ E5_ E6_ E7_ ...<BR>           A0  B0  C0  D0  C1  D1  A1  B1  A2  ...

           F-1 F0_ F1_ F2_ F3_ F4_ F5_ F6_ F7_ ...



hmmm. does it look like it would help us? well, if we knew ONLY this data then<BR>we would be in exactly the same situation as we were before with the other set<BR>of data. however now we have BOTH. since the length of the new encrypted block<BR>is exactly 107 bytes, we can make an assumption:



           Fi = Fi_ for i=0,1,...



another hmmm. does this start out to look like we could have a few more or less<BR>linear equations for the key stream words? yes it does ;-)



           F0 = E0 ^ A0    = E0_ + B0    = F0_             (0)<BR>           F1 = E1 + B0    = E1_ - C0    = F1_             (1)<BR>           F2 = E2 - C0    = ~(E2_ ^ D0) = F2_             (2)<BR>           F3 = ~(E3 ^ D0) = E3_ ^ C1    = F3_             (3)



so, we have 4 equations and 5 unknown variables (A0, B0, C0, D0 and C1),<BR>kind of sucks. but wait a minute... didn't i say somewhere above that the<BR>keystream doesn't depend on anything but itself? in plain english that means<BR>that we have a relationship (read: another equation) between C0 and C1:



           C1 = C0 ^ 0x1234                                (4)



wow, we did it. nothing should prevent us now from solving this system of<BR>equations. let's substitue the value of C1 back into eq.(3) and then express<BR>D0 from it:



           D0 = E3 ^ ~(E3_ ^ C0 ^ 0x1234)



from eq.(2) we also have:



           D0 = ~(E2 - C0) ^ E2_



which means that



           E3 ^ ~(E3_ ^ C0 ^ 0x1234) = ~(E2 - C0) ^ E2_    (5)



holds as well. reducing one side to C0 only we have:



           C0 = E2 - ~(E2_ ^ E3 ^ ~(E3_ ^ C0 ^ 0x1234))    (6)



so, all what's left to do is write a small program that enumerates all the<BR>values of C0 for which eq.(6) holds. as it turns out, we have 64 different<BR>solutions for C0 and thus for A0, B0 and D0 as well (it's fairly easy to see<BR>that for each value of C0 there's exactly one value for A0, B0 and D0).

once we have the key candidates, we can write a small brute forcer program<BR>which decrypts our data using these keys. a simple inspection of the decrypted<BR>data in a disassembler will quickly reveal which key is the real one... which<BR>i won't publish here for various reasons, the most important ones being my<BR>respect for the author (after all we're here for learning and not for stealing),<BR>and also i'd like the reader to do his/her homework ;-).<BR></PRE>

<BR><BR>



<BR><!-- FINAL NOTES STARTS HERE -->

<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >

<TR><TD bgcolor="#C6E7C6"><CENTER><FONT size=+2><FONT color=blue>Final Notes</FONT>

</FONT></CENTER></TD></TR></TABLE>

<PRE>

i hope everyone has learned something from this little essay. on one hand the<BR>author of this otherwise excellent protection (and i didn't even talk about the<BR>executable protection which is another interesting one...) has had to learn<BR>a more or less painful lesson on how one should not undermine his own scheme<BR>by hacking it inappropriately (probably in a hurry to defeat that crack i<BR>mentioned in the intro and the program docs talk about as well), on the other<BR>hand the reverse engineers should have got a lesson on how to be persistent<BR>(beleive it or not, i did expect such a mistake to happen after i had seen the<BR>author's reaction on the various crack/patch attempts last year) and how some<BR>elementary knowledge in cryptoanalysis can help in cracking an otherwise large<BR>(and thus secure) key.<BR></PRE>

<BR><BR>



<BR><!-- OB DUH STARTS HERE -->

<TABLE CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH= "100%"  HEIGHT="22" >

<TR><TD bgcolor="#C6E7C6"><CENTER><FONT size=+2><FONT color=blue>Ob Duh</FONT></FONT>

</CENTER></TD></TR></TABLE>

 <CENTER>

   <I>I wont even bother explaining you 

   that you should BUY this target program if you intend to use it for a longer 

   period than the allowed one. Should you want 

   to STEAL this software instead, you don't need to crack its protection 

   scheme at all: you'll 

   find it on most Warez sites, complete and already regged, farewell.</I>

</CENTER>



<BR><!-- WAY OUT STARTS HERE -->

<HR>

<CENTER><I>You are deep inside fravia's page of reverse engineering,  

choose your way out:</I></CENTER>

<BR><CENTER>

<!-- EITHER A NICE GIF LIKE THIS -->

<BR>

<A href="advanced.htm" tppabs="http://www.anticrack.de/fravia/advanced.htm"><IMG SRC="xtranio.gif" tppabs="http://www.anticrack.de/fravia/xtranio.gif" 

ALT="advanced" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></A>

<BR>

<FONT color=gray>Advanced reversing</FONT>





<BR><BR><!-- OR JUST A LINK LIKE THIS -->

<!--

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="project1.htm" tppabs="http://www.anticrack.de/fravia/project1.htm">Back to Your_chosen_project</A> 

<hr width=33%>

-->



<BR><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html">homepage</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="links.htm" tppabs="http://www.anticrack.de/fravia/links.htm">links</A> 

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm">search_forms</A>



<BR><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm">+ORC</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="student.htm" tppabs="http://www.anticrack.de/fravia/student.htm">students' essays</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="academy.htm" tppabs="http://www.anticrack.de/fravia/academy.htm">academy database</A>

<BR>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="realicra.htm" tppabs="http://www.anticrack.de/fravia/realicra.htm">reality cracking</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="howtosea.htm" tppabs="http://www.anticrack.de/fravia/howtosea.htm">how to search</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="javascri.htm" tppabs="http://www.anticrack.de/fravia/javascri.htm">javascript wars</A>

<BR>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm">tools</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="noanon.htm" tppabs="http://www.anticrack.de/fravia/noanon.htm">anonymity academy</A> 

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm">cocktails</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="ideale.htm" tppabs="http://www.anticrack.de/fravia/ideale.htm">antismut CGI-scripts</A>



<BR><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="info.htm" tppabs="http://www.anticrack.de/fravia/info.htm">mail_fravia+</A>

<BR>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 

BORDER=0 VSPACE=0 HSPACE=0><A HREF="legal.htm" tppabs="http://www.anticrack.de/fravia/legal.htm">Is reverse engineering legal?</A>

</CENTER>

<HR>

<!-- THAT'S ALL, THANKS A LOT this will allow automated retrieval -->

</BODY>

</HTML>