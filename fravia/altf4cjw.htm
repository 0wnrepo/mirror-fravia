<html>

<HTML>

 <HEAD>

  <TITLE>Cracking Java Workshop 2.0</TITLE>

 </HEAD>



<BODY BGCOLOR="#C0C0C0" TEXT="#001010" VLINK="#405040">



<TABLE CELLPADDING="5" BORDER="0">

<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="898030">

   <FONT SIZE="2" COLOR="FFFFFF">

    <CENTER><A href="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALIGN="BOTTOM" BORDER="0" VSPACE="0" HSPACE="0" WIDTH="13" HEIGHT="13"></A></CENTER>

   </FONT>

  </TD>

  <TD BGCOLOR="C0C0C0"><A href="student.htm#student_loo_na" tppabs="http://www.anticrack.de/fravia/student.htm#student_loo_na"><IMG SRC="notassi3.gif" tppabs="http://www.anticrack.de/fravia/notassi3.gif" ALT="not assigned" ALIGN="RIGHT" WIDTH="114" HEIGHT="43" BORDER="0" VSPACE="0" HSPACE="0"></A>

   <FONT SIZE="+2">

<CENTER>

JavaWorkshop 2.0 cracking



</FONT><BR>by <FONT size="+3" color="red">+Alt-F4</FONT>,

 <FONT COLOR="890000">

    4 January 1998

   </FONT>

<P>

<A href="student.htm" tppabs="http://www.anticrack.de/fravia/student.htm"><IMG SRC="hcu1.gif" tppabs="http://www.anticrack.de/fravia/hcu1.gif" ALT="+cracker" ALIGN="BOTTOM" WIDTH="114" HEIGHT="43" BORDER="0" VSPACE="0" HSPACE="0"></A>

  </CENTER>

  </TD>

 </TR>

<TR>

  <TD BGCOLOR="898030">   <FONT SIZE="2" COLOR="898030">here</TD>

  <TD BGCOLOR="898030"><CENTER>Courtesy of Fravia's page of 

reverse engineering</CENTER> 

  </CENTER>

  </TD>

 </TR>

<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="898030">

   <FONT SIZE="2" COLOR="FFFFFF">

    <CENTER>fravia's comments</CENTER>

   </FONT>

  </TD>

  <TD BGCOLOR="C0C0C0">

   <FONT SIZE="+1"><CENTER>

That's a good +cracker!<BR>I mildly criticized +Alt+F4 for having written in 

the previous version of this essay, back in October 97: 

<FONT color="purple"> &quot;If part of the crack is missing, I will 

probably find out within the next week or so, and will post a new 

version...&quot;</FONT> and he sent a more complete essay, which is a state 

of the art work. I was thinking about including this, together with A+heist's <A href="athevica.htm" tppabs="http://www.anticrack.de/fravia/athevica.htm">Symantec Visual caf»</A> 

essay,  in our project1 (tools of the trade), 

since I feel that Java workshops and compilers are going to be 

very soon among 

the most important tools for reverse engineers (which is good: 

die Gates, die! :-)<BR>We will see, may be we should open a completely 

new HCU &quot;Java&quot; section. Enjoy (for the second time, but you have gained a 

lot in comparison with the previous essay) this nice work by +Alt-F4</CENTER></FONT>

  </TD>

 </TR>

 <TR>

  <TD VALIGN="MIDDLE" BGCOLOR="890000">

   <FONT SIZE="2" COLOR="FFFFFF">

    <CENTER>Title</CENTER>

   </FONT>

  </TD>

  <TD BGCOLOR="C0C0C0">

   <FONT SIZE="+2">

    Cracking Sun's JavaWorkshop 2.0

   </FONT><BR>

   <FONT COLOR="0B7FC1">

    Written by +Alt-F4 on January 3rd, 1998.

   </FONT>

  </TD>

 </TR>



 <TR>

  <TD VALIGN="MIDDLE" BGCOLOR="2C142B">

   <FONT SIZE="2">

    <CENTER><FONT COLOR="FFFFFF">Rating</FONT></CENTER>

   </FONT>

  </TD>

  <TD BGCOLOR="C0C0C0">

   <FONT FACE="Courier New">

    ( )<B>Beginner</B> (x)<B>Intermediate</B> ( )<B>Advanced</B> (

)<B>Expert</B>

   </FONT><BR><I>

Part 1 requires understanding of using Softice, and using a dead code

listing<BR>

Part 2 requires understanding of java.<BR>

  </TD>

 </TR>



 <TR>

  <TD VALIGN="MIDDLE" BGCOLOR="FF7F21">

   <FONT SIZE="2">

    <CENTER>Introduction</CENTER>

   </FONT>

  </TD>

  <TD BGCOLOR="C0C0C0">

In this Essay I will show how to crack Sun's Java Workshop 2.0<BR>

This is an important target, because (as +Orc says), Java is the future of

cracking.<BR>

I will show 2 approaches to cracking this program:<BR>

<A href="#Part1">Part1</A> will show how to crack the date using a Live and

Dead code approach<BR>

<A href="#Part2">Part2</A> will show how to get a serial number, using pure

dead code on a java Dissasembley<BR>



  </TD>

 </TR>



 <TR>

  <TD VALIGN="MIDDLE" BGCOLOR="B04A53">

   <FONT SIZE="2">

    <CENTER>Tools Required</CENTER>

   </FONT>

  </TD>

  <TD BGCOLOR="C0C0C0">

   <B>

Mocha(java Decompiler)<BR>

Softice(Windows Debugger)<BR>

W32Dasm(Windows Dissasemler)<BR>

</B><BR><BR>

Don't just use these though, use what ever tools you like(Prehaps IDA?)

  </TD>

 </TR>



 <TR>

  <TD VALIGN="MIDDLE" BGCOLOR="B600B6">

   <FONT SIZE="2">

    <CENTER>Program History</CENTER>

   </FONT>

  </TD>

  <TD BGCOLOR="C0C0C0">

No known(or intersting) history

  </TD>

</TR>



 <TR>

  <TD VALIGN="MIDDLE" BGCOLOR="051D1B">

   <FONT SIZE="+3" COLOR="C0C0C0">

    <CENTER>T<BR>H<BR>E<BR> <BR>E<BR>S<BR>S<BR>A<BR>Y</CENTER>

   </FONT>

  </TD>

  <TD VALIGN="TOP" BGCOLOR="C0C0C0">



   <B><A name="Part1"></A>~Part 1:Cracking the Date Check</B><BR><BR>

<PRE>

The target:

Java Workshop 2.0, trial edition: setupjws.exe	(20303236 bytes)

Where you can get it: <A href="javascript:if(confirm('http://129.105.116.5/fravia/java.sun.com  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://129.105.116.5/fravia/java.sun.com'" tppabs="http://129.105.116.5/fravia/java.sun.com">java.sun.com</A>





Installing this product, you find a huge monstrosity on your

hard-drive, 50 megs of overbloated, very slow programming.



The first strange thing I noticed was the size of the executable,

jws.exe is only 29696 bytes!



Obviously it is using dll's to do everything, but which ones?

There are 32 dll's in different places in the directory structure.

Using Borland Resource Workshop I found that they don't use standard

windows resources (At least all the dll's I could be bothered 

checking used none)



Obviously, the first approach would be to get a valid serial number<BR>

This is hard using Softice and W32Dasm though, so I did a date crack first.





Ok, load up winice 3.0 and bpx on getlocaltime...

Whenever it is executed edit the place where the date is returned

To make this easier, I decided to start learning some of winice's more

useful features.

Use <FONT color="blue">bpx getlocaltime do &quot;p ret&quot;</FONT>

This returns softice to where getlocaltime was called.



The first one looks like this



call kernel32!GetLocalTime

mov  cx,[esp+12]

mov eax,[esp+04]



Ok, The date is returned above esp, so edit esp

<FONT color="blue">e esp</FONT>

Look for the year, which will be CD07 (1997 in Hex format, Don't

forget Intel's use reverse format so CD07 really is 0x07CD)

Change it to CE, and then continue.



After doing this a few times, you find the nag does not pop up, so

obviously it is not using getlocaltime for this purpose.





Looking in the windows help for getlocaltime, I found a link to

getsystemtime. Lets see if this is what the target is using.

bpx getsystemtime.

Whenever it breaks, set the year to 07CE as above.



Wow! Hundreds of calls!



After a while I realised that one place in particular was getting a

lot of calls, (possibly a timer?), so I told winice to only snap when

the location wasn't this one,(So I could continue..)

But first I typed <FONT color="blue">stack</FONT> to see where I was



<FONT color="red">winawt!+3717</FONT>

<FONT color="blue">

bpx getlocaltimer if *esp != 2264717</FONT>

(I did this, because when called, getsystemtime has the return address

in esp, so this will only break when the return address is not

2264717)



After doing this, there are a lot more calls from a different location.

Calling stack again I see



<FONT color="red">javai!.text+2FFD9</FONT>



I then extend the breakpoint to not include this one

<FONT color="blue">bpe 0</FONT>

change to<FONT color="blue">

bpx getlocaltime if *esp!= 2264717 &amp;&amp; *esp!= 10030FD9

 </FONT>

It now goes into the program, so one of those two locations must be

used to check the date, or it is using some other different procedure.



<U><B>Testing our theory</B></U><BR><BR>



Lets  check if it really is using getsystemtime...

Clear all breaks (bc *)

and <FONT color="blue">bpx getsystemtime</FONT>



Now trace through getsystemtime, until you get here...

BFF9B2FC	push esi

BFF9B2FD	call BFF76920

BFF9B302	mov ax, [esi]

BFF9B305	mov cx, [esi+02]

BFF9B309	mov dx, [esi+04]



Ok, on 302 type <FONT color="blue">&quot;d esi&quot;</FONT>, and you can see it is

getting the year.

Now for some fun, lets do a temporary patch on Win 95!

<FONT color="blue">&quot;a BFF9B302&quot;</FONT>, and change

mov ax, [esi] to

mov ax, 07CE	



We are now forcing getsystemtime to always return 1998, so if the nag

screen appears

we know it is using getsystemtime.



Now clear all breakpoints and go.

Hurrah, the nag has appeared, now we can be certain that it is using

getsystemtime.

Of course we can't patch Win95 like this (Although other more useful 

patches might be an interesting idea! Prehaps a future +HCU project!)

We had better find where getsystemtime is being used. First we should

clean up our patch, by either changing it back, or resetting 

the computer.



<U><B>Homing in for the kill</B></U><BR><BR>



Ok, we now know it is using getsystemtime, and we have narrowed it down to

only two locations (It couldn't be any of the other locations that

use getsystemtime, as we were editting the year that they were

returning)

We also know which dll's the target is using now, so we can dissassemble 

them.

Load up Wdasm8.9 (Search for the full registered version)

and dissassemble Javai.dll and winawt.dll



Javai gets called first, then winawt, then javai again, so lets look

at javai first:



Here is the code for Javai.dll



* Reference To: KERNEL32.SystemTimeToFileTime, Ord:023Fh

                                  |

:10030FC8 8B3DD8520610            mov edi, dword ptr [100652D8]

:10030FCE 8D442418                lea eax, dword ptr [esp+18]

:10030FD2 50                      push eax



* Reference To: KERNEL32.GetSystemTime, Ord:0134h

                                  |

:10030FD3 FF15D0520610            Call dword ptr [100652D0]

:10030FD9 8D4C2410                lea ecx, dword ptr [esp+10]

:10030FDD 8D442418                lea eax, dword ptr [esp+18]

:10030FE1 51                      push ecx		;Output date in file format

:10030FE2 50                      push eax		;Input date in normal format

:10030FE3 FFD7                    call edi		;SystemTimeToFiletime

:10030FE5 B120                    mov cl, 20

:10030FE7 8B442414                mov eax, dword ptr [esp+14]

:10030FEB 33D2                    xor edx, edx

:10030FED E8AEA70100              call 1004B7A0

:10030FF2 8B4C2410                mov ecx, dword ptr [esp+10]

:10030FF6 83CA00                  or edx, 00000000

:10030FF9 0BC1                    or eax, ecx

:10030FFB 8B2D180A0610            mov ebp, dword ptr [10060A18]

:10031001 2BC5                    sub eax, ebp

:10031003 8B351C0A0610            mov esi, dword ptr [10060A1C]

:10031009 1BD6                    sbb edx, esi

:1003100B 6A00                    push 00000000

:1003100D 6810270000              push 00002710

:10031012 52                      push edx

:10031013 50                      push eax

:10031014 E8D7A60100              call 1004B6F0

:10031019 5D                      pop ebp

:1003101A 5F                      pop edi

:1003101B 5E                      pop esi

:1003101C 5B                      pop ebx

:1003101D 83C418                  add esp, 00000018

:10031020 C3                      ret



According to the Win32 online help that comes with BC++ 4.5

systemfiletofiletime converts an ordinary time to a <FONT color="green">&quot;64-bit value

representing the number of 100-nanosecond intervals since 

January 1, 1601&quot;</FONT>





Hmm this:

:10030FFB 8B2D180A0610            mov ebp, dword ptr [10060A18]

:10031001 2BC5                    sub eax, ebp

:10031003 8B351C0A0610            mov esi, dword ptr [10060A1C]

:10031009 1BD6                    sbb edx, esi



looks encouraging!

Retreiving a global variable, followed by an operation that compares it

with another variable. Could well be dates stored in those variables!



I played around with these locations in winice, and found that esi

ends up with the installation date, and edx has

todays date.

After the sbb edx stores a number that is the difference

between the two dates.



<U><B>Patching Javai.dll</B></U><BR><BR>





I found a value of edx when the program was ok(1F19DF), and then changed the

code to this:



:10031003 BADF191F00              mov edx, 001F19DF

:10031008 50			  push eax

:10031009 90			  nop

:1003100A 58                      pop  eax

After this, EDX will <B>always</B> have a valid number, regardless of the

date, so 

JWS will never expire.



<P>

This works for a date crack, but I still wan't happy.<P>

There must have been a way to get a serial number.....



</PRE>



<P>



<B><A name="Part2"></A>~Part 2:Getting a serial number</B><BR><BR>



The intersting thing about Java Workshop, is that a <B>LOT</B> of it is

written in Java(I would like to thank panoramix^impact97 for pointing this

out)<BR>

This is good for sun, because they can make versions for different

platforms very easily.<BR>

It is even better for us, because java can be diss-assembled until it

almost looks like source

code!(As you will soon see)<P>



<P>

Unzipping classes.zip, an intersting class is found, <I>License.class</I><BR>

Dissasembling this file(Either with mocha or IDA), we see that it uses

another class(<I>base.LicenseUtils</I>)

to do all it's dirty work.<P>

Running mocha on this new class, we find the source code for the

Registration checking!<P>



Look at some of these interesting functions!<BR>

<I>

    private static boolean validateSerialNo(String serial)<BR>

    public static boolean validateVersion(String serialno)<BR>

    public static boolean checkSerialNo()<BR>

    public static boolean isGoldScholarSerial(String serial)<BR>

</I>

<BR>

I won't bother you with all the details, but

the basic checking is:<BR>

-Must be 23 characters long<BR>

-Must Contain &quot;-&quot; in position 6 and 13<BR>

-Searches for certain text strings at certain positions(Such as JWS200 at

the start)<BR>

-Uses the last 2 characters as a check-sum<BR>

<P>

Thanks to Mocha, we have source code for the check-sum:

<PRE>



 private static String generateCheck(String b)

 {

        nop

        String ret;

        int x0 = b.charAt(0) - 65 + 1;

        int x1 = b.charAt(1) - 65 + 1;

        int x2 = b.charAt(2) - 65 + 1;

        int v0 = b.charAt(3) - 48;

        int v1 = b.charAt(4) - 48;

        int v2 = b.charAt(5) - 48;

        int z0 = b.charAt(7) - 97;

        int z1 = b.charAt(8) - 97;

        int z2 = b.charAt(9) - 97;

        int check = x0 + (27 - x1) + x2;

        check += v0 + (9 - v1) + v2;

        if (newVersion(b))

            check += z0 + (13 - z1) + z2;

        check += b.charAt(14) - 48;

        check += 9 - (b.charAt(15) - 48);

        check += b.charAt(16) - 48;

        check += 9 - (b.charAt(17) - 48);

        check += b.charAt(18) - 48;

        check += 9 - (b.charAt(19) - 48);

        check += b.charAt(20) - 48;



	//Strange code here! Just turns check into a string padded with 0's

        for (ret = Integer.toString(check % 100); ret.length() <2; ret="new" StringBuffer("0").append(ret).toString()) /* null body */ ; return ret; } </pre>

<I>(Quite <B>amazing</B> how well mocha works, isn't it?)</I>

<P>

I then made a little java program, that takes an input string, and displays

the  expected <BR>

checksum(Source code not included, it only took 5 minutes)<BR>



Ok, looking at the <I>isGoldScholarSerial</I> fucntion , we see it checks

for &quot;sungld&quot; at 

position 7<BR>

I enter this into my program...<BR>

&quot;JWS200-SUNGLD-1234567&quot;<BR>

Get the checksum, and then paste the whole thing as my serial number<P>

Wow, I am a golden scholar, with a license that never expires!<P>



  </TD>

 </TR>



 <TR>

  <TD VALIGN="MIDDLE" BGCOLOR="00B645">

   <FONT SIZE="2">

    <CENTER>Standard Disclaimer</CENTER>

   </TD>

  <TD BGCOLOR="C0C0C0">

   <I>I wont even bother explaining you 

   that you should BUY this target program if you intend to use it for a

longer 

   period than the allowed one. Should you want 

   to STEAL this software instead, you don't need to crack its protection 

   scheme at all: you'll 

   find it on most Warez sites, complete and already regged, farewell.</I>



   </FONT>

  </TD>

  <TD BGCOLOR="C0C0C0">

<I>



</I>

  </TD>

 </TR>



 <TR>

  <TD VALIGN="MIDDLE" BGCOLOR="2AB6B6">

   <FONT SIZE="2">

    <CENTER>Final Notes</CENTER>

   </FONT>

  </TD>

  <TD BGCOLOR="C0C0C0">

   An easy crack, but intersting in that it uses java. As you can see, we

can crack java even easier

   than we can crack normal code!<BR>

   This doesn't mean we should get complacent and assume all java cracks

will be easy!<BR>

   Java makes Network programming <B>extremely</B> easy, so we can expect a

lot of protections

   in the future that will test your serial number on the server...<BR>

   Should be <B>FUN</B>. I can't wait!<BR>



   (c) <FONT color="red">+Alt-F4</FONT> 3 Jan 1998 All rights reversed.

  </TD>

 </TR>

<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="898030">

   <FONT SIZE="2" COLOR="FFFFFF">

    <CENTER>way out</CENTER>

   </FONT>

  </TD>

  <TD BGCOLOR="C0C0C0">

<CENTER><I>You are deep inside fravia's page of reverse engineering,  

choose your way out:</I></CENTER>

<BR><CENTER>

<!--<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif"ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 VSPACE=0 HSPACE=0><A HREF="project4.htm" tppabs="http://www.anticrack.de/fravia/project4.htm"tppabs="project4.htm">Back to Project 4</A>            <hr width=33%>-->



<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html">homepage</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="links.htm" tppabs="http://www.anticrack.de/fravia/links.htm">links</A> 

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="noanon.htm" tppabs="http://www.anticrack.de/fravia/noanon.htm">anonymity</A> 

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALIGN="BOTTOM" BORDER="0" VSPACE="0" HSPACE="0" WIDTH="13" HEIGHT="13"><A HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm">+ORC</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="student.htm" tppabs="http://www.anticrack.de/fravia/student.htm">students' essays</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="academy.htm" tppabs="http://www.anticrack.de/fravia/academy.htm">academy database</A>

<BR>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm">tools</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm">cocktails</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="ideale.htm" tppabs="http://www.anticrack.de/fravia/ideale.htm">antismut CGI-scripts</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm">search_forms</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="info.htm" tppabs="http://www.anticrack.de/fravia/info.htm">mail_fravia+</A>

<BR>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="legal.htm" tppabs="http://www.anticrack.de/fravia/legal.htm">Is reverse engineering

legal?</A>

</CENTER>

  </TD>

 </TR>

</TABLE>



</BODY>

</HTML>



