<html>

<head>

<title>cb_vb6_1.htm: VB6-Pcode Reversing

</title></head><body BGCOLOR="#C0C0C0" TEXT="#001010" VLINK="#405040">

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td></td><td>

<center><font SIZE="+2">

VB6-Pcode Reversing

</font><br><font SIZE="+1">

Cracking a VB6-Pcode Crackme

</font></center></td><td>

<center><a href="project8.htm" tppabs="http://www.anticrack.de/fravia/project8.htm"><img SRC="visualba.gif" tppabs="http://www.anticrack.de/fravia/visualba.gif" ALT="Visual Basic" ALIGN="CENTER" WIDTH="114" HEIGHT="43" BORDER="0" VSPACE="0" HSPACE="0"></a><br><font color="gray">Visual Basic</font>

</center></td></tr><tr><td bgcolor="#FFFFEA"><center><font COLOR="890000">

3 October 1999

</font></center></td><td bgcolor="#FFFFEA"><center>by <font size="+3">

CyberBlade

</font></center></td><td VALIGN="center" bgcolor="#FFFFEA">

<!--<a href="hcu98_3.htm" tppabs="http://www.anticrack.de/fravia/hcu98_3.htm"><IMG SRC="hcu1.gif" tppabs="http://www.anticrack.de/fravia/hcu1.gif" ALT="+cracker" ALIGN=BOTTOM WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>-->

</td></tr><tr><td><center><a href="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALIGN="BOTTOM" BORDER="0" VSPACE="0" HSPACE="0" WIDTH="13" HEIGHT="13"></a></center></td>

<td BGCOLOR="898030"><center>Courtesy of Fravia's page of 

reverse engineering</center> 

</center></td><td BGCOLOR="898030"><center>

slightly edited

<br>

by 

 disavowed

</center></td></tr>

<!-- this is for the data.....fra_00xx....yymmdd....handle..beg+int...not ass... -->

<tr><td><font color="#C4C0CF">fra_00xx<br>98xxxx<br>handle<br>1100<br>NA<br>PC<br></font></td><td><i><center>

Woa! It was indeed about time that somebody cared to write a good essay about the most important visual basic functions (and breakpoints) 

for reversing purposes!<br>As disavowed (ex-St0rmer) writes: 

&quot;<font color="blue">As for now, put on your thinking caps, load msvbvm60.dll into Symbol Loader, and learn, learn, learn!</font>&quot;.<br>Note also 

that this is one of those rare essays made in 'team work' between cracker and protector, 

therefore 

you'll have the advantage of being able to &quot;feel&quot; both sides of the coin...<br>

CyberBlade affirms that he is &quot;not good at writing tutorials&quot;, but, after readig 

this, I state that such an assertion is patently untrue.<br>C'mon, vbasic 

buffs, read this and enjoy!<hr>

</i>Ah yes, you'll find inside the archive <a href="javascript:if(confirm('http://129.105.116.5/fravia/pgccrkme.zip  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://129.105.116.5/fravia/pgccrkme.zip'" tppabs="http://129.105.116.5/fravia/pgccrkme.zip">pgccrkme.zip</a> the 

following files: 

the crackme, 

the &quot;keygen&quot; and a 

list of VB6 exports (.txt) CyberBlade used as a

reference...</center></td><td></td></tr><tr><td></td>

<td BGCOLOR="898030"><center></i><b>There is a crack, a crack in everything 

That's how the light gets in</b></center>

</center></td><td></td></tr><tr><td VALIGN="MIDDLE" bgcolor="#C6E7C6"><font color="blue"><center>Rating</font></font></center>

</td><td VALIGN="MIDDLE" bgcolor="#C6E7C6"><font color="blue"><center>

( )<b>Beginner</b> (x)<b>Intermediate</b> ( )<b>Advanced</b> ( )<b>Expert</b></font>

</center></td><td></td></tr></table>

<!-- END HEAD  --><br>

<!-- CORPUS  -->

<!-- CHOOSE A COMMENT (may be changed)  -->

It's about time someone wrote a VB6-Pcode tutorial!! I'm proud to have a crackme I made as the target of this fine tutorial. (And to settle the confusion, I changed my name from 'St0rmer' to 'disavowed' after having made this crackme)

<br><br>

CyberBlade does an outstanding job of analyzing msvbvm60.dll (the VB6 &quot;virtual machine&quot; (not quite as cool as it sounds)) and also the crackme itself, and how to follow exactly what's going on inside the program by following the pcode.

<br><br>

Some great points made by CyberBlade:<br>

Watch for 'xor eax, eax' in msvbvm60.dll, it means the jmp coming up will be a vb function! (F8!)<br>

Play around inside the vb functions with softice! Find out what's going where, how the stack is being utilized (esp), and how return values are derived.<br>

Want to really REVERSE vb crap? Then reverse oleaut32.dll, where all the &quot;real&quot; calculations are being made.

<br><br>

Not only did CyberBlade go to the trouble of writing this tutorial, he was also nice enough to include a brute-force keygen including source code. With some effort, an actual &quot;non-brute-force&quot; keygen could be made.

<br><br>

As our knowledge of VB reversing increases, our fear of seeing vb dll's in imports will hopefully diminish. Next project: a true VB5/VB6 decompiler? As for now, put on your thinking caps, load msvbvm60.dll into Symbol Loader, and learn, learn, learn! :)

<br><br>

- disavowed (disavow@optonline.net)

<hr><center><font SIZE="+2">

VB6-Pcode Reversing

   </font><br>

   <font SIZE="+2">

Cracking a VB6-Pcode Crackme

   </font><br><font COLOR="0B7FC1">

Written by 

CyberBlade

</font></center><br><br>



<!-- INTRO STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Introduction</font>

</font></center></td></tr></table>

I'm not good at writing tutorials, but ACiD BuRN asked me to write one, so if you don't like it ACiD BuRN is to blame =P

<br><br>

As I told you, this is a VB6 CrackMe compiled to P-Code. Many people think that it is very hard to crack such CrackMes, but it isn't. All you need is a bit training and the knowledge of common VB breakpoints. I suggest you print this text to have it handy while debugging with Soft-Ice.

<br><br>

The serial consists at least of 4 characters, the Name must have at least 6 characters.

<br><br>



<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Tools required</font>

</font></center></td></tr></table>

NuMega SmartCheck, Softice and (W32dasm 8.9)

<br><br>







<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Essay</font></font>

</center></td></tr></table>

<p><em><strong><u>Perform the following steps to reverse the

protection mechanism:</u></strong></em></p>



<p>Start the CrackMe and complete the Registartion Info:</p>



<p>I entered --&gt; Name: CyberBlade | Code: 6786789</p>



<p>Now press &quot;Ctrl + d&quot; to get into Softice and set a

breakpoint on hmemcpy. I assume you know how to do that : ) If

not go and ask somebody in the street. Then return to the CrackMe

and push the &quot;Check&quot; - Button.....B00M....What happened

?! We're in Softice : ). Now you can (believe it or not) remove

the breakpoint (bc *). Push F12 exactly 7 times, till you get

into the core of MSVBVM60.DLL.</p>



<p>Now you can set some breakpoints. Having taken a closer look

at the results of SmartCheck I found the following breakpoints:</p>



<ul>

    <li>Msvbvm60!rtcRound &lt;== used to round a number:

        Round(5.5) ==&gt; 6</li>

    <li>Msvbvm60!__vbaLenVar &lt;== returns the length of a

        specified string: Len(&quot;Micro$oft&quot;) ==&gt; 9</li>

    <li>Msvbvm60!__vbaLenBstrVar &lt;== returns the length of a

        specified string: Len(&quot;Micro$oft&quot;) ==&gt; 9</li>

    <li>Msvbvm60!rtcCos &lt;== Returns a Double specifying the

        cosine of an angle: Cos(56)</li>

    <li>Msvbvm60!rtcMidCharVar &lt;== Returns a Variant (String)

        containing a specified number of characters from a

        string: Mid(&quot;PGC&quot;,2,1) ==&gt; &quot;G&quot;</li>

    <li><font color="#008000">*</font>Msvbvm60!rtcAnsiValueBstr

        &lt;== Returns the AscII code of a specified character:

        Asc(&quot;C&quot;) ==&gt; 76</li>

    <li><font color="#008000">*</font>Msvbvm60!__vbaVar<font color="#008000">Add</font> &lt;== self-explanatory</li>

    <li><font color="#008000">*</font>Msvbvm60!__vbaVar<font color="#008000">Sub</font> &lt;== self- explanatory</li>

    <li><font color="#008000">*</font>Msvbvm60!__vbaVar<font color="#008000">Div</font> &lt;== self- explanatory</li>

    <li><font color="#008000">*</font>Msvbvm60!__vbaVar<font color="#008000">Mul</font> &lt;== self- explanatory</li>

</ul>



<p>Breakpoints marked with a <font color="#008000">*</font> are those I always set when cracking a VB

program.</p>



<p>After having set all these breakpoints we can proceed...to the

deep codewoods...Don't be afraid, CyberBlade is with you hehehe

=P</p>



<p>Turn the &quot;floating point window&quot; on, coz you will

need it later. (wf)</p>



<p>It's important to know that you don't have to step into any

calls except those that invoke the functions (mostly &quot;call

ebx&quot;) and the &quot;<font color="#FF0000">call eax</font>&quot;

which takes you back to PGC Crackme. Trace through the code

(F10). Don't bother to understand any asm-instruction before

reaching an area with a series of XOR

instructions (each one is followed by a &quot;<font color="#008000">jmp dword ptr</font>&quot;)

making up a &quot;<font color="#FF0000">XOR pattern</font>&quot;.</p>

<div align="center"><center>



<table border="1">

    <tr>

        <td><font color="#FFFFFF">:66105620</font><br>

        :66105623<br>

        <font color="#FF0000">:66105626</font><br>

        :66105628<br>

        :6610562B<br>

        <font color="#008000">:6610562E</font><p><font color="#FFFFFF">:66105635</font><br>

        :66105638<br>

        :6610563B<br>

        <font color="#FF0000">:66105642</font><br>

        :66105644<br>

        :66105647<br>

        <font color="#80FF00">:</font><font color="#008000">6610564A</font></p>

        <p><font color="#FFFFFF">:66105651</font><br>

        :66105654<br>

        <font color="#FF0000">:66105657</font><br>

        :66105659<br>

        :6610565C<br>

        <font color="#008000">:6610565F</font></p>

        </td>

        <td>0FBF06 <br>

        FF3428 <br>

        <font color="#FF0000">33C0</font> <br>

        8A4602<br>

        83C603 <br>

        <font color="#008000">FF2485146D1066</font><p>0FBF06 <br>

        FF3428 <br>

        C7042800000000<br>

        <font color="#FF0000">33C0 </font><br>

        8A4602 <br>

        83C603<br>

        <font color="#008000">FF2485146D1066</font></p>

        <p>0FBF06<br>

        D90428<br>

        <font color="#FF0000">33C0</font><br>

        8A4602<br>

        83C603<br>

        <font color="#008000">FF2485146D1066</font></p>

        </td>

        <td>movsx eax, word ptr [esi]<br>

        push dword ptr [eax+ebp]<br>

        <font color="#FF0000">xor eax, eax</font><br>

        mov al, byte ptr [esi+02]<br>

        add esi, 00000003<br>

        <font color="#008000">jmp dword ptr</font> <font color="#008000">[4*eax+66106D14]</font><p>movsx eax, word

        ptr [esi]<br>

        push dword ptr [eax+ebp]<br>

        mov dword ptr [eax+ebp], 00000000<br>

        <font color="#FF0000">xor eax, eax</font><br>

        mov al, byte ptr [esi+02]<br>

        add esi, 00000003<br>

        <font color="#008000">jmp dword ptr [4*eax+66106D14]</font></p>

        <p>movsx eax, word ptr [esi]<br>

        fld dword ptr [eax+ebp]<br>

        <font color="#FF0000">xor eax, eax</font><br>

        mov al, byte ptr [esi+02]<br>

        add esi, 00000003<br>

        <font color="#008000">jmp dword ptr [4*eax+66106D14]</font></p>

        </td>

    </tr>

</table>

</center></div>



<p>&nbsp;</p>



<p>Having reached the above location you can put breakpoints on

the addresses <font color="#FFFFFF">66105620; 66105635 and

66105651 </font>to mark them for the run.

It's always this pattern which leads you to the functions. </p>



<p>The jump at location <font color="#008000">6610562E </font>will take you to location 66106BC6 and as I

mentioned before there's a call to a <font color="#408080">function</font> of VB6:</p>



<p>* Reference To: MSVBVM60.<font color="#408080">__vbaLenBstr</font><br>

|<br>

:66106BC6 E853A1F5FF call 66060D1E</p>



<p>Use F8 to trace into the <font color="#408080">__vbaLenBstr </font>function:</p>



<p>Exported fn(): __vbaLenBstr - Ord:0147h<br>

:66060D1E 8B442404 mov eax, dword ptr [esp+04]<br>

:<font color="#FF0000">66060D22</font> 85C0 test eax, eax<br>

:66060D24 7405 je 66060D2B<br>

:66060D26 8B40FC mov eax, dword ptr [eax-04]<br>

:66060D29 D1E8 shr eax, 1<br>

:66060D2B C20400 ret 0004</p>



<p>Trace to location <font color="#FF0000">66060D22</font> and

type &quot;d eax&quot; and you will see the Name entered in the

data window, in my case C.y.b.e.r.B.l.a.d.e

(W.i.d.e.C.h.a.r.a.c.t.e.r.f.o.r.m.a.t). Leave that function, and

type &quot;? eax&quot;. A number specifiing the length of the

entered name, in my case &quot;10&quot;, will be displayed.</p>



<p>Keep on tracing (F10) till you get to the &quot;<font color="#FF0000">XOR pattern</font>&quot; again. Again it takes you to the function <font color="#408080">__vbaLenBstr.</font>This

time it returns the length of the Code entered, in my case

6786789 with a length of &quot;7&quot;.</p>



<p>Now continue through the deep codewoods, notice that you will

pass through a &quot;<font color="#8000FF">XOR pattern</font>&quot;

that follows the one mentioned <font color="#FF0000">above</font>. But this time no important function is called (<font color="#008000">__vbaI2var</font>), so keep

on tracing......You reach again the above

mentioned &quot;<font color="#FF0000">XOR pattern</font>&quot; that calls a function. This time it is

calling &quot;<font color="#008000">__vbaStrCat</font>&quot;. It is used to concatenate two strings. In

this case &quot;CyberBlade &amp; 6786789&quot; results in

&quot;CyberBlade6786789&quot;:</p>



<p>Exported fn(): __vbaStrCat - Ord:0195h<br>

:66060B5F 55 push ebp<br>

:66060B60 8BEC mov ebp, esp<br>

:66060B62 8D4508 lea eax, dword ptr [ebp+08]<br>

:66060B65 50 push eax<br>

:66060B66 FF7508 push [ebp+08]<br>

:66060B69 FF750C push [ebp+0C]<br>

:66060B6C FF15E8061166 call dword ptr [661106E8] <font color="#008000">&lt;== This is a call to OleAut32 where the

&quot;real operations&quot; are executed. Trace into this call to

see how the strings are concatenated.</font><br>

:66060B72 85C0 test eax, eax<br>

:66060B74 0F8C2EEB0200 jl 6608F6A8<br>

:66060B7A 8B4508 mov eax, dword ptr [ebp+08]<br>

:66060B7D 5D pop ebp<br>

:66060B7E C20800 ret 0008</p>



<p>I dunno why this is done. I didn't

notice that this value is being used later. After I had

successfully cracked the CrackMe, the author (St0rmer) told me

that he had included some misleading dummy operations to confuse

I don't know who, but not me ! : )<br>

The above code sequence seems to be an example for this.</p>



<p>Knowing this you needn't worry about

this function any longer. Ignore it and keep on cracking... </p>



<p>Again you pass the unimportant &quot;<font color="#8000FF">XOR pattern</font>&quot;.

But then you get to the &quot;<font color="#FF0000">XOR

pattern</font>&quot; you've set your

breakpoints on. The <font color="#408080">__vbaLenBstr </font>function is called. It returns the length of

&quot;CyberBlade&quot;. Performing the same steps again it

returns the length of our Code entered &quot;6786789&quot;.</p>



<p>In the following I won't mention the

&quot;<font color="#FF0000">XOR </font><font color="#8000FF">pattern</font>s&quot; any

longer. I assume you've memorized it now. : ) I'll only show you

the functions called by it:</p>



<p><font color="#008000">__vbaStrCat </font>==&gt;

used to concatenate the strings &quot;CyberBlade &amp;

6786789&quot; Why does this CrackMe do everything twice ?!

Strange CrackMe ! </p>



<p>Carry on, trace through the Code and you

will get to another &quot;<font color="#0000FF">XOR

pattern</font>&quot;. You might think:

&quot;Oh no ! not again !&quot;, but this is what P-Code is

like... : )</p>



<p><font color="#0000FF">:66106BF9 33C0 xor eax, eax</font><br>

:66106BFB 8A06 mov al, byte ptr [esi]<br>

:66106BFD 46 inc esi<br>

:66106BFE FF2485146D1066 jmp dword ptr [4*eax+66106D14]<br>

<font color="#0000FF">:66106C05 33C0 xor eax, eax</font><br>

:66106C07 8A06 mov al, byte ptr [esi]<br>

:66106C09 46 inc esi<br>

:66106C0A FF248514711066 <font color="#FF0080">jmp</font> dword ptr [4*eax+66107114]<br>

<font color="#0000FF">:66106C11 33C0 xor eax, eax</font><br>

:66106C13 8A06 mov al, byte ptr [esi]<br>

:66106C15 46 inc esi<br>

:66106C16 FF248514751066 jmp dword ptr [4*eax+66107514]<br>

<font color="#0000FF">:66106C1D 33C0 xor eax, eax</font><br>

:66106C1F 8A06 mov al, byte ptr [esi]<br>

:66106C21 46 inc esi<br>

:66106C22 FF248514791066 jmp dword ptr [4*eax+66107914]<br>

<font color="#0000FF">:66106C29 33C0 xor eax, eax</font><br>

:66106C2B 8A06 mov al, byte ptr [esi]<br>

:66106C2D 46 inc esi<br>

:66106C2E FF2485147D1066 jmp dword ptr [4*eax+66107D14]<br>

</p>



<p>You can set breakpoints on the important

jmps, so u won't miss them next time.</p>



<p>Okay, this &quot;<font color="#0000FF">XOR pattern</font>&quot;,

well rather the <font color="#FF0080">jump </font>will take you to the part of MSVBVM60.DLL where

the functions for mathematical operations like <font color="#008000">Division</font>, <font color="#800040">Multiplication</font>, <font color="#006699">And</font>, <font color="#FFFFFF">Subtraction</font> are

called:</p>



<p>:66105F52 EB26 jmp 66105F7A<br>

:66105F54 8D1D8B841066 lea ebx, dword ptr [6610848B] (<font color="#FFFFFF">__vbaVarSub</font>)<br>

:66105F5A EB1E jmp 66105F7A<br>

<em><strong>:66105F5C 8D1DC4251066 lea ebx, dword ptr [661025C4]</strong></em><em>

</em><em><strong>(</strong></em><font color="#800040"><em><strong>__vbaVarMul</strong></em></font><em><strong>)</strong></em><br>

:66105F62 EB16 jmp 66105F7A<br>

:66105F64 8D1D42881066 lea ebx, dword ptr [66108842] (<font color="#008000">__vbaVarDiv</font>)<br>

:66105F6A EB0E jmp 66105F7A<br>

:66105F6C 8D1DE5251066 lea ebx, dword ptr [661025E5] (<font color="#008000">__vbaVarIdiv</font>)<br>

:66105F72 EB06 jmp 66105F7A<br>

:66105F74 8D1D842D1066 lea ebx, dword ptr [66102D84] (<font color="#006699">__vbaVarAnd</font>)<br>

<br>

:66105F7A 0FBF3E movsx edi, word ptr [esi]<br>

:66105F7D 03FD add edi, ebp<br>

:66105F7F 57 push edi<br>

:66105F80 FFD3 call ebx <font color="#FF0000">&lt;== trace

into this call, if you want to see how the mathematical

operations are executed (it's the &quot;call ebx&quot; I

mentioned before)</font><br>

</p>



<p>If you trace into the call (F8) you will

find yourself in the &quot;<font color="#800040"><em><strong>__vbaVarMul</strong></em></font>&quot; function:</p>



<p>&nbsp;</p>



<p>Exported fn(): __vbaVarMul - Ord:01DDh<br>

:6610848B FF742404 push [esp+04]<br>

:6610848F FF74240C push [esp+0C]<br>

:66108493 FF742414 push [esp+14]<br>

:66108497 FF152C001166 <font color="#FFFFFF">call</font> dword ptr [6611002C] (OleAut32!VarMul) <font color="#FF0000">&lt;== This is a call to OleAut32, where the real

operations are executed.</font><br>

:6610849D 85C0 test eax, eax<br>

:6610849F 0F8CE4420000 jl 6610C789<br>

:661084A5 8B442404 mov eax, dword ptr [esp+04]<br>

:661084A9 C20C00 ret 000C<br>

</p>



<p>Trace into the <font color="#FFFFFF">call, </font>at location

653BDE6A you will see that how &quot;2&quot; is multiplicated

with &quot;0&quot;. </p>



<p align="center"><font color="#FFFFFF"><u>.--==[ Always keep in

mind: Trace through the Msvbvm60 code, don't bother to understand

anything, but wake up, when you pass any of the Xor patterns I

mentionend, there will mostly be jmps to locations where the

functions are called ! ]==--.</u></font></p>



<p align="left">Okay, same thing as before, I will only show you

the functions that are called... </p>

<div align="center"><center>



<table border="1">

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of serial ' Len(&quot;6786789&quot;)

        ==&gt; result: 7</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>Subtraction 7 - 0 ==&gt; result: 0</td>

    </tr>

    <tr>

        <td>OleAut32!VarCmp</td>

        <td>compare 7 with 0</td>

    </tr>

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of Name ' Len(&quot;CyberBlade&quot;)

        ==&gt; result: 10</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>10 - 1</td>

    </tr>

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of Name ==&gt; result: 10</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>10 - 2</td>

    </tr>

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of Name ==&gt; result: 10</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>10 - 3</td>

    </tr>

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of Name ==&gt; result: 10</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>10 - 4</td>

    </tr>

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of Name ==&gt; result: 10</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>10 - 5</td>

    </tr>

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of Name ==&gt; result: 10</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>10 - 6</td>

    </tr>

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of Name ==&gt; result: 10</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>10 - 7</td>

    </tr>

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of Name ==&gt; result: 10</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>10 - 8</td>

    </tr>

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of Name ==&gt; result: 10</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>10 - 9</td>

    </tr>

    <tr>

        <td>__vbaLenBstr</td>

        <td>takes length of Name ==&gt; result: 10</td>

    </tr>

    <tr>

        <td>__vbaVarSub</td>

        <td>10 - 10</td>

    </tr>

</table>

</center></div>



<p align="left">**Note: I have only listed the important function

(I didn't mention __vbaI2Var, __vbaVarAdd, sometimes

OleAut32!VarCmp)</p>



<p align="left">No explanations will be given to those senseless

function. But reversing the functions above is a good exercise

anyway : P</p>



<p align="left">Trace on and be careful, not to miss the &quot;<font color="#FF0000">call eax</font>&quot; which will take you back to

PGC CrackMe. There you will see jmps to many functions used by

the CrackMe. You can trace over the call to the function <font color="#008000">rtcMidCharVar</font>. Now push &quot;d eax&quot;

and you will see the last character of your Name (whatever you

have entered as &quot;Name&quot;) in the data window. Follow the

thread and you will see how the AscII value of this character is

taken. To give you a better feeling of the manipulations that are

performed on the Name entered I'll list them here:</p>



<p align="left">1. Read the last character of the Name ==&gt;

&quot;e&quot;<br>

2. Take the AscII value ==&gt; 101<br>

3. Add 6 to 101 ==&gt; 107<br>

4. (107)<sup>3 </sup>==&gt; 1225043<br>

5. Divide this number by 10. 1225043 / 10 ==&gt; 122504,3<br>

6. Subtract 6 from the number. 122504,3 - 6 ==&gt; 122498,3<br>

7. Round the result Round(122498,3) ==&gt;122498</p>



<p align="left">**Note: Sorry for shortening this part so much,

but the tutorial otherwise would exceeds 11 pages : ). If

something isn't understood, don't hesitate to contact me via

e-mail.</p>



<p align="left">These steps are performed on every character of

the Name, remember to use the &quot;floating point window&quot;,

while debugging the mathematical functions.<br>

Performing these steps on every single character of the Name,

beginning with the last will lead to the following result:</p>

<div align="center"><center>



<table border="1">

    <tr>

        <td><font size="4">CyberBla</font>d<font color="#FF0000" size="4">e</font></td>

        <td><font size="4">122498</font></td>

    </tr>

    <tr>

        <td><font size="4">CyberBla</font><font color="#FF0000" size="4">d</font><font size="4">e</font></td>

        <td><font size="4">119096</font></td>

    </tr>

    <tr>

        <td><font size="4">CyberBl</font><font color="#FF0000" size="4">a</font><font size="4">de</font></td>

        <td><font size="4">109267</font></td>

    </tr>

    <tr>

        <td><font size="4">CyberB</font><font color="#FF0000" size="4">l</font><font size="4">ade</font></td>

        <td><font size="4">148148</font></td>

    </tr>

    <tr>

        <td><font size="4">Cyber</font><font color="#FF0000" size="4">B</font><font size="4">lade</font></td>

        <td><font size="4">37219</font></td>

    </tr>

    <tr>

        <td><font size="4">Cybe</font><font color="#FF0000" size="4">r</font><font size="4">Blade</font></td>

        <td><font size="4">172794</font></td>

    </tr>

    <tr>

        <td><font size="4">Cyb</font><font color="#FF0000" size="4">e</font><font size="4">rBlade</font></td>

        <td><font size="4">122498</font></td>

    </tr>

    <tr>

        <td><font size="4">Cy</font><font color="#FF0000" size="4">b</font><font size="4">erBlade</font></td>

        <td><font size="4">112480</font></td>

    </tr>

    <tr>

        <td><font size="4">C</font><font color="#FF0000" size="4">y</font><font size="4">berBlade</font></td>

        <td><font size="4">204832</font></td>

    </tr>

    <tr>

        <td><font color="#FF0000" size="4">C</font><font size="4">yberBlade</font></td>

        <td><font size="4">38896</font></td>

    </tr>

</table>

</center></div>



<p>&nbsp;</p>



<p><em>The original VB-Code, that performs

these operations:</em></p>



<p>dim KeyName(1 to 50)</p>



<p>For x = 1 To Len(NameText.Text)<br>

KeyName(x) = Asc(NameText.Text)<br>

KeyName(x) = Key(x) = Key(x) + 6<br>

KeyName(x) = Key(x) ^ 3<br>

KeyName(x) = Key(x) / 10<br>

KeyName(x) = Key(x) - 6<br>

KeyName(x) = Round(Key(x))<br>

Next x<br>

</p>



<p>_____________</p>



<p><font size="3">Here the manipulations on the Serial:</font></p>



<p>1. Take the AscII values of the key, beginning with the last

one and stopping one before the first character. ==&gt; 57<br>

2. Use the Cosine function on the AscII value ==&gt;

0,89986682...<br>

3. Multiply 0,89986682... with 600 ==&gt; 539,9200961..<br>

4. result = result + <font size="4">(</font><font size="1">PositionOfCharacterInString</font><font size="4"> </font><font size="2">- 1</font><font size="4">)<sup>4 </sup></font><font size="3">==&gt; 1835,9200961...</font><font size="4"><sup><br>

</sup></font><font size="3">5. Round the result Round

(1835,9200961...) ==&gt; 1836<br>

6. Take the absolute value of the number Abs(1836) ==&gt; 1836</font></p>



<p>&nbsp;</p>

<div align="center"><center>



<table border="1">

    <tr>

        <td><font size="4">678678</font><font color="#FF0000" size="4">9</font></td>

        <td><font size="4">1836</font></td>

    </tr>

    <tr>

        <td><font size="4">67867</font><font color="#FF0000" size="4">8</font><font size="4">9</font></td>

        <td><font size="4">1137</font></td>

    </tr>

    <tr>

        <td><font size="4">6786</font><font color="#FF0000" size="4">7</font><font size="4">89</font></td>

        <td><font size="4">269</font></td>

    </tr>

    <tr>

        <td><font size="4">678</font><font color="#FF0000" size="4">6</font><font size="4">789</font></td>

        <td><font size="4">417</font></td>

    </tr>

    <tr>

        <td><font size="4">67</font><font color="#FF0000" size="4">8</font><font size="4">6789</font></td>

        <td><font size="4">528</font></td>

    </tr>

    <tr>

        <td><font size="4">6</font><font color="#FF0000" size="4">7</font><font size="4">86789</font></td>

        <td><font size="4">14</font></td>

    </tr>

</table>

</center></div>



<p>&nbsp;</p>



<p><em>The original VB-Code, that performs

these operations:</em></p>



<p>x = Len(NameText.Text)</p>



<p>Do While x &gt; 1<br>

x = x - 1<br>

KeySerial(x) = Asc(Mid(NameText, x + 1, 1))<br>

KeySerial(x) = Cos(KeySerial(x))<br>

KeySerial(x) = KeySerial(x) * 600<br>

KeySerial(x) = KeySerial(x) + x^4<br>

KeySerial(x) = Round(KeySerial(x))<br>

KeySerial(x) = Abs(KeySerial(x))<br>

Loop<br>

</p>



<p>______</p>



<p>Now these values are reduced to one:</p>



<p>&nbsp;</p>



<p><font color="#FFFFFF">ResultSerial</font> = <font size="3">0 -

14 + 528 - 417 + 269 - 1137 + 1836 = </font><font color="#FFFFFF" size="3">1065</font></p>



<p><font color="#FFFFFF">ResultSerial </font>= <font color="#FFFFFF" size="3">1065</font> - 6</p>



<p><font color="#FFFFFF">ResultSerial </font>= 1059</p>



<p><em>The original VB-Code, that performs

these operations:</em></p>



<p>Plus = True<br>

<br>

For x = 1 To (Len(CodeText) - 1)<br>

Plus = Not Plus<br>

If Plus = True Then<br>

ResultSerial = ResultSerial + KeySerial(x)<br>

Else<br>

ResultSerial = ResultSerial - KeySerial(x)<br>

End If<br>

Next x</p>



<p>ResultSerial = ResultSerial - 6</p>



<p>&nbsp;</p>



<p>Now, after the CrackMe has calculated the final result of the

Serial generated by the entered Code, it calculates the final

result of the Number generated by the entered Name:</p>



<p><font color="#FFFFFF">ResultName </font>= <font size="3">37219<br>

</font><font color="#FFFFFF">ResultName </font>=<font color="#FFFFFF"> </font><font size="3">37219</font> / 1000<br>

<font color="#FFFFFF">ResultName </font>=<font color="#FFFFFF"> 37</font></p>



<p>&nbsp;</p>



<p><em>The original VB-Code, that performs

these operations:</em></p>



<p><font color="#FFFFFF">ResultName</font>

= KeyName(Round(Len(Text1.Text) / 2))<em><br>

</em><font color="#FFFFFF">ResultName</font> = Round(<font color="#FFFFFF">ResultName</font> / 1000)<em><br>

</em></p>



<p>While debugging all these operations I

thought this CrackMe would never end... But then...<br>

...these two values were compared<em>. Yeahh !!!<br>

</em></p>



<p>If <font color="#FFFFFF">ResultName</font> = <font color="#FFFFFF">ResultSerial</font> (<font color="#FFFFFF">37</font> = <font color="#FFFFFF">1059</font>) means a correct Code was entered. Oh my god !

Now we have to reverse all these operations in order to code a

KeyGen. It would be easier to code a BruteForcer for this

CrackMe. In fact this is, what I did. You can find the Source

Code (VB6 : ) ) in the Zip-file. It only needs 20sec to find a

correct serial. But this isn't a very elegant, so if you think

you're good you can try to code a KeyGen and send it to me : )<br>

</p>



<br><br>



<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Final Notes</font>

</font></center></td></tr></table>

<p>If I made mistakes and

explained things wrongly then please mail me and I will correct

my mistakes. (Feel free to correct it yourself and send me the

new version :-) )You can also mail me if there is anything you

are not clear about. Any comment is appreciated. Don't hesitate

to send your remarks to: <a href="mailto:CyberBlade@gmx.net"><font size="3">CyberBlade@gmx.net</font></a></p>



<p><font size="3">GREETS FLY OUT TO: --==[ ACiD

BuRN, AfKayAs, Bjanes, DnNuke, Eternal Bliss, Fisch, Gizmo,

Joseph, MiZ, St0rmer, Torn@do, Tusk, Vladimir, Volatility, ^The

Uplifter^ and The uncle ]==--</font></p>



<p>Sorry, if I forgot someone : (</p>





<!-- WAY OUT STARTS HERE -->

<hr><center><i>You are deep inside fravia's page of reverse engineering,  

choose your way out:<br><br></i></center>

<br><center>

<!-- EITHER A NICE GIF LIKE THIS -->

<!-- <a href="project3.htm" tppabs="http://www.anticrack.de/fravia/project3.htm"><IMG SRC="project3.gif" tppabs="http://www.anticrack.de/fravia/project3.gif" ALT="projecT3" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a><br><font color=gray>Back to project 3</FonT><br><bR>-->

<!-- OR JUST A LINK LIKE THIS -->



<!--<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 VSPACE=0 HSPACE=0><A HREF="project1.htm" tppabs="http://www.anticrack.de/fravia/project1.htm">Back to Your_chosen_project</A> <hr width=33%>-->



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html">homepage</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="links.htm" tppabs="http://www.anticrack.de/fravia/links.htm">links</a> 

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm">search_forms</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm">+ORC</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="protec.htm" tppabs="http://www.anticrack.de/fravia/protec.htm">how to protect</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="academy.htm" tppabs="http://www.anticrack.de/fravia/academy.htm">academy database</a>

<br>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="realicra.htm" tppabs="http://www.anticrack.de/fravia/realicra.htm">reality cracking</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="howtosea.htm" tppabs="http://www.anticrack.de/fravia/howtosea.htm">how to search</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="javascri.htm" tppabs="http://www.anticrack.de/fravia/javascri.htm">javascript wars</a>

<br>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm">tools</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="noanon.htm" tppabs="http://www.anticrack.de/fravia/noanon.htm">anonymity academy</a> 

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm">cocktails</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="ideale.htm" tppabs="http://www.anticrack.de/fravia/ideale.htm">antismut CGI-scripts</a>



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="info.htm" tppabs="http://www.anticrack.de/fravia/info.htm">mail_fravia+</a>

<br>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="legal.htm" tppabs="http://www.anticrack.de/fravia/legal.htm">Is reverse engineering legal?</a>

</center>

<hr>

</body>

</html>