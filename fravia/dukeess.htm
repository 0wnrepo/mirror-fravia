<HTML>

<HEAD>

   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">

   <META NAME="GENERATOR" CONTENT="Mozilla/4.04 [en] (Win95; I) [Netscape]">

   <TITLE>dukeess.htm Inside the VB3 .EXE</TITLE>

</HEAD>

<BODY TEXT="#001010" BGCOLOR="#C0C0C0" VLINK="#405040">

<!--  formamus.htm version 20 January 1998



      INSTRUCTIONS FOR SUBMITTING: 



      SEARCH THIS TEXT FOR THE STRING "Your_" 



      AND REPLACE WITH WHATEVER YOU WANT TO 



      SEND TO ME! -->

<BR>&nbsp;

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="22" >

<TR>

<TD></TD>



<TD>

<CENTER><!-- Choose  a TITLE probably wont be changed --><FONT SIZE=+2>Inside

the VB3 .EXE</FONT></CENTER>

</TD>



<TD>

<CENTER><!-- Choose  a PROJECT GIF may be changed --><A HREF="project8.htm" tppabs="http://www.anticrack.de/fravia/project8.htm"><IMG SRC="visualba.gif" tppabs="http://www.anticrack.de/fravia/visualba.gif" 

ALT="visualbasic" BORDER=0 HEIGHT=43 WIDTH=114 ALIGN=CENTER></A><BR>

<FONT COLOR="#808080">Visual Basic</FONT>&nbsp;</CENTER>

</TD>

</TR>



<TR>

<TD BGCOLOR="#FFFFEA">

<CENTER><!-- CHOOSE A DATE (will probably be changed) --><FONT COLOR="#890000">8 March

 1998</FONT></CENTER>

</TD>



<TD BGCOLOR="#FFFFEA">

<CENTER>by&nbsp;<!-- CHOOSE A HANDLE (wont be changed) --><FONT SIZE=+3>_Duke_</FONT></CENTER>

</TD>



<TD VALIGN=CENTER BGCOLOR="#FFFFEA"></TD>

</TR>



<TR>

<TD>

<CENTER><A HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" BORDER=0  ALIGN=BOTTOM width="13" height="13"></A></CENTER>

</TD>



<TD BGCOLOR="#898030">

<CENTER>Courtesy of Fravia's page of reverse engineering&nbsp;</CENTER>

</TD>



<TD BGCOLOR="#898030"><PRE> </PRE>

</TD>

</TR>



<TR>

<TD></TD>



<TD>

<CENTER><!-- Your truly+ will probably comment --><I>A fundamental essay by Duke, that 

has the huge merit of setting the point for visual basic reverse engineering 

where it belongs: inside its elements (tokens) its forms and controls. 

Reading this you will be tempted to start a marvellous journey inside all 

visual basic programs... by all means do it, and bring back to us your 

discoveries... enjoy!</I></CENTER>

</TD>



<TD></TD>

</TR>



<TR>

<TD></TD>



<TD BGCOLOR="#898030">

<CENTER><B>There is a crack, a crack in everything That's how the light

gets in</B>&nbsp;</CENTER>

</TD>



<TD></TD>

</TR>



<TR>

<TD VALIGN=CENTER BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF">Rating</FONT>&nbsp;</CENTER>

</TD>



<TD VALIGN=CENTER BGCOLOR="#C6E7C6">

<CENTER><!-- CHOOSE A RATING (may be changed) --><FONT COLOR="#0000FF">( )<B>Beginner</B>

(x)<B>Intermediate</B> ( )<B>Advanced</B> ( )<B>Expert</B></FONT>&nbsp;</CENTER>

</TD>



<TD></TD>

</TR>

</TABLE>

<!-- CORPUS  -->

<BR>An exploration of the inner workings and structure of the Visual Basic

3 Executable file



<P><FONT SIZE=+2>Inside the VB3 .EXE</FONT>

<BR><!-- CHOOSE A SUBTITLE (wont proabbly be changed) -->

<BR><FONT COLOR="#0B7FC1"><FONT SIZE=+2>by _Duke_&nbsp;<!-- INTRODUCTION STARTS HERE --></FONT></FONT>

<BR>&nbsp;

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Introduction</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>

<P>The following essay is not intended to ba a "How to crack VB programs"

essay but I will show you exactly HOW a VB program is protected from de-compilers.

It is important that you have a working knowledge of programming using

Visual Basic in order to understand the essay and more importantly, to

follow the source code of the programs you de-compile. Although this essay

covers an older version of VB, there are many programs out there which

have yet to be cracked. It also serves as a starting point to understanding

the later versions.

<BR>

<!-- TOOLS REQUIRED STARTS HERE -->

<BR>

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Tools required</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>

<!-- PASTE HERE YOUR REQUIRED TOOLS -->



<P>1) <U>Visual Basic 3</U>- For Compiling our own test programs.



<P>2) <U>A Good Hex Editor</U>- Use one that will let you Binary Compare

two files and display the differences.



<P>3) <U>SoftIce</U>- Of Course!



<P>4) <U>MAKE_MAK.EXE</U> or DoDi's <U>VBOPT</U> to "Protect" our programs.



<P>5) <U>A VB DeCompiler</U>. (Is there anything but DoDi's??!!)

<BR>&nbsp;

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Essay</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>

<!-- PASTE HERE THE TEXT OF YOUR ESSAY



     THIS IS OF COURSE THE MOST IMPORTANT PART



     PLEASE CHECK THE MARGINS! SHOULD NOT BLAST



     NETSCAPE MARGINS OUT! HAVE A LOOK INSIDE



     YOUR OWN BROWSER WHEN YOU HAVE FINISHED!  -->



<P>As many people have discovered, a VB program isn't really a 'Program'

in the traditional sense of the word. Visual Basic is an 'Interpreted'

language. What this means is that the program is stored in a 'higher level'

language than the machine's native code. It is the job of the interpreter

to read back and execute this higher language AT RUNTIME. Most other languages

(Such as C) are stored in native code and need nothing to translate them.

In case you didn't know, the VB interpreter is VBRUN300.DLL (No wonder

all the VB programs need it to run!!) This is the REAL program that is

running. Any Softice breakpoints you set for the 'standard' Windows routines

will ALWAYS return you to VBRUN not to the EXE! The interpreter is reading

the contents of the EXE, translating the TOKENS, and executing various

subroutines to perform the desired task. A VB program, therefore, cannot

be disassembled by the standard tools. Softice is pretty much useless here

unless you like to follow the spaghetti inside VBRUN. The program can however

be de-compiled back into VB source code thanks to DoDi's VBDIS. It is available

on the net as shareware but I STRONGLY recommend you get (and pay for,

its worth it) the full version if you are serious about R-E'ing VB programs.

This decompilation is possible thanks to Micro$oft's including information

in the executable that is not needed for the program to run. Now why would

they do that?



<P>&nbsp;The VB executable is made up of the same basic parts as other

windows programs:



<P>&nbsp;&nbsp;&nbsp;&nbsp; DOS HEADER: This is provided for backward compatibility

of the EXE file format.



<P>&nbsp;&nbsp;&nbsp;&nbsp; STUB PROGRAM: Checks if Windows is running.

Provides an error message if the

<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

program is being run from DOS.



<P>&nbsp;&nbsp;&nbsp;&nbsp; WINDOWS HEADER: This section provides important

information about the EXE to

<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

the operating system. Some of the more important locations are:



<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

OFFSET (hex)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FUNCTION

<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ---------------------------------------------------------

<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Initial value of CS:IP

<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

1C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Number of Segments

<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Relative offset to Segment

Table (typ. 40)

<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Relative offset to Resource

Table

<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

3E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The expected Windows version

<BR>***Note About Hex Editors: There seems to be a difference in opinion

as to the 'START'

<BR>of a program. Some editors call the start byte 00, while others consider

it byte 01.

<BR>If the addresses you are looking at just don't seem right, try shifting

1 byte to the

<BR>right or left.



<P>For a good reference on the Windows Header, look in the WIN SDK help

file WIN31WH.HLP and look under "Executable-File Header Format"



<P>A short VB program (1 form/module) will typically contain 4 entries

in it's segment table referencing 3 segments (one can be ignored). One

of the segments, usually located just after the Windows Header, is a single

CALL instruction which transfers

<BR>control to the interpreter. THIS IS THE ONLY CODE IN THE VB PROGRAM

THAT RUNS!!!!!!&nbsp; The other segments point to the Tokens themselves

and a section which specifies how the tokens are structured into the various

Subs and Functions.



<P>Resources are 'packages' of data in a pre-defined format which a program

will access. Examples of resources are Icons, Fonts, and Menus. In a VB

program, they are also used to reference Forms and other 'Data' sections

of the program.

<BR>&nbsp;

<BR>&nbsp;

<BR>&nbsp;



<P><FONT SIZE=+2>Some Hands On</FONT>



<P>** For this section of the lesson, you will need CALC.EXE compiled from

the samples that come with VB3, it should compile to 9020 bytes. Or download it 

<A href="javascript:if(confirm('http://129.105.116.5/fravia/zipped/calc.zip  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://129.105.116.5/fravia/zipped/calc.zip'" tppabs="http://129.105.116.5/fravia/zipped/calc.zip">here</A> within +Fravia's page.



<P>Start your favorite Hex Editor and load CALC.EXE. Examine the following

sections as I describe them. I have found it easiest to print the whole

file in hex starting from the windows header and use colored markers to

see what the sections 'look' like.

<PRE>&nbsp;&nbsp;&nbsp; 0000-003F DOS HEADER- Note the 06 @ 003D; This is the start page of the Windows Header.



&nbsp;&nbsp;&nbsp; 0200-049F Stub Program- This code only runs from DOS.



&nbsp;&nbsp;&nbsp; 0600-07FF Windows Header- Lets look more closely:



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0614- Initial CS:IP = 10 00 01 00&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This translates to 10 bytes past segment 1



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 061C- # Segments = 04 00



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0622- Offset to Start of Segment Table = 40 00&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Segment table starts @ 0640, segments are 4 words long



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Segment 1 @ 0640 - 08 00 19 00 50 1D 19 00&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This means:&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The segment is located @ 0800

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The segment is 0019 bytes long

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1D50 - Flags (more later)

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The segment need 0019 bytes of memory



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Segment 2 @ 0648 - 00 00 00 00 11 0C 02 00&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ignore this segment definition



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Segment 3 @ 0650 - 0F 00 50 02 10 1D 50 02

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This segment @ 0F00 is the 'Sub Structure Table'



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Segment 4 @ 0658 - 09 00 D0 50 10 1C D0 50

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This segment @ 0900 is the Tokens (the 'Code')



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0624- Offset to Resource Table = 68 00

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table starts @ 0668:



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Word @ 0668 = 08 00 - This is rscAlignShift, ignore it for now</PRE>



<PRE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; First a resource's Type is defined, then all of the resources of that type follow:



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; First Type definition @ 066A - 0E 80 01 00 00 00 00 00

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This means:

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The TypeID is 800E (A Group Icon)

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; There is 1 resource defined

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *The last 2 words are reserved</PRE>



<PRE>&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Then the resc. is defined @ 0672 - 12 00 01 00 30 1C 01 80 00 00 00 00

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This means:

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The resource starts on Page 0012

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It is 0001 Pages long

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1C30 is more Flags

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The resource's ID is 8001

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *Again, the last two words are reserved



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The next type definition is @ 067E - 03 80 01 00 00 00 00 00&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'There is 0001 resource of type 8003 (Icon)'



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Then the resource definition @ 0686 - 13 00 03 00 30 1C 01 80 00 00 00 00

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The resource starts at page 0013 and is 3 pages long



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The next type definition is @ 0692 - 0A 80 05 00 00 00 00 00

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'There are 0005 resources of type 800A (Data)'

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * There are actually 4 resources, the 3rd is skipped



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Then the 4 definitions starting @ 069A:

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 069A - 16 00 02 00 30 1C 01 80 00 00 00 00&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 06A6 - 18 00 02 00 30 1C 02 80 00 00 00 00

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 06B2 - 1A 00 09 00 30 1C 04 80 00 00 00 00

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 06BE - 23 00 01 00 30 1C 05 80 00 00 00 00



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; These resources are respectively:

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Forms Definitions

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Internal Definitions

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A Form

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Form and Control Names



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It should be noted that the resource ID is not related to what

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the resource is used for. The function of the resource is&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; identified by it's header bytes.

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The FLAGS sections of the segments and resources are used for

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; information like if they are MOVABLE, SHAREABLE, PRELOADED,&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXECUTEONLY, etc.



&nbsp;&nbsp;&nbsp;&nbsp; 06D8-07FF Various name tables used by windows



&nbsp;&nbsp;&nbsp;&nbsp; 0800-0819 This is the first segment. If you remember, the initial value

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; of CS:IP was 10 bytes past the start of this segment. This byte is&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a long CALL (9A) into the interpreter. The address is computed at

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; runtime since there is no way to tell where VBRUN will load into

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memory. The bytes which follow the segment are loading information

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for other segments.



&nbsp;&nbsp;&nbsp;&nbsp; 0900-0EFF These are the actual tokens. The source code is translated to this

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at compile time. Strings are stored literally; this helps us to find

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; our place while comparing tokens to source. More on this section and

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the ones that follow in the next lesson.



&nbsp;&nbsp;&nbsp;&nbsp; 0F00-114F This section defines how the tokens are arranged into their various

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subs.



&nbsp;&nbsp;&nbsp;&nbsp; 1200-12FF This is the GROUP_ICON definition (Don't bother!)



&nbsp;&nbsp;&nbsp;&nbsp; 1300-15FF This is the ICON definition. For information on this and the previous

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; section look in the WIN SDK help file under 'Graphics File Formats'



&nbsp;&nbsp;&nbsp;&nbsp; 1600-17FF This is the Forms Definitions section. Here, information on forms,

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; imported VBX's, and controls is stored.



&nbsp;&nbsp;&nbsp;&nbsp; 1800-19FF This section's format is quite mysterious but it is used to hold

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object definitions like forms, controls, variables, and constants.



&nbsp;&nbsp;&nbsp;&nbsp; 1A00-22FF This is the actual form used in the program. It's format is very similar

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to a VB .FRM file. Notice the 'in line' icon @ 1A61. Pictures are also

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stored this way. The form's controls are defined in the second half of

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the form.



&nbsp;&nbsp;&nbsp;&nbsp; 2300-END&nbsp; These are the control names. ***This section is unnecessary for program&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; operation and is removed when the program is PROTECTED.***</PRE>

<FONT SIZE=+2>What does this mean for CRACKERS???</FONT>



<P>Crackers can modify the information in these various sections to:

<UL>-Change an '=' to '&lt; >' in the program tokens (or vice versa)

<BR>-Adjust constants to new values

<BR>-Un-Hide hidden controls

<BR>-Enable check boxes, menu items, buttons, etc. which have been disabled</UL>

If you are lucky enough to own the Professional Version of DoDi's VB tools,

you can De-compile most programs into source code which will recompile

in Visual Basic after you have made your changes. Unfortunately, the shareware

and standard versions don't handle custom controls properly and will probably

not give you source code that will re-compile. Your only option is to make

the modifications manually.

<BR>&nbsp;

<H3>

Tokens</H3>

While a complete explanation of all of the tokens is beyond this lesson,

I will describe some of the more common things you will come across as

you examine tokens. Lets take the following small snippet of code:

<UL>

<PRE>0900: 35 49 21 2D 1A 00 9A 38 0A 00 0C 00 04 00 64 75

0910: 6B 65 00 00 C3 11 7A 44 B4 34 1E 00 35 0E 4B 49

..

..



The source code which compiled into this was:</PRE>



<PRE>IF password &lt;> "duke" THEN END</PRE>

</UL>

Lets break this down. The first two bytes '35 49' is the token for encoding

the number of leading spaces in the original source code. Some of the token

words for spacing are as follows:

<UL>494B- No Spaces

<BR>4948- 1 Space

<BR>4945- 2 Spaces

<BR>4942- 3 Spaces

<BR>4935- 4 Spaces

<BR>4932- 5 Spaces

<BR>.....</UL>

Hence '35 49' means there are 4 spaces at the start of this line of code

(four spaces is also the default TAB in VB). Although this information

is only for formatting and is not necessary for program operation, the

interpreter expects to see valid tokens here and funny things happen if

it doesn't. <I>HINT: This makes it easy to find the start of each line

as you look at raw tokens.</I>



<P>'21 2D 1A 00'&nbsp; References the variable <I>password</I>.

<UL>2D21 - Tells the stack how to handle the offset. Could be considered

<I>Type Information.</I>

<BR>001A - Offset to load variable's information</UL>

The next bytes '9A 38 0A 00 0C 00 04 00 64 75 6B 65 00 00' is the string

definition for 'duke' :

<UL>389A - Literal String Definition

<BR>000A - Length of the Remainder of the Definition in Bytes

<BR>000C - Offset to length of String (0600 + 000C = 060C&nbsp; <I>Points

to next word</I>)

<BR>0004 - Length of Actual String

<BR>'64 75 6B 65' - The String!&nbsp;&nbsp;&nbsp; 'duke'

<BR>0000 - Null Termination/Padding</UL>

'C3 11'&nbsp; Follows most Literal String Definitions (<I>performs a PUSH

to prepare for next token</I>)

<BR>&nbsp;

<BR>&nbsp;'7A 44' This is the important one. It basically means 'Compare

the two variables and if&nbsp; &lt; >&nbsp; then continue' Hmmm. What would

happen if we changed '7A 44' to '6A 44' which means 'Compare the two variables

and if&nbsp; =&nbsp; then continue' You guessed it! Our program would be

cracked.



<P>The remaining tokens are the END instruction and the next line spacing

token. The easiest way to learn about the different tokens is to write

short VB programs, make .EXE's, and compare the tokens with the source

code which generated them. When you compare the differences between simple

code changes, you will begin to see the patterns. You could also look at

the routines for the various tokens but these are very difficult to follow.

If you would like to look at the routines, try the following:

<UL><I>(SoftIce must be running and you may have to do this procedure more

than once to get it to work)</I>

<LI>

Run a VB program</LI>



<LI>

While the program is running, <I>CTRL-D </I>into SoftIce</LI>



<LI>

Do a <I>HEAP </I>on the program to display it's memory locations</LI>



<LI>

<I>DB </I>the addresses of the 'Code' segments (<I>try seg. 4!</I>) until

you find the tokens</LI>



<LI>

<I>BPM </I>the address of the first token</LI>



<LI>

Return to Windows and Exit the VB program</LI>



<LI>

Restart the SAME VB program; SoftIce will pop up once on a string copy

in VFAT, <I>CTRL-D</I> back to the program</LI>



<BR>and it will pop up again on a JMP AX in VBRUN.</UL>

This JMP AX is about to go to the first routine. If you look at AX, you

will notice that it's value is the first token. It was loaded with the

previous instruction LODSW ES. The tokens are actually the addresses of

the routines to be performed! If you <I>DB ES:0&nbsp; </I>you will see

the tokens the way VBRUN is referencing them using SI. As you step through,

you can watch the tokens being loaded and their routines run.

<BR>Now that you have a basic understanding of how the tokens work, let's

move on....

<H3>

Forms and Controls</H3>

Before I go into an actual Form, there is another resource which describes

the various forms and controls in the program. Lets take another section

of CALC.EXE:

<BR>&nbsp;

<PRE>&nbsp;&nbsp;&nbsp; 1600:03 20 81 80 FF FF 43 41 4C 43 00 00 00 00 00 05

&nbsp;&nbsp;&nbsp; 1610:00 01 00 43 41 4C 43 00 00 46 09 04 80 46 00 FF

&nbsp;&nbsp;&nbsp; 1620:01 A4 48 00 43 41 4C 43 2E 46 52 4D 00 00 00 58

&nbsp;&nbsp;&nbsp; .....</PRE>

This is the start of the 'Forms Definitions' section. It contains the names

of the form (.FRM) files used in the compile, names of any .VBX files needed

by the program, and references for both common and custom controls.

<BR>&nbsp;The start (header) of this section is '03 20 81 80'&nbsp; and

there is only one of these sections in an .EXE (that I have seen, anyway).

'FF FF' always follows.

<BR>&nbsp;The next nine bytes contains the program name, eight byte DOS

limit and a terminating 0. If the name is less than 8 bytes long, the extra

space is padded w/ 0's.

<BR>&nbsp;The next bytes '05 00' is the length of the <I>Application Title</I>

with a terminating 0. This title may be up to H29 bytes long and is entered

at compile time.

<BR>&nbsp;'01 00' ?????? Possibly the number of titles?

<BR>&nbsp;'43 41 4C 43 00' is the title 'CALC'

<BR>The next '00' is padding.

<BR>The bytes which follow are the definitions of the names and controls.

They have the following format:

<BR>&nbsp;

<UL>

<PRE><U>Next byte:</U></PRE>



<PRE><B>43</B> - VBX Name - This defines a VBX needed by the program. The byte after the '43' is the

length of the VBX filename. The next word is '00 00' since there are no resources&nbsp;

associated with these entries (see next definition). The null terminated filename&nbsp;

starts 7 bytes later (I don't know what the 7 bytes are for).</PRE>



<PRE><B>46</B> - Form Name - This is the name of the .FRM file used during the compile. Again the

byte after the '46' is the length of the filename. The word which follows is the&nbsp;

ID of the resource which contains the actual form. 7 unknown bytes, then the null term.

filename. The word after this is the number of DWORDS which follow before the next

definition. Most form name entries have this set to '00 00' which of course means

that the next definition starts at the next byte. I don't know what these bytes mean&nbsp;

either.</PRE>



<PRE><B>58</B> - Control Name(s)? - These seem to be the definitions for the control names. ALL&nbsp;

of the standard controls are listed first without names. The word(?) after the 58 is the&nbsp;

control type. A list of the most common controls will be provided later. There are&nbsp;

4 words follow the control type, the last of which always seems to be 0000. If the&nbsp;

control is a Custom control, the length of the name and the null term name follow,&nbsp;

otherwise this part is left out. The next word is again the number of mystery DWORDS

which follow.</PRE>

</UL>

Now for the Form: CALC.EXE only has one form which starts at 1A00. The

form can be thought of as two sections:

<BR>the form description and the controls description.

<UL>

<PRE>00001A00 FF CC 2C 00 07 A3 08 00 00 8D 03 00 00 00 00 0D ..,.............

00001A10 22 01 26 00 32 00 FF 00 0A 43 61 6C 63 75 6C 61 ".&amp;.2....Calcula

00001A20 74 6F 72 05 30 0C 00 00 98 07 00 00 C0 0C 00 00 tor.0...........

00001A30 00 0C 00 00 0C 06 53 79 73 74 65 6D 9A 99 19 41 ......System...A

00001A40 01 19 01 00 42 00 23 FE 02 00 00 00 00 01 00 01 ....B.#.........

00001A50 00 20 20 10 00 00 00 00 00 E8 02 00 00 16 00 00 .&nbsp; .............

.......</PRE>



<UL>

<UL>

<UL>

<UL>

<UL>

<PRE>--MORE ICON DATA --</PRE>

</UL>

</UL>

</UL>

</UL>

</UL>



<PRE>.......

00001D40 1F F8 00 00 1F F8 00 00 3F 24 05 46 6F 72 6D 31 ........?$.Form1

00001D50 25 01 35 30 0C 00 00 36 98 07 00 00 37 C0 0C 00 %.50...6....7...

00001D60 00 38 00 0C 00 00 FF 17 00 00 00 00 00 00 00 00 .8..............

00001D70 00 00 00 00 71 01 00 00 00 00 00 00 00 00 00 00 ....q...........

00001D80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................

00001D90 00 00 00 00 00 00 01 41 00 00 80 01 07 00 00 04 .......A........

00001DA0 FF 00 01 37 02 07 00 04 78 00 58 02 E0 01 E0 01 ...7....x.X.....

00001DB0 0B 06 53 79 73 74 65 6D 9A 99 19 41 E1 11 07 00 ..System...A....</PRE>

</UL>

The form(s) will have the header 'FF CC 2C 00', (<I>The header is actually

just CCFF but all of the forms I have seen follow this with 002C, it doesn't

seem to ever be checked. VBRUN300 will also accept CC23 as a valid form

section header although I have not yet seen it in an .EXE</I>.)

<BR>This form has 7 controls,

<BR>Offset to end = 08A3 (End of form : 1A05 + 08A3 =&nbsp; 22A8),

<BR>Offset to first control = 038D (First control : 1A09 + 038D = 1D96)

<BR>I don't know what the 0D is....



<P>The important thing to remember from this point is that VB starts with

a default form and makes changes to it from there.

<BR>If our form were a default VB form, the 'FF 00' @ 1A16 would be located

at 1A10; this FF designates the end of the basic window properties. Instead

we have three entries:

<UL>'22 01' - 22 is the border style, it has changed to 1-Fixed Single

<BR>'26 00' - 26 is the Max button on the window, it has been changed to

False or <U>DISABLED</U><B>&nbsp;</B> (27-Min &amp; 28-Close)

<BR>'35 00' - 35 is Clip Controls, it has been changed to False</UL>

As you can see, the changes are made by adding a 'Property ID' and the

new value. The three properties changed above all had values that were

only one byte long but this is not always the case. The Form's caption

is next, then starts property 05 @ 1A23 . The next 4 DWORDS are the values

for property 05 which set the size and location of the window. Changing

these will move and/or resize the window. The next property 0C, is a font

change. This is followed by the font name and 5 words which describe it's

attributes. At 1A46 is property 23, an Icon. Icons, as well as images,

are stored <I>inline, </I>in standard format and can be edited. The next

word 02FE is the offset to the end of the icon. Right after the icon, is

property 24 @1D49; the Link Topic stored in the usual VB string format.

And after that, property 25 which is the Link Mode. Last, and <U>definitely</U>

least, are properties 35, 36, 37, and 38. Do you recognize their values?

They are the same DWORDS as property 05 above. There is a difference though,

changing these does nothing. I don't know if these are used for anything

at all. The next property is FF meaning of course 'No More Properties'.

A few unknown bytes and we are on to our next part: the controls section

(remember though, this is all one resource).

<BR>&nbsp;The controls on this form start at 1D96. Since there are a lot

of buttons on our 'Calculator', the section is too long to go over the

whole thing but here is a chunk of it:

<BR>&nbsp;

<UL>

<PRE>00001D90 00 00 00 00 00 00 01 41 00 00 80 01 07 00 00 04 .......A........

00001DA0 FF 00 01 37 02 07 00 04 78 00 58 02 E0 01 E0 01 ...7....x.X.....

00001DB0 0B 06 53 79 73 74 65 6D 9A 99 19 41 E1 11 07 00 ..System...A....

00001DC0 FF 0B A9 01 00 00 00 00 00 00 00 00 00 00 00 00 ................

00001DD0 00 00 00 00 00 00 00 00 03 41 00 00 80 01 08 00 .........A......

00001DE0 00 04 FF 00 01 38 02 08 00 04 D0 02 58 02 E0 01 .....8......X...

00001DF0 E0 01 0B 06 53 79 73 74 65 6D 9A 99 19 41 E1 11 ....System...A..

00001E00 08 00 FF 0B A9 01 00 00 00 00 00 00 00 00 00 00 ................

00001E10 00 00 00 00 00 00 00 00 00 00 03 41 00 00 80 01 ...........A....

00001E20 09 00 00 04 FF 00 01 39 02 09 00 04 28 05 58 02 .......9....(.X.

00001E30 E0 01 E0 01 0B 06 53 79 73 74 65 6D 9A 99 19 41 ......System...A

00001E40 E1 11 09 00 FF 0B A9 01 00 00 00 00 00 00 00 00 ................

00001E50 00 00 00 00 00 00 00 00 00 00 00 00 03 3C 00 00 .............&lt;..

00001E60 00 02 00 04 FF 00 01 43 04 F8 07 58 02 E0 01 E0 .......C...X....</PRE>

</UL>

&nbsp;Lets look at the first control in detail:

<BR>&nbsp;

<UL>'01' - Our first control will start with 01. Simple enough right? Well

that's where the simplicity for this field ends!

<BR>'41 00' - This is the offset to the next control (0041).

<BR>'00 80' - This indicates a Control Array (8000). If this value were

0000, this would be a single control.

<BR>'01' - The position of the name of this control in the Control Names

list (more info later)

<BR>'07 00' - The Index Value for the control (0007). If this were a single

control, this word would be missing.

<BR>'00' - Padding?

<BR>'04'- Control Type. Type 04 is a Command Button.

<BR>'FF' - 'End of Part 1'

<BR>&nbsp;

<BR>Now starts the same type of property list found in the form section

so I will not go into detail.</UL>

&nbsp;If our program contained a menu, the items would also be listed in

this faishon. The hierarchy can get quite messy but the key is in the first

byte(s) of the control. The bytes following the first may or may not be

the offset to next, If they are 01 - 05 they are hierarchy codes (04 meaning

no more controls). If they are > 5 then they are the offset to the next

control. After you examine this section of a program with a complex menu,

you will see what is going on.



<P>&nbsp;Unfortunately, due to the large number of control properties,

I cannot give you a list of them. It is, however, fairly easy to find the

code of a property you are looking for .... Just compile a test program

with whatever control you are trying to find the property for, make an

.EXE out of it, then change the property and make another .EXE. When you

binary compare the Form section's of the two programs, you will see what

bytes have been added to change the property. This is the best way to find

out <I>most</I> of what is in the .EXE.



<P>* <I>A note on VB3: VB3 has a strange habit of compiling the exact same

source code into slightly different .EXE's between the first and second

compiles. When making your reference file, compile your source code TWICE

without changing anything. It will ask you if you want to over write the

existing .EXE; answer YES. NOW rename the .EXE and compile it a THIRD time.

A binary compare of these should be identical, if not, repeat this until

you can get two files which are identical. THEN make a your changes and

Compile again. This is necessary on the VB3 that I have, you may want to

test it on yours.</I>



<P>Here is a list of some of the Form Properties you may want to change:

<UL>

<UL>

<PRE>03 - Background color

09 - Enabled

0B - Mouse pointer

0C - Font change

10 - Window State

1D - Fill style

1E - Fill color

23 - Inline Icon definition

24 - Link topic

25 - Link mode

26 - Max Button

27 - Min Button

28 - Close Button

2E - Visible

31 - Key Preview</PRE>

</UL>

</UL>

and standard control types:

<UL>

<UL>

<PRE>00 - Picture

01 - Label

02 - Text Box

03 - Frame

04 - Command Button

05 - Check Box

06 - Option Box

07 - Combo Box

08 - List Box

09 - Horz. Scroll Bar

0A - Vert. Scroll Bar

0B - Timer

10 - Drive Box

11 - Directory Box

12 - File Box

13 - A Menu Item

16 - Shape

17 - Line

18 - Image

25 - Data

FF - Custom Control</PRE>

</UL>

</UL>





<P>The last resource in our CALC program is the control names resource

@ 2300. Not too much to talk about here, the first entry is the name of

the form, subsequent entries are the names of the controls on the form.

With a control array, only the first item is listed. This section is not

needed <U>at all</U> for the program to run and it can be removed (and

is!) without effect. Each control defined in the control section has a

reference to the position in this list of the control's name. Unfortunately,

the program's variable and sub/function names are not stored anywhere in

the program, and hence can never be recovered. If our program had more

than one form, the additional form(s) would follow alternating with their

control names section(s).

<BR>&nbsp;



<P><FONT SIZE=+2>"Protection" from De-Compilers</FONT>.



<P>&nbsp;First let me start by saying that NO PROGRAM CAN BE PROTECTED

FROM A <B><I>GOOD</I></B> DE-COMPILER!!!! This is not to say that DoDi's

De-Compiler is not good, but he has written it with the intent to be able

to prevent it from working. As long as the Program Tokens are in the .EXE

(and they must be for the program to function) those tokens can be de-compiled

back to the original source code. So when I talk about Un-Protecting a

file, what we are really talking about is making it acceptable to DoDi's

de-compiler.



<P>&nbsp;Programs are protected by removing the sections which are not

needed for the program to run, but ARE needed for the de-compiler. These

sections are the .FRM names in the Forms definitions section and the Control

Names resource(s). Get MAKE_MAK.EXE from the net if you don't already have

it. It is a VB Protector. Make a copy of our CALC.EXE with the name CALC.OLD

and using MAKE_MAK, 'Protect' CALC.EXE.



<P>When you start to HEX examine the file, look at the following things:

<UL>1) The offset of one of the resource listings in the Win header has

been zeroed out

<BR>2) The name string 'CALC.FRM' has been removed from the forms definition

section and the name length set to 0

<BR>3) The whole Control Names resource is gone</UL>

DoDi's de-compiler will now refuse to work on our file. It is detecting

the changes and refusing to run (CHEAT!). But all we have to do is fix

these sections and it will work, right?? ABSOLUTELY!!! Since we know what

was originally contained in these sections, we can rebuild them exactly.

If we were dealing with someone else's protected file, we could only guess

at what their forms and controls were named but IT WILL DE-COMPILE once

it is fixed.



<P>Un-Protecting a file:

<UL>1)&nbsp; If you have to guess at the names, just start with FORM1.FRM

and increment for each additional form. For each '46' entry in the Forms

definitions section, INSERT a form name and fix the length field. ONLY

INSERT INTO <U>THIS</U> RESOURCE!!! After you have added the bytes, delete

just as many padding 00's at the end of this resource to bring the next

resource back to it's page boundary. If this cannot be done, you must add

00's to push the next resource to a new page boundary and adjust the pointers

in the header of all affected resources.



<P>2) Rebuild the Control Names resource. It must start on the page after

it's related form ends. If you are guessing at control names, use the control

type to make a useful name i.e. Command1, and the 'Number in List' parameter

in the control data to place it in the proper order. Pad the rest of the

page to bring it to the next boundary. Repair the pointer to this resource

in the header and adjust the pointers of any resources after this one which

have been moved.</UL>





<P>* If the program has been protected with DoDi's VBOPT, there will be

one additional step needed in order to un-protect it. I won't tell you

this step out of respect for the writer of the only VB de-compiler I know

of, but it isn't hard to figure out. I have faith in all of you!!

<UL>

<UL>

<PRE></PRE>

</UL>



<PRE><!-- FINAL NOTES STARTS HERE --></PRE>

</UL>

&nbsp;

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Final Notes</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>

<!-- PASTE HERE YOUR FINAL NOTES (if any) -->



<P>&nbsp;If there is something that I have not made clear, and after much

time of trying to figure it out for yourself, or if you know of parts of

my essay that are just wrong, please e-mail me at vbman@nassau.cv.net and

I will do my best to help.

<BR>Please Don't email duke@nassau.cv.net, it's not me. Someone got the

address before I did :(

<BR><!-- OB DUH STARTS HERE -->

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Ob Duh</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>



<CENTER><I>Ob duh does not apply here... on the countrary: visual basic buffs should 

pay Duke for this kind of information...</I>&nbsp;<!-- WAY OUT STARTS HERE -->&nbsp;

<HR><I>You are deep inside fravia's page of reverse engineering, choose

your way out:</I></CENTER>



<CENTER><!-- EITHER A NICE GIF -->

<A href="project8.htm" tppabs="http://www.anticrack.de/fravia/project8.htm"><IMG SRC="visalba.gif" tppabs="http://www.anticrack.de/fravia/visalba.gif" 

ALT="Visual basic" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></A>

<BR>

<FONT color=gray>Back to Visual Basic</FONT>

<BR><BR><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html">homepage</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="links.htm" tppabs="http://www.anticrack.de/fravia/links.htm">links</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT!

=13 WIDTH=13 ALIGN=BOTTOM><A HREF="noanon.htm" tppabs="http://www.anticrack.de/fravia/noanon.htm">anonymity</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif"  ALIGN=BOTTOM width="13" height="13"><A HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm">+ORC</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="student.htm" tppabs="http://www.anticrack.de/fravia/student.htm">students'

essays</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="academy.htm" tppabs="http://www.anticrack.de/fravia/academy.htm">academy

database</A></CENTER>



<CENTER><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm">tools</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="javascri.htm" tppabs="http://www.anticrack.de/fravia/javascri.htm">Javascript

wars</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm">cocktails</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="ideale.htm" tppabs="http://www.anticrack.de/fravia/ideale.htm">antismut

CGI-scripts</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm">search_forms</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="info.htm" tppabs="http://www.anticrack.de/fravia/info.htm">mail_fravia+</A></CENTER>



<CENTER><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="legal.htm" tppabs="http://www.anticrack.de/fravia/legal.htm">Is

reverse engineering legal?</A>&nbsp;

<HR></CENTER>



</BODY>

</HTML>



