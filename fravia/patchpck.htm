<html>

<head>

   <meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">

   <meta NAME="GENERATOR" CONTENT="Mozilla/4.04 [en] (Win95; I) [Netscape]">

   <title>patchpck.htm: 

Generating a patch for a packed program: Another approach to cracking packed programs



</title>



</head>

<body TEXT="#001010" BGCOLOR="#C0C0C0" VLINK="#405040">

&nbsp;

<table BORDER CELLSPACING="2" WIDTH="100%" HEIGHT="22">

<caption><!-- this is for the data.....fra_00xx....yymmdd....handle..beg+int...not ass... --></caption>



<tr>

<td></td>



<td><!-- Choose  a TITLE and a subtitle, choose well! -->

<center><font SIZE="+2">Generating a patch for a packed program</font></center>



<center><font SIZE="+1">Another approach to cracking packed programs</font></center>

</td>



<td><!-- Choose  a PROJECT GIF, leave this if unsure -->

<center><a HREF="projunpa.htm" tppabs="http://www.anticrack.de/fravia/projunpa.htm"><img SRC="projunpa.gif" tppabs="http://www.anticrack.de/fravia/projunpa.gif" ALT="Packers" BORDER="0" HEIGHT="43" WIDTH="114" ALIGN="CENTER"></a></center>



<center><font COLOR="#808080">Packers &amp; Unpackers</font>&nbsp;</center>

</td>

</tr>



<tr>

<td BGCOLOR="#FFFFEA">

<center><!-- CHOOSE A DATE (will probably be changed) --><font COLOR="#890000">7 September 1999</font></center>

</td>



<td BGCOLOR="#FFFFEA">

<center>by&nbsp;<!-- CHOOSE A HANDLE , i.e. your pseudo (wont be changed) -->

<font SIZE="+3">Lord

Soth</font></center>

</td>



<td VALIGN="CENTER" BGCOLOR="#FFFFEA"><!--<a href="hcu98_3.htm" tppabs="http://www.anticrack.de/fravia/hcu98_3.htm"><IMG SRC="hcu1.gif" tppabs="http://www.anticrack.de/fravia/hcu1.gif" ALT="+cracker" ALIGN=BOTTOM WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>--></td>

</tr>



<tr>

<td>

<center><a HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" BORDER="0" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13"></a></center>

</td>



<td BGCOLOR="#898030">

<center>Courtesy of Fravia's page of reverse engineering</center>



<center>and the Immortal Descendants, Inc.</center>

</td>



<td BGCOLOR="#898030">

<center><!-- Your truly+ will edit only if really necessary -->slightly

edited&nbsp;</center>



<center>by fravia+&nbsp;</center>

</td>

</tr>



<tr>

<td><font COLOR="#C4C0CF">fra_00xx</font>&nbsp;

<br><font COLOR="#C4C0CF">98xxxx</font>&nbsp;

<br><font COLOR="#C4C0CF">handle</font>&nbsp;

<br><font COLOR="#C4C0CF">1100</font>&nbsp;

<br><font COLOR="#C4C0CF">NA</font>&nbsp;

<br><font COLOR="#C4C0CF">PC</font></td>



<td>

<center><!-- Your truly+ comments --><i>A different approach in unpacking, this is a crackme crack, 

thoroughly explained and well worth following for all those among you that want to learn.</i></center>

</td>





</tr>



<tr>

<td></td>





<td BGCOLOR="#898030">

<center><b>There is a crack, a crack in everything That's how the light

gets in</b></center>

<!-- Leonard Coehn's old song, because we are poets, not only crackers --></td>



<td></td>

</tr>



<tr>

<td VALIGN="CENTER" BGCOLOR="#C6E7C6">

<center><font COLOR="#0000FF">Rating</font></center>

</td>



<td VALIGN="CENTER" BGCOLOR="#C6E7C6">

<center><font COLOR="#0000FF">

( )<b>Beginner</b> (x)<b>Intermediate</b> ( )<b>Advanced</b> ( )<b>Expert</b></font>&nbsp;</center>

</td>



<td></td>

</tr>

</table>

<!-- END HEAD  -->

<br><!-- CORPUS  --><!-- CHOOSE A COMMENT (may be changed)  -->This essay

is for those who can't patch their packed targets and want to try a different

approach of getting the job done ;-)&nbsp;

<hr>

<center><!-- Repeat your TITLE  --><font SIZE="+2">Immortal Descendants CrackMe

5</font></center>



<center><!-- Repeat your SUBTITLE -->crackme coded by Torn@do</center>



<center><!-- REPEAT YOUR CHOSEN HANDLE HERE --><font COLOR="#0B7FC1">Written

by Lord Soth</font></center>

&nbsp;



<p><!-- INTRO STARTS HERE -->

<table BORDER CELLSPACING="2" WIDTH="100%" HEIGHT="22">

<tr>

<td BGCOLOR="#C6E7C6">

<center><font SIZE="+2"><font COLOR="#0000FF">Introduction</font>&nbsp;</font></center>

</td>

</tr>

</table>



<pre>

<!-- PASTE HERE YOUR INTRODUCTION -->Hello to everyone reading this new little paper.



In this text file I'll try to describe my latest idea at patching a packed executable

file.

I'm sure that if you dealt with packed/encrypted programs, you know something about

what can be done to patch them. The common methods are NO patching (trying to beat the

protection from a different angle, like serial gen), unpacking then patching (not good

if the person trying to 'crack' the program doesn't know how to unpack it), reversing

the unpacking routine and patching the packed file itself (I think its pretty hard not

to mention time consuming), and lastly, the best way, patching in program runtime.

This last method can be done by either PPatcher or by writing a small exe that will

patch in runtime using any condition we want (hooks and stuff).</pre>

<!-- TOOLS STARTS HERE -->

<table BORDER CELLSPACING="2" WIDTH="100%" HEIGHT="22">

<tr>

<td BGCOLOR="#C6E7C6">

<center><font SIZE="+2"><font COLOR="#0000FF">Tools required</font>&nbsp;</font></center>

</td>

</tr>

</table>

<!-- PASTE HERE YOUR REQUIRED TOOLS -->Tools needed: SoftIce, ProcDump,

and your favourite hexeditor.



<p><!-- TARGET URL STARTS HERE -->

<table BORDER CELLSPACING="2" WIDTH="100%" HEIGHT="22">

<tr>

<td BGCOLOR="#C6E7C6">

<center><font SIZE="+2"><font COLOR="#0000FF">Target's URL/FTP</font>&nbsp;</font></center>

</td>

</tr>

</table>

<!-- DON'T FORGET TO PASTE HERE THE URL/FTP OF YOUR TARGET(S) --><b><a HREF="javascript:if(confirm('http://www.immortaldescendants.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.immortaldescendants.com/'" tppabs="http://www.immortaldescendants.com/">http://www.ImmortalDescendants.com</a></b>



<p>&nbsp;&nbsp;&nbsp; You can find the ID crackme 5 on our site and if

you look hard enough, you can also find my essay in text format, along

with the CrackMe and a patch I made myself, so you'll see that this method

actually works :)



<p><!-- PROGRAM HISTORY STARTS HERE -->

<table BORDER CELLSPACING="2" WIDTH="100%" HEIGHT="22">

<tr>

<td BGCOLOR="#C6E7C6">

<center><font SIZE="+2"><font COLOR="#0000FF">Program History</font>&nbsp;</font></center>

</td>

</tr>

</table>

<!-- PASTE HERE YOUR TARGET'S HISTORY (if any) -->

<br>Nothing much to say about this program's history, it was created by

Torn@do to train newbies to crack packed programs, and practice their key

file reconstruction.



<p><!-- REAL ESSAY  STARTS HERE -->

<table BORDER CELLSPACING="2" WIDTH="100%" HEIGHT="22">

<tr>

<td BGCOLOR="#C6E7C6">

<center><font COLOR="#0000FF"><font SIZE="+2">Essay</font></font>&nbsp;</center>

</td>

</tr>

</table>

<!-- PASTE HERE THE TEXT OF YOUR ESSAY     THIS IS OF COURSE THE MOST IMPORTANT PART     PLEASE CHECK THE MARGINS WHEN YOU ARE FINISHED!      SHOULD NOT BLAST OPERA'S MARGINS OUT! HAVE A LOOK INSIDE     YOUR OWN BROWSER WHEN YOU FINISH!  -->



<p>The method I plan to show you here is a bit different, It does'nt involve

coding of

<br>a patcher, unless you call comparing a patched file and the original

(and then generating

<br>a patch), a patch :)



<p>The steps involved:



<p><b><font COLOR="#3333FF">1</font></b>.&nbsp; Finding what we wanna patch,

and knowing the op-codes we want to replace, and their location.

<br><b><font COLOR="#3333FF">2</font></b>.&nbsp; Finding the place where

we jump to the Original Entry Point.

<br><b><font COLOR="#3333FF">3.</font></b>&nbsp; Finding a suitable place

in the original EXE to incorporate our 'patcher'.

<br><b><font COLOR="#3333FF">4.</font></b>&nbsp; Inject the code inside

to the location we found in step 2.



<p>The method in general is based on the fact that the unpacking routine

is sitting inside the EXE just waiting for us to use it. Why don't use

it ?

<br>Lets say that the program unpacks, and then we inject a snippet of

code, just before we go to the original entry point (OEP), that will patch

our now unpacked program. This way the program unpacks, and just before

jumping to the application, it goes through the new&nbsp; snippet which

in turn patches the program. Under most circumstances, this is possible,

since the process running has permission to write to his own code area

of course.



<p>For demostration purposes (I had to see if it can be pulled naturally

:), I will use a target program. I chose the Immortal Descendants CrackMe

5, which was coded by <b><font FACE="Times New Roman,Times"><font COLOR="#FF0000">Torn@do</font></font></b>.

I chose this crackme because I only need to show the basic principal behind

this method, and this is a relatively small program, and its packed with

ASpack, which is a farily common packer.



<p>What we'll try to do is this. After we run the crackme, we see a button

&quot;<i>About..</i>&quot;. Clicking this button will pop up a dialog box with all

kinds of information :)

<br>Our goal will be to patch this dialog so when we click on the About

button, nothing will happen, and we wanna do this with a simple patch.



<p>Lets get to work then :)



<p><b><font COLOR="#3333FF"><font SIZE="+1">Step 1 - Finding what we want

to patch, location and op-codes</font></font></b>



<p>Ok, we wanna patch this dialog box, and there are several <b>API</b>s

for this. Instead of trying them all, lets find out what imports this program

is using. Naturally, because this is a packed program, we can't look at

the imports directly (with PE browse or a disassembly), so we'll need to

go into the code and <b>THEN</b> find the imports. Here's a way to do it:



<p>We need to find at least <b>ONE API</b> that this program uses. It does'nt

matter which. In this case, I used a BP on <b>WM_COMMAND</b> when clicking

on the About button, and then some tracing till I got to the crackme's

code. Then I just looked inside for an <b>API</b> call. The tracing can

be shortened, at least in Win9x by the following BP:



<p>BPX k32thk1632prolog



<p>Returning from this call (not an <b>API</b>), will bring us to something

like this :



<p>CALL [KERNEL32!K32THK1632PROLOG]

<br>CALL [....]

<br>CALL [KERNEL32!K32THK1632EPILOG]



<p>This is a standard code inside windows, the middle CALL will take us

to another code area which if we trace through (not very long), will call

our program's Windows Procedure.

<br>Of course, we need to get to this point by a BMSG as I described a

bit earlier.

<br>Once we are inside the code, and we locate an <b>API</b>, we'll do

the following search (in my case I found a reference to <b><font COLOR="#3366FF">ReadFile</font></b>):



<p>s ds:0 l ffffffff &quot;ReadFile&quot;



<p>This will search the selector pointed to by DS from location 0 to the

end, and look for <b><font COLOR="#3366FF">ReadFile</font></b>. The caps

are imperative since the API names are case-sensitive in a search.

<br>Once we land on the ReadFile string it should be around the data area

of our crackme, for me I found it at 0041XXXX and something :)

<br>I landed in a data area containing the names of ALL imported APIs by

this program. I scrolled up and down a bit and looked for any reference

to a dialog box API, and indeed I found the following name: <b><font COLOR="#3366FF">DialogBoxParamA</font></b>



<p>The next obvious thing would be to put a BPX on it:



<p>bpx dialogboxparama



<p>Continue execution, and click the About button, and then we'll be back

in SI. F12 (P RET), will take us to the calling routine, and there we'll

have the following snippet of code:



<p>023F:004035D0&nbsp; 6A00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

PUSH&nbsp;&nbsp;&nbsp; 00

<br>023F:004035D2&nbsp; 68F0354000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

PUSH&nbsp;&nbsp;&nbsp; 004035F0

<br>023F:004035D7&nbsp; A1B0EA4000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

MOV&nbsp;&nbsp;&nbsp;&nbsp; EAX,[0040EAB0]

<br>023F:004035DC&nbsp; 56&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

PUSH&nbsp;&nbsp;&nbsp; ESI

<br>023F:004035DD&nbsp; 6A67&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

PUSH&nbsp;&nbsp;&nbsp; 67

<br>023F:004035DF&nbsp; 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

PUSH&nbsp;&nbsp;&nbsp; EAX

<br>023F:004035E0&nbsp; FF1594124100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL&nbsp;&nbsp;&nbsp;

[USER32!DialogBoxParamA]

<br>023F:004035E6&nbsp; B801000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

MOV&nbsp;&nbsp;&nbsp;&nbsp; EAX,00000001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

; &lt;&lt;&lt;&lt; WE ARE HERE!!

<br>023F:004035EB&nbsp; 5E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

POP&nbsp;&nbsp;&nbsp;&nbsp; ESI

<br>023F:004035EC&nbsp; C21000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

RET&nbsp;&nbsp;&nbsp;&nbsp; 0010

<br>023F:004035EF&nbsp; CC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

INT&nbsp;&nbsp;&nbsp;&nbsp; 3

<br>&nbsp;



<p>We landed after the call to the dialog. Now, if we'll look at the Win32API

guide, we'll see that 5 parameters are being transferred to this API, and

those are the 5 PUSH instructions we see above the CALL. If we wanna get

rid of the dialog we'll need to skip those PUSHs and the CALL.

<br>We'll assemble a little JMP instruction, type :



<p>a 4035d0



<p>Then we can enter the following code:



<p>JMP 4035E6



<p>As soon as we press Enter (assumind we have Code On), we'll see an EB14

instead of the 6A00 at memory location 004035D0. This is how our jump instruction

looks like in memory.

<br>Remember these two bytes, we'll wanna write them to this location (004035D0)

when the program gets unpacked.

<br>So far we've done nothing special. Its time to move to the next phase

of the plan :)



<p><b><font COLOR="#3333FF"><font SIZE="+1">Step 2 - Finding the jump to

the original entry point (OEP)</font></font></b>



<p>Ok, now we have to find when our program actually gets unpacked. This

is so that we'll know when we can safely patch the program.

<br>Before we can even do anything, we need to be able to break with SI

on the beginning of the loader code. For that we'll use ProcDump.

<br><b><font FACE="Times New Roman,Times"><font COLOR="#FF0000">Miz</font></font></b>

wrote a great essay on how to manually unpack a program, and in there he

uses ProcDump's PE Editor to change the <b>.TEXT</b> section's attributes

from C0000040 to E0000020. This will tell the symbol loader that the <b>.TEXT</b>

section indeed contains <b>CODE</b>, and that it will break on it. For

those of you who have'nt read that essay, I suggest doing so now.



<p>Finding the jump to the <b>OEP</b> may not be a trivial part. It <b>ALWAYS</b>

requires some tracing into code, and might take a bit of time if you don't

know the packer involved. A good guidline is to try to <b>step over</b>

any calls and look at the SI window. Generally, when you'll see a few comments

like:



<p>Load32=..... and stuff like that, you'll know the program has been unpacked.

Now comes a tricky part. You have to monitor all the registers (normally

EAX) very closely and look for a potential <b>OEP</b>. In this case, the

<b>OEP</b> was stored in EAX, and it was 00405500 if I'm not mistaken.

<br>Here is a little snippet of code of how ASpack does this jump:



<p>023F:0042606A&nbsp; E822000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

CALL&nbsp;&nbsp;&nbsp; 00426091

<br>023F:0042606F&nbsp; E88A020000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

CALL&nbsp;&nbsp;&nbsp; 004262FE

<br>023F:00426074&nbsp; E80F030000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

CALL&nbsp;&nbsp;&nbsp; 00426388

<br>023F:00426079&nbsp; E836030000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

CALL&nbsp;&nbsp;&nbsp; 004263B4

<br>023F:0042607E&nbsp; 8B853E6F4400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

MOV&nbsp;&nbsp;&nbsp;&nbsp; EAX,[EBP+00446F3E]

<br>023F:00426084&nbsp; 0385526F4400&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

ADD&nbsp;&nbsp;&nbsp;&nbsp; EAX,[EBP+00446F52]

<br>023F:0042608A&nbsp; 8944241C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

MOV&nbsp;&nbsp;&nbsp;&nbsp; [ESP+1C],EAX

<br>023F:0042608E&nbsp; 61&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

POPAD

<br>023F:0042608F&nbsp; 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

PUSH&nbsp;&nbsp;&nbsp; EAX

<br>023F:00426090&nbsp; C3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

RET

<br>023F:00426091&nbsp; 80BDA570440000&nbsp;&nbsp;&nbsp; CMP&nbsp;&nbsp;&nbsp;&nbsp;

BYTE PTR [EBP+004470A5],00

<br>023F:00426098&nbsp; 741D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

JZ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 004260B7



<p>Notice those four CALLs there. After the fourth CALL we get the Load32

comment on the SI window, and then we know that we are green to patch.

Right after that, the <b>OEP</b> is calculated inside EAX, and it is pushed

on the stack, and using a RET, it actually jumps to the <b>OEP</b>, and

hence the start of the program.

<br>Ok, our problems begin here actually. Now that we know where the unpacking

ends and the program begins, we need to inject a snippet of code that will

patch our dialog box.

<br>Now, since we want to put our code between the unpacking routine and

that RET instruction, we'll have to be a bit creative. As you can see we

don't really have room to work here because every single byte is being

used somehow.

<br>So this brings us to the next stage of the patch.



<p><b><font COLOR="#3333FF"><font SIZE="+1">Step 3 - Finding a suitable place

to inject our code to</font></font></b>



<p>So, what we know so far is how to patch and when we jump to the <b>OEP</b>.

We'll now search for a place to inject our malicious code :)

<br>Open up your favourite hex editor and look for the hex string : 8944241C6150C3



<p>This hex string is in fact the opcodes of the instructions at address

0042608A to 00426090.

<br>After we find this pattern (there is only one in the EXE), we'll need

to find an empty place somewhere near it. I scrolled a bit down (a few

sections), and I found the following place:



<p>023F:00426500&nbsp;&nbsp;&nbsp;&nbsp; 0C 89 46 10 83 C6 14 8B-95 52

6F 44 00 E9 B8 FE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ..F......RoD....

<br>023F:00426510&nbsp;&nbsp;&nbsp;&nbsp; FF FF C3 AC AA 58 87 DB-00 20

00 00 08 00 00 00&nbsp;&nbsp;&nbsp;&nbsp; .....X... ......

<br>023F:00426520&nbsp;&nbsp;&nbsp;&nbsp; 00 00 00 00 00 00 00 00-00 00

00 00 00 00 00 55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

...............U

<br>023F:00426530&nbsp;&nbsp;&nbsp;&nbsp; 00 00 00 00 40 00 00 60-02 00

00 00 00 00 00 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

....@..`.......P

<br>023F:00426540&nbsp;&nbsp;&nbsp;&nbsp; 02 00 00 00 00 00 00 00-00 00

46 60 00 00 00 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

..........F`....

<br>023F:00426550&nbsp;&nbsp;&nbsp;&nbsp; 00 00 00 A4 00 00 00 C0-00 00

00 02 00 00 00 D0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ................

<br>023F:00426560&nbsp;&nbsp;&nbsp;&nbsp; 00 00 00 1C 00 00 00 10-01 00

00 0A 00 00 40 28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ..............@(

<br>023F:00426570&nbsp;&nbsp;&nbsp;&nbsp; 01 00 C0 1D 01 00 00 00-00 00

00 00 00 00 00 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ................

<br>023F:00426580&nbsp;&nbsp;&nbsp;&nbsp; 00 89 44 24 1C 61 66 C7-05 D0

35 40 00 EB 14 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ..D$.af...5@...P

<br>023F:00426590&nbsp;&nbsp;&nbsp;&nbsp; C3 00 00 00 00 00 00 00-00 00

00 00 00 00 00 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ................

<br>023F:004265A0&nbsp;&nbsp;&nbsp;&nbsp; 00 00 00 00 00 00 00 00-00 00

00 00 00 00 00 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ................

<br>023F:004265B0&nbsp;&nbsp;&nbsp;&nbsp; 00 00 00 00 00 00 00 00-00 00

00 00 00 00 00 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ................

<br>023F:004265C0&nbsp;&nbsp;&nbsp;&nbsp; 00 00 00 00 00 00 00 00-00 00

00 00 00 00 00 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ................

<br>023F:004265D0&nbsp;&nbsp;&nbsp;&nbsp; 00 00 00 00 00 00 00 00-00 00

6B 65 72 6E 65 6C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ..........kernel

<br>023F:004265E0&nbsp;&nbsp;&nbsp;&nbsp; 33 32 2E 64 6C 6C 00 56-69 72

74 75 61 6C 41 6C&nbsp;&nbsp;&nbsp;&nbsp; 32.dll.VirtualAl

<br>023F:004265F0&nbsp;&nbsp;&nbsp;&nbsp; 6C 6F 63 00 56 69 72 74-75 61

6C 46 72 65 65 00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loc.VirtualFree.



<p>I saw this in the original file and I said : &quot;what da ??? how can text

be right after program code ???&quot;. Then I realized that somewhere before

the text begins, the code ends. I decided to use those little zeroes we

see in there. BTW, this is a dump from SI, not from my hex editor, and

it is already patched, but lets leave that for now.

<br>In short, I found a lot of zeroes I could turn into code. I loaded

the program in SI and when I got to the loader routine, I displayed the

code area in the data area:



<p>d eip



<p>I did this so I could look for the above text in the data window. Scrolling

a bit down I did find it in the location it was supposed to be. I figured

I found the place I could use to inject my code, but I had to make the

program execute to that point somehow.

<br>Here comes the great part.



<p>When I decided on a place to inject my code (I chose 00426581, it was

easy to locate in the hex editor as well because of the pattern just a

line before it), I went back to the end of the packer routine. In order

for the CPU to execute instructions at 00426581 I had to put a jump there,

so I assembled the following instructions:



<p>a 42608A, and then:



<p>JMP 00426581



<p>Notice that this instruction is 5 bytes long. I could'nt just put it

instead of the RET instruction. So the solution was to copy the opcodes

of all the instructions this last JMP overwritten and put them in the new

location and then add my patching code.

<br>Writing down the pattern: 894424106150C3

<br>I will put my code between the 50 and the C3 (the C3 is the code for

the RET instruction, that will take me to the program, and I don't want

that before I patch!)

<br>I assembled that pattern into 00426581:



<p>MOV [ESP+1C],EAX

<br>POPAD



<p>and now I've added this line:



<p>MOV WORD PTR [004035D0],14EB&nbsp; &lt;&lt; This will put EB14 at the

to-be patched location :)



<p>and finished with:



<p>PUSH EAX

<br>RET



<p>The whole thing now looks like this: 8944241C6166C705D0354000EB1450C3.



<p>What have I done here in fact ??

<br>What I did was to relocate a small part of the end of the unpacking

code so I could add my patcher's code to it. This has to be done in a place

that you KNOW that the program won't ever touch.

<br>What was left to do was to patch the original EXE file using a hex

editor. We'll search for the end of the unpacker routine using this string:

894424106150C3

<br>Once found, we'll change it to this: E9F20400009090 , which is the

JMP 00426581 along with two NOPs right after it, just to make it look nice

:)

<br>The last step is to put the rest of the code where those zeroes were

before. I scrolled down in my hex editor and I found a familiar pattern

(look at offset 00426570). It was easy to see where 00426581 starts in

my hex editor once I had that point of reference. I put the code in, which

was (to remind you): 8944241C6166C705D0354000EB1450C3, and then I closed

everything up.



<p>After the patch was done , we'll check that it actually works by running

to the program and clicking on the About button, which, if you followed

my instructions, should now be shooting blanks :)

<br>All was left to do is to generate a patch using any patch generator

of your choice. That concludes this exercise, ladies and gentlemen :)



<p>On this note, I used <b><font FACE="Times New Roman,Times"><font COLOR="#FF0000">eGIS</font></font></b>'s

MKpatch, in my opinion, the best patcher I've ever seen, simple, efficient,

small and fast :)



<p><!-- FINAL NOTES STARTS HERE -->

<table BORDER CELLSPACING="2" WIDTH="100%" HEIGHT="22">

<tr>

<td BGCOLOR="#C6E7C6">

<center><font SIZE="+2"><font COLOR="#0000FF">Final Notes</font>&nbsp;</font></center>

</td>

</tr>

</table>







<b><font COLOR="#3333FF"><font SIZE="+1">Conlusion to this whole method

</font></font></b><br><br>

This whole method, in a couple of words require some planning, but when its executed, its well worth it. What we're doing 

is find the OEP, and before we go into the main program, we put in another code snippet to patch what we want. If we have 

the room to just throw the code in , the better!. 

However if we don't as in my case, we'll have to look elsewhere and 

redirect the program to that location. When redirecting, always make sure 

you get the address right, because you'll have 

 to patch the EXE file and put the code in the EXACT same place that the JUMP is pointing at, and this could be tricky. 

Again, a good way to do this is by finding a familiar pattern and writing it down (or remembering whichever you prefer hehehe).





I hope you enjoyed this little execrise. The patch was 601 bytes long, pretty slick , no process patching and no nothing.

If you have any questions you can email or ICQ me :



lordsoth8@hotmail.com</pre>



<pre>

lordsoth@immortaldescendants.com



ICQ # 5178515



Greetings:



<b><font FACE="Times New Roman,Times"><font COLOR="#FF0000">Torn@do, Lucifer48, Jeff, BJanes, MisterZ-, +Sandman, Volatility, alpine, Miz</font></font></b>, and all the other great crackers out 

there including <b><font FACE="Times New Roman,Times"><font COLOR="#FF0000">+Fravia, +ORC, +Frog's Print</font></font></b> and the others I don't remember.

Of course if I left anyone out, I'm sorry, I'm just in a big hurry.</pre>

<!-- OB DUH STARTS HERE -->

<table BORDER CELLSPACING="2" WIDTH="100%" HEIGHT="22">

<tr>

<td BGCOLOR="#C6E7C6">

<center><font COLOR="#0000FF"><font SIZE="+2">Ob Duh</font></font>&nbsp;</center>

</td>

</tr>

</table>



<center><i>This crackme can be downloaded for free of course, so you can't

really steal it ;-)</i></center>

<!-- WAY OUT STARTS HERE -->

<hr>

<center><i>You are deep inside fravia's page of reverse engineering, choose

your way out:</i></center>



<center><!-- EITHER A NICE GIF LIKE THIS --><!-- <a href="project3.htm" tppabs="http://www.anticrack.de/fravia/project3.htm"><IMG SRC="project3.gif" tppabs="http://www.anticrack.de/fravia/project3.gif" ALT="projecT3" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a><br><font color=gray>Back to project 3</FonT><br><bR>--><!-- OR JUST A LINK LIKE THIS --><!--<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 VSPACE=0 HSPACE=0><A HREF="project1.htm" tppabs="http://www.anticrack.de/fravia/project1.htm">Back to Your_chosen_project</A> <hr width=33%>--><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html">homepage</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="links.htm" tppabs="http://www.anticrack.de/fravia/links.htm">links</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm">search_forms</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm">+ORC</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="protec.htm" tppabs="http://www.anticrack.de/fravia/protec.htm">how

to protect</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="academy.htm" tppabs="http://www.anticrack.de/fravia/academy.htm">academy

database</a></center>



<center><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="realicra.htm" tppabs="http://www.anticrack.de/fravia/realicra.htm">reality

cracking</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="howtosea.htm" tppabs="http://www.anticrack.de/fravia/howtosea.htm">how

to search</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="javascri.htm" tppabs="http://www.anticrack.de/fravia/javascri.htm">javascript

wars</a></center>



<center><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm">tools</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="noanon.htm" tppabs="http://www.anticrack.de/fravia/noanon.htm">anonymity

academy</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm">cocktails</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="ideale.htm" tppabs="http://www.anticrack.de/fravia/ideale.htm">antismut

CGI-scripts</a>&nbsp;<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="info.htm" tppabs="http://www.anticrack.de/fravia/info.htm">mail_fravia+</a></center>



<center><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER="0" HEIGHT="13" WIDTH="13" ALIGN="BOTTOM"><a HREF="legal.htm" tppabs="http://www.anticrack.de/fravia/legal.htm">Is

reverse engineering legal?</a></center>



<hr><!-- THAT'S ALL, THANKS A LOT this will allow automated retrieval -->

</body>

</html>

