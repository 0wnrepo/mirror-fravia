<HTML>

<HEAD>

   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">

   <META NAME="GENERATOR" CONTENT="Mozilla/4.02 [en] (WinNT; I) [Netscape]">

   <TITLE>zee_inst.htm - InstallShield scripts decompiling</TITLE>

<!--  formamus.htm version 02 February 1998       INSTRUCTIONS FOR SUBMITTING: DO NOT USE HTML EDITORS!      SEARCH THIS TEXT FOR THE STRING "Your_"       AND REPLACE WITH WHATEVER YOU WANT TO PUBLISH!       THANKS A LOT: this will allow automated retrieval -->

</HEAD>

<BODY TEXT="#001010" BGCOLOR="#C0C0C0" VLINK="#405040">

&nbsp;

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="22" >

<CAPTION><!-- this is for the data.....fra_00xx....yymmdd....handle..beg+int...not ass... --></CAPTION>



<TR>

<TD></TD>



<TD><!-- Choose  a TITLE probably wont be changed -->

<CENTER><FONT SIZE=+2>Decompiling InstallShield Scripts</FONT></CENTER>



<CENTER><FONT SIZE=+1>(work in progress)</FONT></CENTER>

</TD>



<TD><!-- Choose  a PROJECT GIF, leave this if unsure -->

<CENTER><A HREF="progcor.htm" tppabs="http://www.anticrack.de/fravia/progcor.htm"><IMG SRC="useful.gif" tppabs="http://www.anticrack.de/fravia/useful.gif" ALT="progcor" BORDER=0 HEIGHT=43 

WIDTH=114 ALIGN=CENTER></A></CENTER>



<CENTER><FONT COLOR="#808080">Programmers</FONT></CENTER>

</TD>

</TR>



<TR>

<TD BGCOLOR="#FFFFEA">

<CENTER><!-- CHOOSE A DATE (will probably be changed) --><FONT COLOR="#890000">04 March 1998</FONT></CENTER>

</TD>



<TD BGCOLOR="#FFFFEA">

<CENTER>by&nbsp;<!-- CHOOSE A HANDLE (wont be changed) --><FONT SIZE=+3>zeezee</FONT></CENTER>

</TD>



<TD VALIGN=CENTER BGCOLOR="#FFFFEA"><!--<a href="hcu98_3.htm" tppabs="http://www.anticrack.de/fravia/hcu98_3.htm"><IMG SRC="hcu1.gif" tppabs="http://www.anticrack.de/fravia/hcu1.gif" ALT="+cracker" ALIGN=BOTTOM WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>--></TD>

</TR>



<TR>

<TD>

<CENTER><A HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" BORDER=0  ALIGN=BOTTOM width="13" height="13"></A></CENTER>

</TD>



<TD BGCOLOR="#898030">

<CENTER>Courtesy of Fravia's page of reverse engineering</CENTER>

</TD>



<TD BGCOLOR="#898030">

<CENTER><!-- Your truly+ will edit only if really necessary -->slightly

edited by fravia+</CENTER>

</TD>

</TR>



<TR>

<TD><FONT COLOR="#C4C0CF">fra_00xx</FONT>&nbsp;

<BR><FONT COLOR="#C4C0CF">98xxxx</FONT>&nbsp;

<BR><FONT COLOR="#C4C0CF">handle</FONT>&nbsp;

<BR><FONT COLOR="#C4C0CF">1100</FONT>&nbsp;

<BR><FONT COLOR="#C4C0CF">NA</FONT>&nbsp;

<BR><FONT COLOR="#C4C0CF">PC</FONT></TD>



<TD>

<CENTER><!-- Your truly+ comments --><I>Here it is, with a little delay :-( Zeezee's 

work on installshield decompiling!<BR>I don't believe that this work is obsolete. Quite the 

countrary: it offers (IMO) a welcome ADDITION to NaTzGUL's beautiful tool and to NaTzGUL's 

master essays.<BR>In fact, as 

I have stated more than once, I believe that if we have more capable reversers working on the 

SAME subject we get (almost always) as many DIFFERENT ways to tackle the same solution. (At times 

we even get different solutions!)<BR>Since that what interest us are mostly the 

TECHNIQUES that should be used and not the solutions in themselves, this 'doppeltgemoppelt' 

approach offers -on our Web- quite some advantages.<BR>Enjoy!</I></CENTER>

</TD>



<TD></TD>

</TR>



<TR>

<TD></TD>





<TD BGCOLOR="#898030">

<CENTER><B>There is a crack, a crack in everything That's how the light

gets in</B></CENTER>

<!-- Leonard Coehn's old song, because we are poets, not only crackers --></TD>



<TD></TD>

</TR>



<TR>

<TD VALIGN=CENTER BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF">Rating</FONT></CENTER>

</TD>



<TD VALIGN=CENTER BGCOLOR="#C6E7C6">

<CENTER><!-- CHOOSE A RATING (may be changed) --><FONT COLOR="#0000FF">(

)<B>Beginner</B> (x)<B>Intermediate</B> (x)<B>Advanced</B> ( )<B>Expert</B></FONT></CENTER>

</TD>



<TD></TD>

</TR>

</TABLE>

<!-- END HEAD  -->

<BR><!-- CORPUS  --><!-- CHOOSE A COMMENT (may be changed)  -->

<BR>This essay has become obsolete one day after it was written. Nights

I sent it to Fravia+ and on the morning the wonderful

<BR>decompiler by NaTzGUL was available. The idea behind this essay was

to help develop InstallShield decompiler and

<BR>since it is now present, this essay is purely informational.



<P>This essay has no use to all except those willing to decompile InstallShield

scripts.



<P>&nbsp;I will explain here where you can find InstallShield script compiler

code generator tables.You will find from the disassembly how modern compiler

encodes code generation procedures etc.



<P>

<HR>

<CENTER><!-- CHOOSE A TITLE (wont probably be changed) --><FONT SIZE=+2>Decompiling

InstallShield scripts and guidelines for decompiler writers</FONT></CENTER>



<CENTER><!-- CHOOSE A SUBTITLE (wont proabbly be changed) --><FONT SIZE=+2>(work

in progress)</FONT></CENTER>



<CENTER><!-- REPEAT YOUR CHOSEN HANDLE HERE --><FONT COLOR="#0B7FC1">Written

by zeezee</FONT></CENTER>

&nbsp;



<P><!-- INTRO STARTS HERE -->

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Introduction</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>



<PRE>&nbsp;&nbsp;<!-- PASTE HERE YOUR INTRODUCTION -->Decompiling InstallShield scripts is not cracking. It's pure reverse-engineering.&nbsp;

It may be more - a lesson how good compiler is built, how expressions are translated&nbsp;

into machine code, how they are executed, how a modern compiler implements

token search algorithms and more.

It's impossible to cover all these topics in one short essay, but I think

it may be a foundation for other crackers and +crackers to delve deeper into

this subject (assuming anyone is interested in pure reversing).

Goal of this essay: To give the reader some basic information about InstallShield compiler.

</PRE>



<PRE>Future Goal: Someone writes an InstallShield scripts decompiler :).</PRE>



<PRE>>>>Author's note five days later: There IS now InstallShield decompiler!</PRE>

Before reading this: Read this <A HREF="natz51.htm" tppabs="http://www.anticrack.de/fravia/natz51.htm">essay</A> by NaTzGUL.

I'm assuming here that the reader knows what InstallShield script is and

where it can be found (hint: setup.ins ;).&nbsp;<!-- TOOLS STARTS HERE -->

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Tools required</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>

<!-- PASTE HERE YOUR REQUIRED TOOLS -->IDA 3.7 (full, 'quined' or freeware)

<BR>Wdasm will work also, but we will heavily rely on cross-references,

which in IDA are only a mouse-click away

<BR>&nbsp;



<P><!-- TARGET URL STARTS HERE -->

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Target's URL/FTP</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>

<!-- DON'T FORGET TO PASTE HERE THE URL/FTP OF YOUR TARGET(S) --><A HREF="javascript:if(confirm('http://www.installshield.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.installshield.com/'" tppabs="http://www.installshield.com/">http://www.installshield.com</A>

You must register first to download lite version.

<BR>This is not absolutely necessary to perform our work, but helpfile

may help a lot explaining built-in functions syntax, parameters etc.

<BR>The compiler engine available for download is sufficient to follow

this essay.

<BR>InstallShield Compiler main engine <A HREF="javascript:if(confirm('http://129.105.116.5/fravia/iscompil.zip  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://129.105.116.5/fravia/iscompil.zip'" tppabs="http://129.105.116.5/fravia/iscompil.zip">Download

it here</A> (109k).

<BR>InstallShield setup.exe (659k) - get it from any CD you have handy...







<P><!-- REAL ESSAY  STARTS HERE -->

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Essay</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>

<!-- PASTE HERE THE TEXT OF YOUR ESSAY     THIS IS OF COURSE THE MOST IMPORTANT PART     PLEASE CHECK THE MARGINS WHEN YOU ARE FINISHED!      SHOULD NOT BLAST NETSCAPE MARGINS OUT! HAVE A LOOK INSIDE     YOUR OWN BROWSER WHEN YOU HAVE FINISHED!  -->

<PRE>I'm assuming here that the reader has all our tools ready and will follow all steps

described below. I don't attach any listings. If you want to follow, just

load setup.exe and compiler.dll into IDA (one after another), wait until autoanalysis is

finished and save resulting IDB files.





When reading above mentioned NaTzGUL's essay (excellent, btw.) I tried to delve

deeper into compiled script. First I disassembled setup.exe (this is the script

interpreter&nbsp;

if you forgot) and located the command scanner:



At 00420E84 you will find opcode fetch, parameter determination and, finally,

a jump to the command service routine.



Table containing addresses of procs (opcodes 000..1C6) starts at 00495FC8.

For each command there is a record:

&nbsp;&nbsp; byte&nbsp; parameters type

&nbsp;&nbsp; dword procedure_address

When you have time, name these procedures like cmd_xxx where xxx is opcode.



eg. at 0049609B you will find a record containing (2, 0042AC02), which

corresponds to the command 02A - MessageBox.

02C is goto, 02F is strlen, 033 is Exec etc...



This was found quite easy, but then comes a more tricker part:



Where can we find real names of the functions?



After short thinking I decided to reverse the InstallShield compiler.

Of course the compiler must be located anywhere first.



First solution:   Get it from www.installshield.com (Lite version).

Second solution:  Get in from the Web (you know how to search).

Third solution:   Get Visual C++ 5 or other CD containing InstallShield Lite 

                  as an added bonus.

Fourth solution:  Get it <A HREF="javascript:if(confirm('http://129.105.116.5/fravia/iscompil.zip  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://129.105.116.5/fravia/iscompil.zip'" tppabs="http://129.105.116.5/fravia/iscompil.zip">here</A> (DLL only for reversing).



Our target is now compiler.dll, main compiler module called from the IDE and

probably from the command-line script compiler which I don't have.



The essential part of the compiler is lexical analyzer which isn't so

interesting for us. More important is the code generator and token analyzer.

Remember that this compiler does not generate pure machine code. It generates scripts

which are interpreted during actual setup process by setup.exe.

The code generator contains of

&nbsp;&nbsp; [deep breath here]

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; several hundred pointers to linked lists of records containing pointers to

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; code generation tables

&nbsp;&nbsp; [deep breath end]

(sounds nice, ehm).



I'll explain it briefly.



Short definition: Token: something that can be a keyword, function name,

&nbsp; number, variable name etc,

&nbsp; eg. tokens are:

&nbsp; goto, MessageBox, IS_OS2 etc.

If you are purist, replace this definition by yours.



Assume the compiler has completed the token MessageBox. It searches a service

for it using nice pointer table contained in 10033408..10033807. Looks like

a tree...



These 256 dwords are almost all pointing to linked lists of structures.

Let's see eg. where points dword at 10033650. Click on reference and you land in

10031938.

Make 4 dwords from the following data and you quickly discover the token table

structure:



address 10031938:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actual value



&nbsp;&nbsp; dword *next_list_element_pointer&nbsp;&nbsp; 10031948

&nbsp;&nbsp; dword *token_string&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "ConfigAdd"

&nbsp;&nbsp; dword command_flags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00000201

&nbsp;&nbsp; dowrd *token_service_data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1002E898



&nbsp;command_flags are 0201 in all functions and built-in constants, other values

&nbsp;in this field are meaining that token is a keyword (eg. 'case' has 0A01)



&nbsp;token_string is simply this what are we searching for: ASCIIZ name of function or constant.

&nbsp;token_service_data are the data for the code generator. These data are several

&nbsp;(mostly 3 for constant or 4 for functions) words, eg.



-&nbsp; for functions:

&nbsp;&nbsp; word 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (this means: token is a function)

&nbsp;&nbsp; word function_opcode

&nbsp;&nbsp; word ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (maybe parameter count?)

&nbsp;&nbsp; word ?



-&nbsp; for compiler predefined constants:

&nbsp;&nbsp; word 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (this means: token is a predefined constant)

&nbsp;&nbsp; dword constant_value.



Let's follow the linked list in above example. At 10031948 we have:

&nbsp;&nbsp;&nbsp; dword pointing to next list element

&nbsp;&nbsp;&nbsp; dword pointing to "MessageBox"

&nbsp;&nbsp;&nbsp; dword 00000201 (function/constant)

&nbsp;&nbsp;&nbsp; dword pointing to 1002E8A0



And at 1002E8A0 we have:

&nbsp;&nbsp;&nbsp; word 2 (function)

&nbsp;&nbsp;&nbsp; word 2A (opcode for this function in script)

&nbsp;&nbsp;&nbsp; word 2 ???

&nbsp;&nbsp;&nbsp; word 2 ???



Of course IDA 'Xref clicking' is much faster than reading this&nbsp;

step-by-step description.



So, we have found an opcode for MessageBox which is (surprise?) equal to this

one found by reversing setup.exe (see above).



Once again, here is a quick way to find an opcode for built-in function or

&nbsp;predefined constant value:



1. Locate ASCIIZ name of searched token (Alt-B in IDA). Remember to find this

&nbsp;&nbsp; keyword _exactly_ as it should appear.

2. Click on Xref - you will land in linked list

3. Check if dword after is 00000201, if not you are searching for a keyword...

4. Click on Xref of dword below - you will land in token_service_data.

5. Second word is the opcode.



Let's check it again for LaunchApp (should be simple exec, isn't it?)

Alt-B, "LaunchApp" (check case-sensitive, otherwise slow search) -> 1002C2FC.

Click on Xref: 1003198C

Below we have dword 00000201 (or press 'D' 3 times to make dword)

And then kinda offset - click on it -> 1002E8BE.

First word is 2 - it's a function

Second word is 33 - it's the opcode.



BTW, when you return to the disassembly of SETUP.EXE and find command code 033

service procedure you will find quickly that we're right...



Author's note five days later:</PRE>



<PRE>{</PRE>



<PRE>&nbsp; You may experiment with IDA script language to correctly display all these records.</PRE>



<PRE>&nbsp; There is no need to experiment further. The decompiler is already written.</PRE>



<PRE>}



So... A little bonus for all going so far with this essay!



If you want to see the token table compile the file below.

</PRE><XMP>

---cut here, don't destroy your monitor with scissors!---



// InstallShield COMPILER.DLL token table dump

// by zeezee



// Warning: Compile using 16-bit segmented model. Good old BC3.1 will do.

// sizeof( int ) = 2

// sizeof( long ) = 4



#include&nbsp;<STDIO.h>

#include&nbsp;<STDLIB.h>



// known offsets in the COMPILER.DLL file

#define TABLE_START 0x1002F328l

#define TABLE_END 0x10033408l

#define LOAD_OFF 0x10000E00l // diff load_address - file_offset



void main( void )

{

  FILE *cfil;

  char sbuf[80];

  unsigned long ptr_next, ptr_name, ptr_serv, flags, fptr;

  unsigned int token_type;

  unsigned long opcode;



  cfil = fopen( "compiler.dll", "rb" );

  if( cfil == NULL )

  {

    printf( "Cannot open COMPILER.DLL\n");

    exit( 1 );

  }

  fptr = TABLE_START;



  // We are now pointing to the start of the list

  // Each element has the form:

  // dd *next_element

  // dd *asciiz_name

  // dd flags

  // dd *service_proc



  // Since we know that all list elements are consecutive, we are treating

  // the list simply like table ignoring pointers to next elements



  do

  {

    fseek( cfil, fptr - LOAD_OFF, SEEK_SET );

    // read these 4 dwords

    fread( &amp;ptr_next, 4, 1, cfil );

    fread( &amp;ptr_name, 4, 1, cfil );

    fread( &amp;flags, 4, 1, cfil );

    fread( &amp;ptr_serv, 4, 1, cfil );



    // read name

    fseek( cfil, ptr_name - LOAD_OFF, SEEK_SET );

    fread( sbuf, 1, 79, cfil ); // read function name



    // read type and opcode

    fseek( cfil, ptr_serv - LOAD_OFF, SEEK_SET );

    fread( &amp;token_type, 2, 1, cfil );

    fread( &amp;opcode, 4, 1, cfil ); // may be opcode or constant value



    if( token_type != 2 ) // constants and variables

    {

      printf( "F=%04X, O=%08lX, T=%01X, N=%s\n" ,

        (int) flags, opcode, token_type, sbuf );

    }

    else // functions

    {

      printf( "F=%04X, O=%04X, P=%01X, T=%01X, N=%s\n" ,

        (int) flags, (int) (opcode &amp; 0xffff), (int) (opcode >> 16 ), token_type, sbuf );

    }



    fptr += 16; // point to next element in the table

  }

  while( fptr &lt; TABLE_END );



  fclose( cfil );

}



---cut here---</XMP><PRE>



and here short doc to the above



&nbsp;&nbsp; indis.exe - InstallShield COMPILER.DLL token table dump - by zeezee



Usage:

Place into directory where COMPILER.DLL exists

Works only with version which is exactly 260096 bytes long and dated 22.01.97.

When using other version you must find and change table start address!



Command line: indis >indis.dat



For each function/constant/variable a record is generated eg:



For predefined values:



&nbsp;&nbsp;&nbsp; F=0201, O=000000CA, T=0, N=FREEENVSPACE



&nbsp;&nbsp;&nbsp; where:

&nbsp;&nbsp;&nbsp; F - flags

&nbsp;&nbsp;&nbsp; O - constant value (long)

&nbsp;&nbsp;&nbsp; T = 0 for constants, 1 for variables (?)

&nbsp;&nbsp;&nbsp; N - name



For built-in functions:



F=0201, O=0000, P=5, T=2, N=StructGetAddressEx

&nbsp;&nbsp;&nbsp; F - flags (other than 201 only for keywords)

&nbsp;&nbsp;&nbsp; O - opcode

&nbsp;&nbsp;&nbsp; P - param count (?)

&nbsp;&nbsp;&nbsp; T = 2 for built-in functions

&nbsp;&nbsp;&nbsp; N - name



Enjoy!

zeezee</PRE>

<!-- FINAL NOTES STARTS HERE -->

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Final Notes</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>



<PRE>&nbsp;&nbsp;<!-- PASTE HERE YOUR FINAL NOTES (if any) -->Greets to NaTzGUL for his brilliant essay.</PRE>



<PRE>>>>five days later: ...and for wisdec decompiler!</PRE>



<PRE>

zeezee (not +zeezee yet, but I hope I will earn this someday ;)</PRE>

<!-- OB DUH STARTS HERE -->

<TABLE BORDER CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD BGCOLOR="#C6E7C6">

<CENTER><FONT COLOR="#0000FF"><FONT SIZE=+2>Ob Duh</FONT></FONT></CENTER>

</TD>

</TR>

</TABLE>



<CENTER><I>The standard Ob Duh does not apply here. We're only reversing,

not cracking.</I></CENTER>

<!-- WAY OUT STARTS HERE -->

<HR>

<CENTER><I>You are deep inside fravia's page of reverse engineering, choose

your way out:</I></CENTER>



<CENTER><!-- EITHER A NICE GIF LIKE THIS -->



<A href="progcor.htm" tppabs="http://www.anticrack.de/fravia/progcor.htm"><IMG SRC="useful.gif" tppabs="http://www.anticrack.de/fravia/useful.gif" ALT="progcor" ALIGN=CENTER 

WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></A><BR>

<FONT color=gray>Back to progcor</FONT>

<BR><BR>

<!-- OR JUST A LINK LIKE THIS --><!--<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 VSPACE=0 HSPACE=0><A HREF="project1.htm" tppabs="http://www.anticrack.de/fravia/project1.htm">Back to Your_chosen_project</A> <hr width=33%>--><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html">homepage<A HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM></A></A><A HREF="links.htm" tppabs="http://www.anticrack.de/fravia/links.htm">links</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm">search_forms<A HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM></A></A><A HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm">+ORC<A HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM></A></A><A HREF="student.htm" tppabs="http://www.anticrack.de/fravia/student.htm">students'

essays<A HREF="student.htm" tppabs="http://www.anticrack.de/fravia/student.htm"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM></A></A><A HREF="academy.htm" tppabs="http://www.anticrack.de/fravia/academy.htm">academy

database</A></CENTER>



<CENTER><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="realicra.htm" tppabs="http://www.anticrack.de/fravia/realicra.htm">reality

cracking<A HREF="realicra.htm" tppabs="http://www.anticrack.de/fravia/realicra.htm"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM></A></A><A HREF="howtosea.htm" tppabs="http://www.anticrack.de/fravia/howtosea.htm">how

to search<A HREF="howtosea.htm" tppabs="http://www.anticrack.de/fravia/howtosea.htm"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM></A></A><A HREF="javascri.htm" tppabs="http://www.anticrack.de/fravia/javascri.htm">javascript

wars</A></CENTER>



<CENTER><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm">tools<A HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM></A></A><A HREF="noanon.htm" tppabs="http://www.anticrack.de/fravia/noanon.htm">anonymity

academy</A>&nbsp;<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm">cocktails<A HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM></A></A><A HREF="ideale.htm" tppabs="http://www.anticrack.de/fravia/ideale.htm">antismut

CGI-scripts<A HREF="ideale.htm" tppabs="http://www.anticrack.de/fravia/ideale.htm"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM></A></A><A HREF="info.htm" tppabs="http://www.anticrack.de/fravia/info.htm">mail_fravia+</A></CENTER>



<CENTER><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" BORDER=0 HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A HREF="legal.htm" tppabs="http://www.anticrack.de/fravia/legal.htm">Is

reverse engineering legal?</A></CENTER>



<HR><!-- THAT'S ALL, THANKS A LOT this will allow automated retrieval -->

</BODY>

</HTML>

