<html>

<head>

<!--  formamus.htm version 09 January 1999       INSTRUCTIONS FOR SUBMITTING: DO NOT USE HTMLEDITORS!      SEARCH THIS TEXT FOR THE STRING "Your_"       AND REPLACE WITH WHATEVER YOU WANT TO PUBLISH!       THANKS A LOT: this will allow automatedretrieval -->

<title>pilgrim4.htm:               

FlexLm handy hints

</title></head><body BGCOLOR="#C0C0C0" TEXT="#001010" VLINK="#405040">

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td></td><td>

<!-- Choose  a TITLE and a subtitle, choose well! -->

<center><font SIZE="+2">

FlexLm handy hints

</font><br><font SIZE="+1">

more stuff on FlexLm

</font></center></td><td>

<!-- Choose  a PROJECT GIF, leave this if unsure -->

<center><a href="student.htm#student_loo_na" tppabs="http://www.anticrack.de/fravia/student.htm#student_loo_na"><img SRC="notassi3.gif" tppabs="http://www.anticrack.de/fravia/notassi3.gif" ALT="student" ALIGN="CENTER" WIDTH="114" HEIGHT="43" BORDER="0" VSPACE="0" HSPACE="0"></a><br><font color="gray">Not Assigned</font>

</center></td></tr><tr><td bgcolor="#FFFFEA"><center><font COLOR="890000">

<!-- CHOOSE A DATE (will probably be changed) -->

June 1999

</font></center></td><td bgcolor="#FFFFEA"><center>by

<font size="+3">

<!-- CHOOSE A HANDLE , i.e. your pseudo (wont bechanged) -->

pilgrim

</font></center></td><td VALIGN="center" bgcolor="#FFFFEA">

<!--<a href="hcu98_3.htm" tppabs="http://www.anticrack.de/fravia/hcu98_3.htm"tppabs="<a href="http://fravia.org/hcu98_3.htm" target=_blank>http://fravia.org/hcu98_3.htm</a>"><IMGSRC="hcu1.gif" tppabs="<a href="http://fravia.org/hcu1.gif" target=_blank>http://fravia.org/hcu1.gif</a>"ALT="+cracker"ALIGN=BOTTOM WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>-->

</td></tr><tr><td><center><a href="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALIGN="BOTTOM" BORDER="0" VSPACE="0" HSPACE="0" width="13" height="13"></a></center></td>

<td BGCOLOR="898030"><center>Courtesy of Fravia's page

of 

reverse engineering</center> 

</center></td><td BGCOLOR="898030"><center>

<!-- Your truly+ will edit only if really necessary-->

slightly edited

<br>

by fravia+

</center></td></tr>

<!-- this is for thedata.....fra_00xx....yymmdd....handle..beg+int...notass... -->

<tr><td><font color="#C4C0CF">fra_00xx<br>980616<br>Pilgrim<br>0100<br>NA<br>PC<br></font></td><td><i><center>

Quite deep. We are descending quite deep into FlexLm, and Pilgrim is one of those 'dedicated' 

reversers, that keeps his interested on a particular scheme as long as it needs be to 

completely elucidate how things work &quot;inside&quot; it. So I'm sure we are not yet quite finished with 

this matter. Quite some lessons for programmers as well in here, btw: for instance 

you should not allow easy 

patching of your code (duh). Pilgrim writes: &quot;<font color="blue">I used the 'obsolete' function lc_baddate 

as sparespace for my code patches</font>&quot;. That's indeed a very interesting part of this 

essay...<br>Enjoy!

</i></center></td><td></td></tr><tr><td></td>

<!-- Leonard Coehn's old song, because we are poets,not only crackers-->

<td BGCOLOR="898030"><center></i><b>There is a crack,

a crack in

everything 

That's how the light gets in</b></center>

<!-- Leonard Coehn's old song, because we are poets,not only crackers-->

</center></td><td></td></tr><tr><td VALIGN="MIDDLE" bgcolor="#C6E7C6"><font color="blue"><center>Rating</font></font></center>

</td><td VALIGN="MIDDLE" bgcolor="#C6E7C6"><font color="blue"><center>

<!-- CHOOSE A RATING (may be changed) -->

( )<b>Beginner</b> (X)<b>Intermediate</b> (

)<b>Advanced</b> (

)<b>Expert</b></font>

</center></td><td></td></tr></table>

<!-- END HEAD  --><br>

<!-- CORPUS  -->

<!-- CHOOSE A COMMENT (may be changed)  -->

FlexLm is pretty complicated, it's easy to become

confused.

Here's some handy hints which may help.

<hr><center><font SIZE="+2">

<!-- Repeat your TITLE  -->

FlexLm handy hints

   </font><br>

   <font SIZE="+2">

<!-- Repeat your SUBTITLE -->

more stuff on FlexLm

   </font><br><font COLOR="0B7FC1">

<!-- REPEAT YOUR CHOSEN HANDLE HERE -->Written by 

pilgrim

</font></center><br><br>



<!-- INTRO STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Introduction</font>

</font></center></td></tr></table>

The recent <a href="flexm.htm" tppabs="http://www.anticrack.de/fravia/flexm.htm">Generation of older style FLEXlm license files</a> essay by VoxQuietis re-awakened my interest

in FlexLm.<br>

So I've been digging a little deeper.. applying a

little zen...<br>

This document is intended to supplement the other

essays

by Siul+Hacky, pilgrim and Vox.

Just various bits of info which may help in your

analysis of your

particular target.

<!-- PASTE HERE YOUR INTRODUCTION -->

<br><br>



<!-- TOOLS STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Tools

required</font>

</font></center></td></tr></table>

W32DASM, your favourite HexEditor

<!-- PASTE HERE YOUR REQUIRED TOOLS -->

<br><br>



<!-- TARGET URL STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Target's URL/FTP</font>

</font></center></td></tr></table>

<!-- DON'T FORGET TO PASTE HERE THE URL/FTP OF YOURTARGET(S) -->

No specifics.<br> 

Known users of FlexLm:

MatLab: www.mathworks.com

ProE: www.ptc.com



<br><br>



<!-- PROGRAM HISTORY STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Program History</font>

</font></center></td></tr></table>

<!-- PASTE HERE YOUR TARGET'S HISTORY (if any) -->

The oldest I've seen is 16 bit, V5 ( lmgr165.dll )

It's evolved into 32 bit, V6, and soon V7.<br>

This seems to be a layered approach, adding more and

more layers around the basic core.<br>

We're attacking the core, so version is, mostly,

irrelevant.<br>

But the history, the evolution, is well worth studying.

<br><br>



<!-- REAL ESSAY  STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Essay</font></font>

</center></td></tr></table>

<!-- PASTE HERE THE TEXT OF YOUR ESSAY     THIS IS OF COURSE THE MOST IMPORTANT PART     PLEASE CHECK THE MARGINS WHEN YOU ARE FINISHED!      SHOULD NOT BLAST OPERA'S MARGINS OUT! HAVE A LOOKINSIDE     YOUR OWN BROWSER WHEN YOU FINISH!  -->

<pre>

Contents

========



1. Code signatures

2. How key 5 is generated and how to get it fast

3. Useful tools

4. More notes on license generation

5. Fast 32 bit Cryptwin decryption



1. Code signatures

==================



The license manager DLLs are useful - they've got

export tables for _most_ functions.

However, in Globetrotters own utilities, and some

third party code, 

the DLLs aren't used. Functions are called within the

target EXE, and rarely have export tables.

So it's useful to look at a desired function in the DLL, 

find some identifying features, and look for these in

our target EXE.

A few examples from lmgr326a.dll: 



a) XOR of seeds 1 and 2 with key 5:



mov eax, dword ptr [edi+04] <get seed 1 xor eax, ebx <- xor with key 5 mov dword ptr [ebp-24], eax <- and store mov eax, dword ptr [edi+08] <- get seed 2 xor eax, ebx <- xor with key 5 A little above this code is the call to generate key 5. So search for code which looks a little like this, maybe just xor, , , xor to start with. b) lc_set_attr() If we look at lmgr326a.dll, we see the attribute values such as 0x41="65" LM_A_BEHAVIOR_VER are pushed before a call to lc_set_attr() So search for a push 00000041 in your target and find likely candidates. Then repeat with something like push 00000038, LM_A_LICENSE_DEFAULT Reduce the number of candidates and find lc_set_attr(). 2. How key 5 is generated and how to get it fast!="================================================" Key 5 is generated exactly the same for flexlm V5.12 and V6.10. The exact address seems to vary with various versions of DLLs. You pass the vendor string and the 4 keys and key 5 is generated for you. For example, in lmgr326a.dll, we can see how the key 5 generator is called: Exported fn(): l_cksum Ord:007Eh :10003723 push ebp ... :1000372F mov edi, dword ptr [ebp+14] <- start of the key structure :10003732 lea eax, dword ptr [esi+0000008C] <- VENDOR_STRING :10003738 push edi <- start of the key structure :10003739 push eax <- VENDOR_STRING :1000373A call 10011415 <- generate key 5 :1000373F add esp, 00000008 <- re-adjust stack :10003742 mov ebx, eax <- store key 5 for later use then... :10003753 mov eax, dword ptr [edi+04] <- seed 1 :10003756 xor eax, ebx <- XOR with key 5 :10003758 mov dword ptr [ebp-24], eax <- store XORed seed 1 :1000375B mov eax, dword ptr [edi+08] <- seed 2 :1000375E xor eax, ebx <- XOR with key 5 :10003760 mov edi, dword ptr [ebp+0C] <- store XORed seed 2 Feel free to analyse the generation, it applies various shifts, XORs and bit manipulation to the vendor string and the four keys. ( It uses the magic number 1504C935 noted by Vox ). So we _could_ rip it apart and write our own key 5 gen, but why bother when the function's in a DLL for us? What I did was patch the lc_init() function to call generate key 5 and display it. For example, using lmgr326a.dll, apply a patch to the start of the lc_init function: Exported fn(): lc_init Ord:0034h mov eax, esp add eax, 0000000C mov ebx, dword ptr [eax] <- the vendor string push ebx sub eax, 00000004 mov ebx, dword ptr [eax] <- start of key structure push ebx call 10011415 <- generate key 5 in eax add esp, 00000008 <- re-adjust the stack push eax <- key 5 push 100381F8 <- "%lx" push 1003F1C0 <- empty RAM for workspace Call dword ptr [100414EC]<- USER32.wsprintfA add esp, 0000000C <- re-adjust the stack push 00000000 <- style of message box push 10038C50 <- "5.0" message box title push 1003F1C0 <- the ascii text in the workspace push 00000000 <- NULL window handle Call dword ptr [100414F0]<- USER32.MessageBoxA ret Now when your target calls lc_init, voila! a message box with key 5 appears. 3. Useful tools="==============" You can apply a similar idea and patch the lmgr*.DLL to give you all the info you need, with no dissassembly of the target required. I patched lc_init to display the vendor string, the 2 seeds and all 5 keys. Unfortunately the targets crashed after this patch, but hey! we got the keys! You can patch lc_checkout and lc_get_config to display feature names. This can be done invisibly to the target which keeps on running. Very useful. Another useful patch is to get lc_set_attr to display attribute and value. This shows you when the target is implementing some of the trickier flexlm features, such as vendor-defined hostids. A few hints: lmgr325c.dll uses relocating addresses, so watch it! lmgr325c.dll has no call to wsprintf(), but has an internal function at 1002FB20 which does the same job. I used the 'obsolete' function lc_baddate as spare space for my code patches. A snippet of example for lmgr325c.dll: Exported fn(): lc_init Ord:0034h mov eax, esp add eax, 00000008 <- pointer to the vendor string push 00000000 <- style of message box push 0093448C <- "VENDOR_STRING" push dword ptr [eax] <- the vendor string push 00000000 <- NULL window handle call dword ptr [0093A40C] <- USER32.MessageBoxA mov eax, esp add eax, 0000000C <- pointer to the key struct mov ebx, dword ptr [eax] <- start of key block add ebx, 00000004 mov eax, dword ptr [ebx] <- seed 1 push eax push 00931968 <- "%lx" push 009367F8 <- empty RAM for workspace call 1002FB20 <- sprintfA add esp, 0000000C <- re-adjust the stack push 00000000 <- style of message box jmp 100145A2 <- jump over code change due to relocation push 009313BC <- "0" message box title push 009367F8 <- the ascii text in the workspace push 00000000 <- NULL window handle call dword ptr [0093A40C] <- USER32.MessageBoxA ...etc...etc 4. More notes on license generation="==================================" Use the genlic.exe program that comes with the 6.1 SDK if you've got a target using the basic 6.1 DLL. But if you've got 5.12, or your target implements enhanced flexlm features, then it's time to write your own licence generator. Vox shows you how. Now if your target applies something like vendor-specific IDs then you need to put some calls to lc_set_attr() in your license generator, mimicking the calls made by the target. A deeper analysis of lc_set_attr() shows that the final checksum in the license.dat file is not affected by date of license generation, or by calling lc_set_attr(). However, lc_init() returns error codes if the license file input is not as expected, so if you've got a vendor-specific ID in the input license file, you need to call lc_set_attr() so that lc_init() knows how to parse the input license file. 5. Fast 32 bit Cryptwin decryption="=================================" Find the key by setting a breakpoint on the "%.4d-%.4d-%.4d-%.4d" Add a 00 to the end to get something like 1111-2222-3333-4444-00 Run this through cryptwin.exe. It will bomb out with an error message. The problem is the extra checksum stored at the start of the *.FC file. So patch cryptwin.exe to by-pass the checksum check: * Possible StringData Ref from Data Obj>&quot;FLEXcrypt Copyright (C) 1990-1997,&quot;

					-&gt;&quot;Globetrotter Software, Inc.&quot;

                                  |

:00402D66 6870AE4200              push 0042AE70

:00402D6B 51                      push ecx

:00402D6C E8CFC40100              call 0041F240 <string compare :00402D71 83C40C add esp, 0000000C :00402D74 85C0 test eax, eax :00402D76 7579 jne 00402DF1 <- patch to always jump :00402D78 FF7508 push [ebp+08] Now it'll by-pass the checksum check and decrypt (albeit with the wrong start value ). </prE>

<br><br>



<!-- FINAL NOTES STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Final

Notes</font>

</font></center></td></tr></table>

<pre>

As Vox says, there's still more to do on FlexLm.

Vendor-defined checkouts, encryption etc, and then

there's FlexLock...



pilgrim

<!-- PASTE HERE YOUR FINAL NOTES (if any) -->

</pre>

<br><br>



<!-- OB DUH STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Ob

Duh</font></font>

</center></td></tr></table><center><i>I wont even

bother explaining you



   that you should BUY this target program if you

intend to use it for

a 

   longer period than the allowed one. Should you want

to STEAL this 

   software instead, you don't need to crack its

protection scheme at

all: 

   you'll find it on most Warez sites, complete and

already regged, 

   farewell, don't come back.</i></center>



<!-- WAY OUT STARTS HERE -->

<hr><center><i>You are deep inside fravia's page of

reverse

engineering,  

choose your way out:</i></center>

<br><center><br><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="88%" HEIGHT="6" BORDER="0" VSPACE="0" HSPACE="0"><br><br>

<!-- Begin Javascript relocator <font color=red>~</fonT> Javascript code by fravia+ -->

<form name="FraviasForm">

<script LANGUAGE="javascript">

<!--



function FravPage(list) {

	      location.href = list.options[list.selectedIndex].value

}



// -->

</script>

<div align="center">

<center>

<p center="&lt;center&gt;&lt;/center&gt;">&nbsp;<select name="fraviale" size="1">



<option>Choose another page!</option>

<option value="index.htm">Main page</option>

<option value="academy.htm">Software reversing Lab</option>

<option value="realicra.htm">Reality cracking Lab</option>

<option value="noanon.htm">Anonymity Lab</option>

<option value="ideale.htm">Site busting Lab</option>

<option value="howtosea.htm">How to search Lab</option>

<option value="sealight.htm">--Search engines (light)</option>

<option value="searengi.htm">--Search engines (heavy)</option>

<option value="links.htm">Links</option>

<option value="tools.htm">Tools</option>

<option value="javascri.htm">Javascript reversing</option>

<option value="screamin.htm">Screaming truth</option>

<option value="entran.htm">Main entrance</option>

<option value="new_what.htm">What's new on fravia's</option>

<option value="info.htm">Mail fravia+</option>

<option value="http://greythorne.home.ml.org">+Greythorne's</option>

<option value="http://www.InsideTheWeb.com/mbs.cgi/mb186724">Tools of our trade msgboard</option>

<option value="http://www.InsideTheWeb.com/mbs.cgi/mb155985">Main msgboard</option>

</select>



<input type="button" value="Let's go!" onclick="FravPage(this.form.elements[0])">

<br>

</div>



</form>

<!-- end Javascript relocator -->

<br><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="88%" HEIGHT="6" BORDER="0" VSPACE="0" HSPACE="0"><br><br>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html">homepage </a><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0">

<a HREF="links.htm" tppabs="http://www.anticrack.de/fravia/links.htm">links </a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0">

<a HREF="noanon.htm" tppabs="http://www.anticrack.de/fravia/noanon.htm">anonymity </a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALIGN="BOTTOM" BORDER="0" VSPACE="0" HSPACE="0" WIDTH="13" HEIGHT="13"><a HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm">+ORC </a>



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="student.htm" tppabs="http://www.anticrack.de/fravia/student.htm">students' essays </a>



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="academy.htm" tppabs="http://www.anticrack.de/fravia/academy.htm">academy database </a>



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="botstart.htm" tppabs="http://www.anticrack.de/fravia/botstart.htm">bots wars</a>



<br>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="ideale.htm" tppabs="http://www.anticrack.de/fravia/ideale.htm">antismut </a>



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm">tools </a>



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm">cocktails </a>



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="javascri.htm" tppabs="http://www.anticrack.de/fravia/javascri.htm">javascript wars </a>



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm">search_forms </a>



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="info.htm" tppabs="http://www.anticrack.de/fravia/info.htm">mail_fravia </a><br>





<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="legal.htm" tppabs="http://www.anticrack.de/fravia/legal.htm">Is reverse engineering illegal?

</a></center>

<hr size="4">



</body>

</html>