<HTML>

<TITLE>wyatt_vb.htm: Cracking Wave Events v2.0</TITLE>

<BODY BGCOLOR="#C0C0C0" TEXT="#001010" VLINK="#405040">

<HEAD></HEAD>

<TABLE CELLPADDING="5" BORDER="0">



<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="898030"><FONT SIZE="2" COLOR="FFFFFF"><CENTER><A href="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALIGN="BOTTOM" BORDER="0" VSPACE="0" HSPACE="0" WIDTH="13" HEIGHT="13"></A></CENTER></FONT></TD>

  <TD BGCOLOR="C0C0C0">

    <A href="project8.htm" tppabs="http://www.anticrack.de/fravia/project8.htm"><IMG SRC="visualba.gif" tppabs="http://www.anticrack.de/fravia/visualba.gif" ALT="Project8" ALIGN="RIGHT" WIDTH="114" HEIGHT="43" BORDER="0" VSPACE="0" HSPACE="0"></A>

    <FONT SIZE="+2"><CENTER>Cracking a simple protection IF you understand the coprocessor</CENTER></FONT>

    <CENTER>by<FONT size="+3">Wyatt</FONT>, <FONT COLOR="890000">29 June 1998</FONT> (slightly edited by fravia+)</CENTER>

  </TD>

</TR>



<TR>

  <TD BGCOLOR="898030"><FONT SIZE="2" COLOR="898030">here</FONT></TD>

  <TD BGCOLOR="898030"><CENTER>Courtesy of Fravia's page of reverse engineering</CENTER></TD>

</TR>



<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="898030"><FONT SIZE="2" COLOR="FFFFFF"><CENTER>fravia's comments</CENTER></FONT></TD>

  <TD BGCOLOR="C0C0C0">

    <FONT SIZE="+1"><I>Well well... another SOUND explanations of Intel's coprocessor commands... 

commands that <U>can</U> be used and that <U>are actually</U> used 

for protection purposes...<BR>I'm sure that even many 'old hands' will enjoy reading 

this... great, well-presented material! See also 

how a combination of smartchecking and softicing can bring you some sound 

KNOWLEDGE about some "little-reversed" coprocessor's commands... Awaiting more, dear 

Wyatt: <FONT color=purple>I am 

explaining 

now only some typical commands because there are too much to show them all in one essay</FONT>? No, no, no... we want 

more essays, more commands, more explanations, more fun with coprocessors! :-)<BR>

    </I></FONT>

  </TD>

</TR>



<TR>

  <TD BGCOLOR="898030"><FONT SIZE="2" COLOR="898030">here</FONT></TD>

  <TD BGCOLOR="898030"><CENTER></I><B>There is a crack, a crack in everything<BR>That's how the light gets in</B></CENTER></TD>

</TR>



<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="890000"><FONT SIZE="2" COLOR="FFFFFF"><CENTER>Title</CENTER></FONT></TD>

  <TD BGCOLOR="C0C0C0">

    <FONT SIZE="+2">Cracking Wave Events v2.0</FONT><BR>

    <FONT COLOR="0B7FC1">Written by Wyatt on June 18th, 1998.</FONT>

  </TD>

</TR>



<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="2C142B"><FONT SIZE="2"><CENTER><FONT COLOR="FFFFFF">Rating</FONT></CENTER></FONT></TD>

  <TD BGCOLOR="C0C0C0">

    <FONT FACE="Courier New">( )<B>Beginner</B> (x)<B>Intermediate</B> ( )<B>Advanced</B> ( )<B>Expert</B></FONT>

    <BR><I>A little understanding of how to crack a program written in Visual Basic is required. See <A href="razzia.htm" tppabs="http://www.anticrack.de/fravia/razzia.htm" tppaps="http://www.fravia.org/razzia.htm">Razzia's</A> and <A href="anonma2.htm" tppabs="http://www.anticrack.de/fravia/anonma2.htm" tppaps="http://www.fravia.org/anonma2.htm">Fravia's</A> essays.</I>

  </TD>

</TR>



<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="FF7F21"><FONT SIZE="2"><CENTER>Introduction</CENTER></FONT></TD>

  <TD BGCOLOR="C0C0C0">

    This is my first essay on fravia's pages but i have realy studied much 

in the last half year. So I think I can write an essay too.<BR>

    This protection here is another one of the Visual Basic Name/Serial

    protections. But the difference to the other essays on these pages is that

    this target uses some coprocessor instructions to convert the user input.

    In the first time I didn't understand this but after reading a good book

    it was quite simple.<BR>

    With Wave Events you can add some sound events to all executable files

    in Win95. I don't need this actually, so i have cracked this protection scheme 

just for fun.<BR>

    You can download the program at 

<A href="javascript:if(confirm('http://www.waveevents.com/main.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.waveevents.com/main.htm'" tppabs="http://www.waveevents.com/main.htm">www.waveevents.com</A>.

  </TD>

</TR>



<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="B04A53"><FONT SIZE="2"><CENTER>Tools Required</CENTER></FONT></TD>

  <TD BGCOLOR="C0C0C0">

    <B>

     SmartCheck v5.0<BR>

     SoftICE v3.x<BR>

     some Brain ;)

    </B>

  </TD>

</TR>



<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="FFFFEA"><FONT SIZE="+3" COLOR="C0C0C0"><CENTER>T<BR>H<BR>E<BR> <BR>E<BR>S<BR>S<BR>A<BR>Y</CENTER></FONT></TD>

  <TD VALIGN="TOP" BGCOLOR="C0C0C0">

   <H3> Part 1: Loading the target in Smartcheck </H3>

   <HR>

   <P>

    The first thing I do if I want to crack a VB prog is to run it under

    Smartcheck. Mostly you find something you can use to crack the app.<BR>

    In Wave Events select Help/Register. Now fill the registration fields with

    some info. I use "Wyatt'98" and "121212". Now push the

    Save-Button. You see a Message Box which tells you that you have inserted an

    invalid code (which does not wonder me in the least). Ok thats all the 

info we need (not <U>all</U> but <U>nearly all</U> ;). Close

    the target and examine it through "our" great Smartcheck tool. After a little

    searching (don't forget to choose the "Show All Events" option) you'll find your 

input.

    By me it was at line 159064 (You can directly search for your dummy code).

    You should see this:

   </P>

   <PRE>

    159064   Val returns double: 121212

    159099   SysFreeString

             |

             |

    159102   MsgBox returns Integer: 1

   </PRE>

   <P>

    What does this mean? If you look into the first line you should hopefully find

    that Msvbvm50.dll calls a procedure in Oleaut32.dll called

    "VarNumFromParseNum". This procedure returns our dummy code converted into

    a double real number. Write down the address of this proc in Msvbvm50

    (it is 0DD77Bh - you'll find it inside the right window of Smartcheck... LEARN HOW 

TO USE THIS GREAT GREAT TOOL!) and close smartcheck now, we won't need it again. 

We want to examine our target now in SoftIce.

   </P>

   <H3> Part 2: Examining our target through the live approach </H3>

   <HR>

   <P>

    Fire Softice. You have written down the address of the Call in Msvbvm50?

    If not, do it now (look above). Set a Breakpoint at that address (mine is

    bpx F0DD77B). After you have enter some dummy registration info again you

    land hopefully here:

   </P>

   <PRE>

    014F:0F0DD772    PUSH    EAX

    014F:0F0DD773    LEA     ECX,[EBP-38]

    014F:0F0DD776    PUSH    ECX           ;our code (121212)

    014F:0F0DD777    LEA     EDX,[EBP-18]

    014F:0F0DD77A    PUSH    EDX

    014F:0F0DD77B    CALL    [0F10F0CC]    ;HERE! (esi points to the offset of

                                                   our return value)

    014F:0F0DD781    JMP     0F0DD683

   </PRE>

   <P>

    The return value is our code converted into a double real number. After

    the call, set an bpr at this new converted number (this is the usual way,

    especially in a VB-prog; info: double real have 8 byte length) and run it.

    Now the main part comes. Softice stops at an coprocessor instruction.

    For a better understanding I explain now some basic knowlege of

    the coprocessor.

   </P>

   <H3> Part 3: Explaining some basic knowlege of the coprocessor </H3>

   <HR>

   <P>

    The coprocessor uses 8 register, wich are arranged similiar to the normal

    stack. Every register is 80 bit long and its content is a real number.

    Then the copro uses a so called "status word register". It is nearly similiar

    to the well known flag register. Here a short graphical description:

   </P>

   <FONT size = "-1">Register</FONT><BR>

   <TABLE border=1 width="40%">

    <TR><TD width="5%" align="center"><FONT size = "-1">ST</FONT></TD><TD width="95%" align="center"><FONT size = "-1">Content (80 bit)</FONT></TD></TR>

    <TR><TD width="5%" align="center"><FONT size = "-1">0</FONT></TD><TD></TD></TR>

    <TR><TD width="5%" align="center"><FONT size = "-1">1</FONT></TD><TD></TD></TR>

    <TR><TD width="5%" align="center"><FONT size = "-1">2</FONT></TD><TD></TD></TR>

    <TR><TD width="5%" align="center"><FONT size = "-1">3</FONT></TD><TD></TD></TR>

    <TR><TD width="5%" align="center"><FONT size = "-1">4</FONT></TD><TD></TD></TR>

    <TR><TD width="5%" align="center"><FONT size = "-1">5</FONT></TD><TD></TD></TR>

    <TR><TD width="5%" align="center"><FONT size = "-1">6</FONT></TD><TD></TD></TR>

    <TR><TD width="5%" align="center"><FONT size = "-1">7</FONT></TD><TD></TD></TR>

   </TABLE>

   <BR>

   <FONT size = "-1">status word register</FONT>

   <TABLE border=1 width="70%">

    <TR><TD align="center"><FONT size = "-1">15</FONT></TD><TD align="center"><FONT size = "-1">14</FONT></TD><TD align="center"><FONT size = "-1">13</FONT></TD><TD align="center"><FONT size = "-1">12</FONT></TD><TD align="center"><FONT size = "-1">11</FONT></TD><TD align="center"><FONT size = "-1">10</FONT></TD><TD align="center"><FONT size = "-1">9</FONT></TD><TD align="center"><FONT size = "-1">8</FONT></TD><TD align="center"><FONT size = "-1">7</FONT></TD><TD align="center"><FONT size = "-1">6</FONT></TD><TD align="center"><FONT size = "-1">5</FONT></TD><TD align="center"><FONT size = "-1">4</FONT></TD><TD align="center"><FONT size = "-1">3</FONT></TD><TD align="center"><FONT size = "-1">2</FONT></TD><TD align="center"><FONT size = "-1">1</FONT></TD><TD align="center"><FONT size = "-1">0</FONT></TD></TR>

    <TR><TD align="center"><FONT size = "-1">B</FONT></TD><TD align="center"><FONT size = "-1">C3</FONT></TD><TD align="center"><FONT size = "-1"></FONT></TD><TD align="center"><FONT size = "-1">ST</FONT></TD><TD align="center"><FONT size = "-1"></FONT></TD><TD align="center"><FONT size = "-1">C2</FONT></TD><TD align="center"><FONT size = "-1">C1</FONT></TD><TD align="center"><FONT size = "-1">C0</FONT></TD><TD align="center"><FONT size = "-1">IR</FONT></TD><TD align="center"><FONT size = "-1"></FONT></TD><TD align="center"><FONT size = "-1">P</FONT></TD><TD align="center"><FONT size = "-1">U</FONT></TD><TD align="center"><FONT size = "-1">O</FONT></TD><TD align="center"><FONT size = "-1">Z</FONT></TD><TD align="center"><FONT size = "-1">D</FONT></TD><TD align="center"><FONT size = "-1">I</FONT></TD></TR>

   </TABLE>

   <P>

    Let us concentrate to bit 14, bit 10-8 and bit 13-11. Bit 14 and bit 10-8

    represent the "condition code". This is realy important for comparing two

    numbers. But more later. Bit 13-11 represent the TOS (Top of Stack). The

    TOS is therefore a pointer to the Top of our 8 register stack. All

    instructions without a special operand uses the TOS (or better the

    register at wich the TOS points) to calculate. So for example the register

    3 has the value 5 and the TOS has the value 3.

    <TABLE border=0 width="100%">

     <TR>

      <TD width="20%">

       TOS=3<BR><FONT COLOR="FF0000"> ST(0) = Reg3 = 5</FONT><BR> ST(1) = Reg4 = ?<BR> ST(2) = Reg5 = ?<BR> ST(3) = Reg6 = ?<BR> ST(4) = Reg7 = ?<BR> ST(5) = Reg0 = ?<BR> ST(6) = Reg1 = ?<BR> ST(7) = Reg2 = ?<BR>

      </TD>

      <TD width="80%">

       The instruction "FCHS" will then change the sign of Reg3.<BR> So after this

       the content of Reg3 is -5.

      </TD>

     </TR>

    </TABLE>

    <BR>

    I explaining now only some typical commands because it is too much to show

    all in one essay.<BR><BR>

    <B>Fld real8 ptr [ebx]</B><BR>

    This command loads an double real from ds:ebx into the register at wich the

    TOS points. Before this operation the TOS is decremented. So all registers

    are moved one position down and the last register (in our example Reg2)

    comes to position 0. The double real is saved in Reg2.<BR><BR>

    <B>Fst real8 ptr [ebx]</B><BR>

    This command is the contrary to Fld. It saves a double real at address

    ds:ebx. Only the TOS is not changed.<BR><BR>

    <B>Fstp real8 ptr [ebx]</B><BR>

    This is the same like Fst. But the TOS is incremented (the p stands for "pop").

    After this operation the TOS points at the next register. Mostly after a

    saving of a number we don't need this number in a register again.<BR><BR>

    <B>Fadd, Fsub, Fmul, Fdiv</B><BR>

    It is complete the same like Add, Sub, Mul, Div. But the condition is

    that one operand must be the TOS (TOS --> ST(0)).<BR>For example: Fadd ST(3),ST(0). 

   </P>

   <TABLE border=0 width="100%">

    <TR>

     <TD width="20%">

      TOS=4<BR><FONT COLOR="FF0000"> ST(0) = Reg4 = 7</FONT><BR> ST(1) = Reg5 = ?<BR> ST(2) = Reg6 = ?<BR><FONT COLOR="FF0000"> ST(3) = Reg7 = 4</FONT><BR> ST(4) = Reg0 = ?<BR> ST(5) = Reg1 = ?<BR> ST(6) = Reg2 = ?<BR> ST(7) = Reg3 = ?<BR>

     </TD>

     <TD width="80%">

      The instruction "Fadd ST(3),ST(0)" will then add ST(0) to ST(3).<BR> So

      the content of Reg7 is 11 after this operation. The TOS is not changed.

     </TD>

    </TR>

   </TABLE>

   <P>

    <B>Faddp, Fsubp, Fmulp, Fdivp</B><BR>

    The same like Fadd, Fsub, Fmul, Fdiv. But the TOS is incremented.<BR><BR>

    <B>Fcom, Fcomp</B><BR>

    Fcom is the equivalent to Cmp. But it exist only one operand. Fcom compares

    this operand with the TOS and change the condition code. You know the

    condition code is Bit 14 and Bit 10-8 of the status word register. Fcomp

    pops (increment) the TOS after the compare.<BR><BR>

    condition code<BR>

    <TABLE border=1 width="40%">

      <TR><TD align="center">C3</TD><TD align="center">C2</TD><TD align="center">C1</TD><TD align="center">C0</TD></TR>

      <TR><TD align="center">0</TD><TD align="center">0</TD><TD align="center">0</TD><TD align="center">0</TD><TD>Operand 1 > Operand 2</TR>

      <TR><TD align="center">0</TD><TD align="center">0</TD><TD align="center">0</TD><TD align="center">1</TD><TD>Operand 1 &lt; Operand 2</TR>

      <TR><TD align="center">1</TD><TD align="center">0</TD><TD align="center">0</TD><TD align="center">0</TD><TD>Operand 1 = Operand 2</TR>

      <TR><TD align="center">1</TD><TD align="center">x</TD><TD align="center">x</TD><TD align="center">1</TD><TD>Operands not compareable</TR>

    </TABLE>

    <BR>

    <B>Fcompp</B><BR>

    Fcompp has no operand. It compares ST(0) with ST(1). The TOS is

    incremented by two.<BR><BR>

    <B>Fild word ptr [ebx]</B><BR>

    Fild converts an integer in a real number and loads it in ST(0).<BR><BR>

    <B>Fist, Fistp</B><BR>

    Fist converts a real number from ST(0) to a word(!) integer and saves

    the integer at a memory location. Fistp converts a real number from ST(0)

    to a dword(!) integer at a memory location and increment the TOS.<BR>

    <BR>

    I think thats enough. If you want more then take a good book. There are

    much more to explain. Ok now back to our target.

   </P>

   <H3> Part 4: Get a valid serial </H3>

   <HR>

   <P>

    At the end of Part 2 SoftIce had stoped at a coprocessor instruction.

   </P>

   <PRE>

    014F:0F0DD289    FLD     REAL8 PTR [EBP-08]          ;HERE!!

    014F:0F0DD28C    JMP     0F0DD213

    014F:0F0DD28E    CMP     DWORD PTR [0F10F064],00

   </PRE>

   <P>

    Fld loads our converted input into ST(0) (I say now: our magic number).

    IF you step down a few instructions (13) then you come to this code snippet:

   </P>

   <PRE>

    014F:0F1044C2    FSTP    REAL8 PTR [EBP+EAX]      ;&lt;-----

    014F:0F1044C5    FSTSW   AX

    014F:0F1044C7    TEST    AL,0D

    014F:0F1044C9    JNZ     0F10A1A6

   </PRE>

   <P>

    Fstp saves our magic number at memory location [EBP+EAX]. Ok now bpr

    at this location. Softice pops here:

   </P>

   <PRE>

    014F:0F0FD990    FLD     REAL8 PTR [EBP+EAX]      ;&lt;-----

    014F:0F0FD993    XOR     EAX,EAX

    014F:0F0FD995    MOV     AL,[ESI+02]

   </PRE>

   <P>

    Our number is again loaded. Now step down a few lines and you find this:

   </P>

   <PRE>

    014F:0F0FD623    FLD1                          ;load 1 -> ST(0)

    014F:0F0FD625    FLDCW   WORD PTR [0F101FBA]   ;load a value in the CWReg

    014F:0F0FD62B    FMULP   ST(1),ST              ;multiply 1*magic number

    014F:0F0FD62D    FSTSW   AX                    ;saves the Status Word Reg

    014F:0F0FD62F    FLDCW   WORD PTR [0F101FB8]   ;load a value in the CWReg

    014F:0F0FD635    XOR     EAX,EAX

    014F:0F0FD637    MOV     AL,[ESI]

   </PRE>

   <P>

    What is this? Ok some more coprocessor instructions. Fld1 is very simple.

    It loads only a "1.0" into the Reg at wich the TOS points (ST0). Our magic

    number is now at ST(1)! Fldcw loads a value in the third (not explained by me)

    "control word register". This is for this protection not very interesting.

    Fmulp ST(1),ST mutliply (our magic number)*1. So it is not interesting too.

    Only the TOS is incremented and our magic number is now at ST(0).

    Now some more steps down.

   </P>

   <PRE>

    014F:0F0FEC1E    FXCH    ST(1)         ;exchange ST(0)&lt;--> ST(1)

    014F:0F0FEC20    FCOMPP                ;compares ST(0) with ST(1)

    014F:0F0FEC22    FSTSW   AX            ;saves the Status Word Register

    014F:0F0FEC24    TEST    AL,0D

    014F:0F0FEC26    JNZ     0F10A1A6

   </PRE>

   <P>

    Here we are now at the final part. In ST(0) is our number and in ST(1) is

    some other number. FXCH ST(1) exchange now ST(0) (our number) with ST(1)

    (a new number). The next instruction compares ST0 with ST1. The last instruction

    saves now the status word register (the condition code is a part of it)

    It is needed later. Do you feel it? You can't see it but I think you know that

    in ST0 is now the REAL serial number. Now there is a little problem. Because

    we can't see the content of the copro registers under SoftICE. And if we

    could see it, the REAL serial is in real8 format. So do you remember? I explaind

    some command to convert a real8 back to integer format. The command is "Fistp".

    Short after FXCH we assemble some new instructions:<BR>

    <B>Fistp dword ptr ss:[esp+4]<BR>Mov eax,dword ptr ss:[esp+4]<BR>Ret</B><BR>

    In EAX is now the real serial in normal integer format. Now you only have to convert

    this into decimal.<BR><BR>

    Clear all breakpoints, restart Wave Events and test your real serial.

    If you don't need Wave Events then erase it now. You have done it all.<BR><BR>

    <BR>Wyatt'98 [wyatt_98(at)hotmail(point)com]

   </P>

  </TD>

</TR>



<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="00B645"><FONT SIZE="2"><CENTER>Ob duh</CENTER></FONT></TD>

  <TD BGCOLOR="C0C0C0">

    <I>

     I wont even bother explaining you that you should BUY this program if

     you intend to use it for a longer period than the allowed one. Should

     you want to STEAL this software instead, you don't need to crack its

     protection scheme at all: you'll find it on most Warez sites, complete

     and already regged, farewell.

    </I>

  </TD>

</TR>



<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="2AB6B6"><FONT SIZE="2"><CENTER>Final Notes</CENTER></FONT></TD>

  <TD BGCOLOR="C0C0C0">

   I hope you have learned something :) You see Visual Basic cracking is not

   difficult. You have to go only another way. But at the end it is the same,

   mostly easy to crack, protection. So the conclusion is:<BR>

   <CENTER><FONT size=+2><FONT color=green>IF</FONT> Visual Basic <FONT color=green>THEN</FONT> cracked at once<BR></FONT></CENTER>

  </TD>

</TR>



<TR>

  <TD VALIGN="MIDDLE" BGCOLOR="898030"><FONT SIZE="2" COLOR="FFFFFF"><CENTER>way out</CENTER></FONT></TD>

  <TD BGCOLOR="C0C0C0">

    <CENTER><I>You are deep inside fravia's page of reverse engineering, choose your way out:</I></CENTER><BR>

    <CENTER>

     <A href="project8.htm" tppabs="http://www.anticrack.de/fravia/project8.htm"><IMG SRC="visualba.gif" tppabs="http://www.anticrack.de/fravia/visualba.gif" ALT="project8" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></A>

     <BR> Back to Project 8 <BR> <BR>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html">homepage</A>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="links.htm" tppabs="http://www.anticrack.de/fravia/links.htm">links</A>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="noanon.htm" tppabs="http://www.anticrack.de/fravia/noanon.htm">anonymity</A>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALIGN="BOTTOM" BORDER="0" VSPACE="0" HSPACE="0" WIDTH="13" HEIGHT="13"><A HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm">+ORC</A>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="student.htm" tppabs="http://www.anticrack.de/fravia/student.htm">students' essays</A>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="academy.htm" tppabs="http://www.anticrack.de/fravia/academy.htm">academy database</A><BR>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm">tools</A>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm">cocktails</A>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="ideale.htm" tppabs="http://www.anticrack.de/fravia/ideale.htm">antismut CGI-scripts</A>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm">search_forms</A>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="info.htm" tppabs="http://www.anticrack.de/fravia/info.htm">mail_fravia+</A><BR>

     <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><A HREF="legal.htm" tppabs="http://www.anticrack.de/fravia/legal.htm">Is reverse engineering legal?</A>

    </CENTER>

  </TD>

</TR>



</TABLE>



</BODY>

</HTML>

