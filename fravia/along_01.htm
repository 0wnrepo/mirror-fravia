<html>

<head>



<title>along_01.htm: &quot;Bruteforcing&quot; a password protection

</title></head><body BGCOLOR="#C0C0C0" TEXT="#001010" VLINK="#405040">

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td></td><td>

<!-- Choose  a TITLE and a subtitle, choose well! -->

<center><font SIZE="+2">

Reversing... Coding... and BRUTEFORCING !

</font><br><font SIZE="+1">

How to reverse our target creating a good <b>Brute Force Cracker</b> !

</font></center></td><td>

<!-- Choose  a PROJECT GIF, leave this if unsure -->

<center><a href="student.htm#student_loo_na" tppabs="http://www.anticrack.de/fravia/student.htm#student_loo_na"><img SRC="notassi3.gif" tppabs="http://www.anticrack.de/fravia/notassi3.gif" ALT="student" ALIGN="CENTER" WIDTH="114" HEIGHT="43" BORDER="0" VSPACE="0" HSPACE="0"></a><br><font color="gray">Not Assigned</font>

</center></td></tr><tr><td bgcolor="#FFFFEA"><center><font COLOR="890000">

<!-- CHOOSE A DATE (will probably be changed) -->

8 September 1999      

</font></center></td><td bgcolor="#FFFFEA"><center>by <font size="+3">

<!-- CHOOSE A HANDLE , i.e. your pseudo (wont be changed) -->

aLoNg3x

</font></center></td><td VALIGN="center" bgcolor="#FFFFEA">

<!--<a href="hcu98_3.htm" tppabs="http://www.anticrack.de/fravia/hcu98_3.htm"><IMG SRC="hcu1.gif" tppabs="http://www.anticrack.de/fravia/hcu1.gif" ALT="+cracker" ALIGN=BOTTOM WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a>-->

</td></tr><tr><td><center><a href="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALIGN="BOTTOM" BORDER="0" VSPACE="0" HSPACE="0" WIDTH="13" HEIGHT="13"></a></center></td>

<td BGCOLOR="898030"><center>Courtesy of Fravia's page of 

reverse engineering</center> 

</center></td><td BGCOLOR="898030"><center>

<!-- Your truly+ will edit only if really necessary -->

slightly edited

<br>

by fravia+

</center></td></tr>

<!-- this is for the data.....fra_00xx....yymmdd....handle..beg+int...not ass... -->

<tr><td><font color="#C4C0CF">fra_00xx<br>981008<br>aLoNg3x<br>0100<br>NA<br>PC<br></font></td>

<td>

&quot;<font color="blue">Well, probably the essay can finish here, but we're reverser and not simple

byte changer, and so we must go ahead with this work !</font>&quot;<br><i><center>

&quot;When someone writes something like this, the essay is most probably worth reading&quot; -

thought fravia+ drinking slowly his Ename and watching the rain drip on the windows.<br><br>

As you will see, if you read the following, aLoNg3x goes to great length to explain how 

a part of the code of his target works... even if this has no 

importance whatsoever 

in order 

to deprotect it (infact Mirc's protection scheme could and 

should figure in the most stupid section, btw if you perform a simple search 

you'll find either <a href="javascript:if(confirm('http://www.altavista.com/cgi-bin/query/?pg=q&text=yes&kl=XX&q=%2Bmirc+%2Bcrack+%2Bdownload&act=search  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.altavista.com/cgi-bin/query/?pg=q&text=yes&kl=XX&q=%2Bmirc+%2Bcrack+%2Bdownload&act=search'" tppabs="http://www.altavista.com/cgi-bin/query/?pg=q&text=yes&kl=XX&q=%2Bmirc+%2Bcrack+%2Bdownload&act=search">10870</a> 

pages (using the most simple search) or <a href="javascript:if(confirm('http://www.altavista.com/cgi-bin/query/?pg=q&text=yes&kl=XX&q=%2Bmirc+%2Bcrack+%2Bdownload+-sex+%2B+%22index+of%22&search=Search  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.altavista.com/cgi-bin/query/?pg=q&text=yes&kl=XX&q=%2Bmirc+%2Bcrack+%2Bdownload+-sex+%2B+%22index+of%22&search=Search'" tppabs="http://www.altavista.com/cgi-bin/query/?pg=q&text=yes&kl=XX&q=%2Bmirc+%2Bcrack+%2Bdownload+-sex+%2B+%22index+of%22&search=Search">61</a> pages 

(using a more refined search), with ready-made mirc's cracks for the lamers, so I think that this essay 

will be more useful for the protectors that for anyone wanting to 

steal software...)<br>

But &quot;we're reverser and not simple

byte changer&quot; and hey presto! There is a decryption routine to investigate, and a &quot;brute force 

cracker&quot; probe 

to build. The sort of material that any 

reversers will be able to use on many other targets (not necessarily protection schemes, 

btw) and that any protectors should, by all means, 

duly consider when preparing new schemes...<br>Enjoy!



</i></center></td><td></td></tr><tr><td></td>

<!-- Leonard Coehn's old song, because we are poets, not only crackers -->

<td BGCOLOR="898030"><center></i><b>There is a crack, a crack in everything 

That's how the light gets in</b></center>

<!-- Leonard Coehn's old song, because we are poets, not only crackers -->

</center></td><td></td></tr><tr><td VALIGN="MIDDLE" bgcolor="#C6E7C6"><font color="blue"><center>Rating</font></font></center>

</td><td VALIGN="MIDDLE" bgcolor="#C6E7C6"><font color="blue"><center>

<!-- CHOOSE A RATING (may be changed) -->

( )<b>Beginner</b> (x)<b>Intermediate</b> ( )<b>Advanced</b> ( )<b>Expert</b></font>

</center></td><td></td></tr></table>

<!-- END HEAD  --><br>

<!-- CORPUS  -->

<!-- CHOOSE A COMMENT (may be changed)  -->

Excuse my disgusting and obscene english. :P<br><br>



This is my first essay in a foreign language and I hope that Fravia+ will publish it on

his great fortress.<br>

I've started my cracking &amp; reversing carrier exactly one year ago, and I wish now to

help reversers and protectors to understand this wonderful and interesting art :D<br>



<hr><center><font SIZE="+2">

<!-- Repeat your TITLE  -->

Reversing... Coding... and BRUTEFORCING !

   </font><br>

   <font SIZE="+2">

<!-- Repeat your SUBTITLE -->

How reverse our target creating a good <b>Brute Force Cracker</b> !

   </font><br><font COLOR="0B7FC1">

<!-- REPEAT YOUR CHOSEN HANDLE HERE -->Written by 

aLoNg3x

</font></center><br><br>



<!-- INTRO STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Introduction</font>

</font></center></td></tr></table><font size="+2">

Hei +iso&#148;iti<a href="#note">*</a> fRAVIA :p </font>

<br><br>

I'm writing this simple tutorial about mIRC 5.6... <br>

You're probably saying: &quot;Nahhh another essay regarding the bytez patching ???&quot;. Or, maybe: &quot;Man! 

mIRC is dead easy to crack, what's the point of shooting the red cross?&quot;, or, also possible: 

&quot;mIRC? who needs to access the useless IRC anyway?&quot; :-p

<br><br>

No no :D dear old +crackers... I'm going to write a very small 

&quot;Brute Force Cracker&quot; to reverse a new kind of &quot;protection&quot; introduced

by mIRC 5.6x.

<br><br>

In fact in this last version (released in June '99) the mIRC coder enable

you to lock your favourite irc client with a masked password... <br>

[Quite interesting... no? LET'S REVERSE !]

<br><br>



<!-- TOOLS STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Tools required</font>

</font></center></td></tr></table>

<br>

<u>In order to &quot;read&quot; this essay you need:</u><br>

..an idiot <b>PC</b> :p<br>

Numega <b>SoftICE</b><br>

Borland <b>tASM</b><br>

<b>W32dasm</b><br>

a little Brain...<br>

... a very cold bottle of <u>Leffe</u> red beer (or the Couvee' one ;) ...<br>

... and a LOT of good <u>PUNK</u> music ! (only you in my MIND :-P)<br>

<i>( Punkreas - Pornoriviste - Lag Wagon - NOFX - Bad Religion - Clash &amp; NoMAdI &amp; NirVAnA ;-)</i><br>

<!-- PASTE HERE YOUR REQUIRED TOOLS -->

<br><br>



<!-- TARGET URL STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Target's URL/FTP</font>

</font></center></td></tr></table>

<!-- DON'T FORGET TO PASTE HERE THE URL/FTP OF YOUR TARGET(S) -->

<br>

If you need our target, download it from its Homepage:  <a HREF="javascript:if(confirm('http://www.mirc.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.mirc.com/'" tppabs="http://www.mirc.com/">mIRC</a><br>

I suggest you also to visit the cool site of my Reversing Group:  <a HREF="javascript:if(confirm('http://ringzer0.goldrake.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ringzer0.goldrake.com/'" tppabs="http://ringzer0.goldrake.com/">RingZer0</a><br>

And.. my email address: <b><u>along3x @ geocities . com</b></u><br>

<br>

You can take <a HREF="javascript:if(confirm('http://129.105.116.5/fravia/along3x/mirg3x.zip  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://129.105.116.5/fravia/along3x/mirg3x.zip'" tppabs="http://129.105.116.5/fravia/along3x/mirg3x.zip">HERE</a> the full package.<br>

<br>



<!-- PROGRAM HISTORY STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Program History</font>

</font></center></td></tr></table>

<!-- PASTE HERE YOUR TARGET'S HISTORY (if any) -->

<br>

Probably mIRC have one of the easiest protection schemes in the world...<br>

You can find everywhere simple tutorials explaining how patch his .EXE to hide

the ugly <i>&quot;Unregistered&quot;</i> word.<br>

<br>

There is also the +Malattia tutorial about the mIRC &quot;KeyGeneration&quot;, but now in the

latest version (5.6x) there is a new nice option in this good

IRC client.. &amp; this option is really nice to <b>REVERSE</b>.

<br><br>



<!-- REAL ESSAY  STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Essay</font></font>

</center></td></tr></table>

<!-- PASTE HERE THE TEXT OF YOUR ESSAY     THIS IS OF COURSE THE MOST IMPORTANT PART     PLEASE CHECK THE MARGINS WHEN YOU ARE FINISHED!      SHOULD NOT BLAST OPERA'S MARGINS OUT! HAVE A LOOK INSIDE     YOUR OWN BROWSER WHEN YOU FINISH!  -->

<pre>

So i've decided to try to work on this new feature...

Ok. I've locked the proggie with the passwd &quot;fabio&quot; <i>(hmmm quite nice this name :p)</i>.

That's all... and i've tried to look around to find this &quot;stupid&quot; word

written somewhere in a plain text format in the configuration files in the mIRC

directory.



D'oh :( Nothing of this.. and now ? Let's run the Regedit. and under the Key

&quot;HKCU\Software\mirc&quot; we can find something of really &quot;useful&quot;...



There is a lock key composed by a string ('\0' terminated) of numbers... in my case 

it's &quot;1657786368,192&quot; - Then let's replace it with an idiot &quot;0&quot; - Restart mIRC

and we will see in the options that the proggie isn't locked anymore.



Well, probably the essay can finish here, but we're reverser and not simple

byte changer, and so we must go ahead with this work ! :P.



Let's load our favourite Debugger (SoftICE of course) and...

Please. wait a moment because i'm going to restart my PiCci' with sice :D



<i>[Three minutes later...]</i>



Ok... i'm back again with my dear old (and very slow) P100 =)

First of all we must set again the lock code and set <b>ON</b> the checkBox <i>&quot;Ask for

password on startup&quot;</i>. Then terminate mIRC and press CTRL+D to enter in sice.



We have set ON this checkbox in order to have a dialog box (waiting the password)

when we load mirc32.exe.



We can set a <b>&quot;bpx advapi32!RegQueryValueA&quot;</b> and run mIRC. The proggie will break

after some other breakpoints in this position:



:0049D677 E82C7C0300              Call <b>RegQueryValueA</b>



This simple call read our good code 1657786368,192 from the windows register.

(in order to understand that this is the right call you must take a look to

the pushed arguments.



:0049D67C 85C0                    test eax, eax 		; <b>Success ???</b>

:0049D67E 7551                    jne 0049D6D1			; <b>NO</b> Jump away...

:0049D680 6A2C                    push 0000002C                 ; push <b>','</b>

:0049D682 68E4504E00              push 004E50E4

:0049D687 E840B60200              call 004C8CCC                 ; Search !



After this call EAX points to the comma (',') in the string readed from the

win register.                          



:0049D68C 83C408                  add esp, 00000008

:0049D68F 890424                  mov dword ptr [esp], eax      ; ESP-&gt;&quot;comma&quot;

:0049D692 833C2400                cmp dword ptr [esp], 00000000

:0049D696 7439                    je 0049D6D1                   ; <b>Error :(</b>

:0049D698 8B0C24                  mov ecx, dword ptr [esp]

:0049D69B C60100                  mov byte ptr [ecx], 00        ; ','='\0'



This mov instruction substitutes the comma (',') with a Zero ('\0') to create

an useful asciiZ(ero terminated) string.



:0049D69E FF0424                  inc dword ptr [esp]           ; <i>next char..</i>

:0049D6A1 8B0424                  mov eax, dword ptr [esp]

:0049D6A4 803800                  cmp byte ptr [eax], 00        ; <b>IS IT A '\0' ?</b>

:0049D6A7 740F                    je 0049D6B8                   ; <b>YES</b> Jump away...

:0049D6A9 8B1424                  mov edx, dword ptr [esp]

:0049D6AC 52                      push edx

:0049D6AD E876350300              call 004D0C28



This call puts in EAX the number after the &quot;old&quot; comma char.



:0049D6B2 59                      pop ecx

:0049D6B3 A3B0E64D00              mov dword ptr [004DE6B0], eax

:0049D6B8 6A0A                    push 0000000A

:0049D6BA 8D4C2404                lea ecx, dword ptr [esp+04]

:0049D6BE 51                      push ecx

:0049D6BF 68E4504E00              push 004E50E4

:0049D6C4 E86F4A0300              call 004D2138



This call puts in eax the number (of course in HEX format) before the &quot;old&quot;

comma char.



:0049D6C9 83C40C                  add esp, 0000000C

:0049D6CC A3ACE64D00              mov dword ptr [004DE6AC], eax



This instrucion puts in a 4 bytes variable in 004DE6AC the hex number. (it's

built with the password that we've setted in the options dialog)



Ok.. quite simple.. now we'll set a &quot;BPR 004DE6AC 004DE6B0 R&quot;.

Placing this breakpoint on range we'll see where our &quot;cripted&quot; locking code

is readed from the proggie.

and then:



-&gt; in 0049D787 -&gt; <u>it is compared with 0 (to check if mIRC is locked or no..)</u>



Now the proggie reaches the request of the UN-locking code.. if you enter a

dummie code like 'cacca' you will break again in our target here:



-&gt; in 0049D541 -&gt; <u>it is compared with eax</u>



If you take a look in this piece of code you'll see this:



:0049D535 6A20                    push 00000020

:0049D537 68E4504E00              push 004E50E4                 ; pointer to &quot;cacca&quot;,0

:0049D53C E8BFE1F6FF              <b>call 0040B700</b>                 ; work on our unlocking code

:0049D541 3B05ACE64D00            cmp eax, dword ptr [004DE6AC] ; check equ

:0049D547 7512                    jne 0049D55B                  ; naaahh <b>bad</b> code... :p





This is really simple... :p - it seems to be like a common keygenerator routine..

Let's navigate inside the call to 0040B700 to see the &quot;cripting&quot; procedure:



:0040B700 55                      push ebp

:0040B701 8BEC                    mov ebp, esp

:0040B703 51                      push ecx

:0040B704 53                      push ebx

:0040B705 56                      push esi

:0040B706 8B750C                  mov esi, dword ptr [ebp+0C]

:0040B709 BB185F4E00              mov ebx, 004E5F18

:0040B70E B91C5F4E00              mov ecx, 004E5F1C

:0040B713 33C0                    xor eax, eax

:0040B715 8903                    mov dword ptr [ebx], eax

:0040B717 33D2                    xor edx, edx

:0040B719 8911                    mov dword ptr [ecx], edx

:0040B71B 8B4508                  mov eax, dword ptr [ebp+08]

:0040B71E A3205F4E00              mov dword ptr [004E5F20], eax

:0040B723 EB1F                    <b>jmp 0040B744</b> ==========================\

:0040B725 8B13                    mov edx, dword ptr [ebx]  <=====\ | :0040B727 81E2000000FF and edx, FF000000 | | :0040B72D C1EA18 shr edx, 18 | | :0040B730 8911 mov dword ptr [ecx], edx | | :0040B732 25FF000000 and eax, 000000FF | | :0040B737 0103 add dword ptr [ebx], eax | | :0040B739 0113 add dword ptr [ebx], edx | | :0040B73B C12308 shl dword ptr [ebx], 08 | | :0040B73E FF05205F4E00 inc dword ptr [004E5F20] | | :0040B744 8B15205F4E00 mov edx, dword ptr [004E5F20] <="=|=====/" :0040B74A 8A02 mov al, byte ptr [edx] | :0040B74C 84C0 test al, al | :0040B74E 75D5 <B>jne 0040B725</b> ====================/

:0040B750 33D2                    xor edx, edx

:0040B752 8915245F4E00            mov dword ptr [004E5F24], edx

:0040B758 EB11                    <b>jmp 0040B76B</b> ==========================\

:0040B75A 8B03                    mov eax, dword ptr [ebx] <=======\ | :0040B75C 83E001 and eax, 00000001 | | :0040B75F 8901 mov dword ptr [ecx], eax | | :0040B761 D12B shr dword ptr [ebx], 1 | | :0040B763 0103 add dword ptr [ebx], eax | | :0040B765 FF05245F4E00 inc dword ptr [004E5F24] | | :0040B76B BA20000000 mov edx, 00000020 <="=============|=====/" :0040B770 2BD6 sub edx, esi | :0040B772 3B15245F4E00 cmp edx, dword ptr [004E5F24] | :0040B778 7FE0 <B>jg 0040B75A</b> =====================/

:0040B77A 8975FC                  mov dword ptr [ebp-04], esi

:0040B77D DB45FC                  fild dword ptr [ebp-04]

:0040B780 83C4F8                  add esp, FFFFFFF8

:0040B783 DD1C24                  fstp qword ptr [esp]

:0040B786 6800000040              push 40000000

:0040B78B 6A00                    push 00000000

:0040B78D E85E510C00              call 004D08F0

:0040B792 83C410                  add esp, 00000010

:0040B795 E8A24F0C00              call 004D073C

:0040B79A 48                      dec eax

:0040B79B 2103                    and dword ptr [ebx], eax

:0040B79D 8B03                    mov eax, dword ptr [ebx]              ; Very important !

:0040B79F 5E                      pop esi                               ; infact EAX is

:0040B7A0 5B                      pop ebx                               ; compared after

:0040B7A1 59                      pop ecx                               ; the RET.

:0040B7A2 5D                      pop ebp

:0040B7A3 C20800                  ret 0008



If you look carefully in this function and debug into it sometimes, you will

understand that in &quot;dword ptr [ebx]&quot; is stored the cripted unlocking inserted code..

and.. very IMPORTANT.. the condition of the JG is never verified.. and also

the value pointed by EBX (that is the cripted unlocking code) doesn't change

from the &quot;JG&quot; to the &quot;MOV EAX, DWORD PTR [EBX]&quot;.



Quite good... so we can ignore a big piece of asm code..

I've also ignored the instruction about the Stack... like the push &amp; pop

And i've changed these memory locations:



<b>DWORD PTR [EBX] ==&gt; CodiceOK</b>

<b>DWORD PTR [ECX] ==&gt; Check</b>



<b>DWORD PTR [EBP+08] == PassTrial</b>



Moreover I've inserted the First_Jmp &amp; Second_Jmp labels.

<b>



<u>CRYPT_MIRG3X.ASM :</u>

_________________________________ _ _ _



mov CodiceOK, 0

mov Check, 0

mov eax, offset PassTrial

mov Ofs_Pass, eax

jmp Second_Jmp



First_Jmp:



mov edx, CodiceOK

and edx, FF000000

shr edx, 18

mov Check, edx

and eax, 000000FF

add CodiceOK, eax

add CodiceOK, edx

shl CodiceOK, 08

inc Ofs_Pass



Second_Jmp:



mov edx, Ofs_Pass

mov al, byte ptr [edx]

test al, al

jne First_Jmp

mov eax, CodiceOK

_________________________________ _ _ _



</b>

Oh Yeah.. a very little function, totally coded in pure Assembler :D

Of course this code isn't optimized in a good way, but i'm very lame in ASM

coding :P



Now we need a routine to generate every kind of word..

<i><b>...from &quot;a&quot; ... to &quot;zzzzzzzz&quot; ...</b></i>

I've supposed to use words up to <b>8 CHAR</b> and I've used chars from 'a' to 'z'.



<u>Let's make our first</u>



                       <b>.... BRUTE FORCE CRACKER !!!</b>



Hmmhhh :( i don't code since a lot of time, and this work is quite hard for my

poor brain.. However i've write down this UGLY routine in C:

<b>



<u>BRUTE_MIRG3X.C :</u>

_________________________________ _ _ _



#define MAX_CHAR 8

#define FIRSTCHAR 'a'

#define LASTCHAR 'z'



void main(void)



{ // BEGIN



int number_of_char=1;

int counter,toinc;

char code[MAX_CHAR]=&quot;&quot;;



code[0]=FIRSTCHAR;



do

{

        // CheckUnLockCode...



	toinc=1;

	counter=0;

	while (code[counter]==LASTCHAR)

	{

		if (code[counter+1]=='\0')

		{

			++number_of_char;

			code[counter+1]=FIRSTCHAR;

			code[counter]=FIRSTCHAR; //

			toinc=0;

		}

		else

		{

			code[counter]=FIRSTCHAR;

			counter++;

		}

	}

	if (toinc) ++code[counter];

}

while (number_of_char<=max_char); } // END OF FILE _________________________________ _ _ _ </B>

I think that it works... it isn't a good code, but the most important thing is

that it seems to work :p



The last step is to create the complete ASM source code of our application.

So we can use the file &quot;crypt_mirg3x.asm&quot; and must generate manually the bruteforcing

routine in ASM, translating with our hands the C code.



I've make this work, and I hope that it's correct :P





<u>MIRG3X.ASM :</u>

_________________________________ _ _ _





.386    <b>; CHOOSE YOUR PROCESSOR</b>



.model flat, stdcall



<b>; GENERAL CONSTANTS</b>

NULL			equ	0h



<b>; CONSTANTS ABOUT THE READING OPERATIONS FROM THE REGISTRY</b>

KEY_QUERY_VALUE		equ	1h

HKEY_CURRENT_USER	equ	80000001h

ERROR_SUCCESS		equ	0h

REG_NONE		equ	0h

MAXLEN			equ	40h

COMMA			equ	','



<b>; CONSTANTS ABOUT THE MESSAGE BOXES</b>

MB_OK			equ	0h



<b>; CONSTANTS ABOUT THE BRUTE-FORCING ROUTINE</b>

MAX_CHAR		equ	8

FIRSTCHAR		equ	'a'

LASTCHAR		equ	'z'





<b>; USER32</b>

extrn	MessageBoxA			:PROC



<b>; KERNEL32</b>

extrn	ExitProcess			:PROC



<b>; ADVAPI32</b>

extrn	RegOpenKeyExA			:PROC

extrn	RegQueryValueExA		:PROC

extrn	RegCloseKey			:PROC



.data



	hRegister		dd		0h

	KeyToOpen		db		&quot;Software\mIRC\lock&quot;,0

	KeyName			db		0

	ReadedKey		db		40 dup(MAXLEN)

	SizeKey			dd		MAXLEN





<b>; SPONSOR !!! :D</b>



        Ring0txt                db              &quot;This little program has been totally \

                                                coded in Assembler by aLoNg3x \

                                                (along3x@geocities.com) ... \

                                                proudly member of RingZer0 \

                                                http://ringzer0.cjb.net ...&quot;,0

	Ring0cpt		db		&quot;aLoNg3x - http://ringzer0.cjb.net :p&quot;,0



<b>; TEXT OF THE MESSAGES</b>

	OpErr			db		&quot;No key registry found !&quot;,0

	InErr			db		&quot;Invalid key in the register !&quot;,0

	NoErr			db		&quot;Your mIRC don't have any lock password !&quot;,0

        UnErr                   db              &quot;Sorry.. I haven't found any \

                                                valid unlocking password :_( !&quot;,0



        Result                  db              &quot;The unlock password of your mIRC \

                                                is: &quot;, MAX_CHAR+1 dup(0)

	LenRes			dd		37 ; THIS IS THE LENGHT OF &quot;The unlock... &quot;





<b>; CAPTION OF THE MESSAGES</b>

	DoneCpt			db		&quot;Brute Force Cracked !&quot;,0

	FailCpt			db		&quot;Cracking failed... :_(&quot;,0



<b>; VARIABLEs USED BY THE BRUTEFORCER AND BY THE CRYPTER</b>

	PassTrial		db		MAX_CHAR+1 dup(0)

	CodiceOK		dd		0h

	Check			dd		0h

	Ofs_Pass		dd		0h

	Registro		dd		0h



.code



	_start:



        call    <u>MessageBoxA</u>, NULL, offset Ring0txt, offset Ring0cpt, MB_OK





<b>; THIS PIECE OF CODE READ FROM THE REGISTER THE LOCK KEY</b>



        call    <u>RegOpenKeyExA</u>, HKEY_CURRENT_USER, offset KeyToOpen, NULL, \

                KEY_QUERY_VALUE, offset hRegister

	cmp	eax, ERROR_SUCCESS

	jne	Open_Error 

        <b>; IF THE KEY CANNOT BE OPEN THEN THE PROGRAM JUMPS TO THE ERROR MESSAGE</b>



        call    <u>RegQueryValueExA</u>, hRegister, offset KeyName, NULL, REG_NONE, \

                offset ReadedKey, offset SizeKey

        call    <u>RegCloseKey</u>, hRegister



<b>; THIS PIECE OF CODE IS USEFUL TO STORE IN EBX THE LENGHT OF THE NUMBER</b>

<b>; BEFORE THE ','</b>



	mov	edi, offset ReadedKey

	xor	ebx, ebx



NextChar:



	cmp	byte ptr [edi+ebx],COMMA

	je	Substitute

        <b>; IF THE ACTUAL CHAR IS ',' THE PROGRAM INSERT A '\0'</b>



	cmp	byte ptr [edi+ebx], 0

	je	Invalidkey_Error

        <b>; IF THE PROG REACH THE ZERO TERMINATING CHAR THEN THERE IS AN ERROR IN THE KEY</b>



	inc	ebx

	jmp	NextChar

        <b>; GO TO THE NEXT CHAR</b>



<b>; THIS PIECE OF CODE SUBSTITUTES THE ',' WITH THE ZERO ASCII CODE</b>



Substitute:



	mov	byte ptr [edi+ebx],0



<b>; THIS PIECE OF CODE TRANSLATES THE NUMBER IN THE ASCIIZ STRING INTO AN HEX NUMBER IN EAX</b>



	xor	ecx,ecx

	inc	ecx



PrevChar:



	dec	ebx

	xor	edx,edx

	mov	dl, byte ptr [edi+ebx]

	sub	dl,30h

	mov	esi,ecx

	imul	esi,edx

	add	eax,esi

	imul	ecx,0Ah

	test	ebx,ebx

	jne	PrevChar

        <b>; IF THE PROG HASN'T REACHED THE FIRST FIGURE OF THE NUMBER THE THE</b>

        <b>; PROG GO TO THE PREVIOUS CHAR</b>



	cmp	eax, 0

	je	Nokey_Error

        <b>; IF THE VALUE OF THE READED KEY IS 0 THEN THERE ISN'T A LOCK PASSWORD</b>

        <b>; AND THE PROGRAM JUMPS TO THE ERROR MESSAGE</b>



	mov	Registro, eax



<b>;  ____________________________________________ _ _ _</b>

<b>; /</b>

<b>; THIS ROUTINE MAKES A BRUTE FORCE CRACK COMPARING THE GENERATED CODE WITH THE</b>

<b>; VALUE OF &quot;Registro&quot; VARIABLE, READED FROM THE Windows Register</b>





	xor	esi, esi

	mov	edi, offset PassTrial

	mov	byte ptr [edi], FIRSTCHAR



<b>;  _______________ _ _ _</b>

<b>; /</b>

<b>; THIS IS THE CORE OF THE CRYPTING ROUTINE</b>



Punkreas:



	mov 	CodiceOK, NULL

	mov 	Check, NULL

	mov 	eax, offset PassTrial

	mov 	Ofs_Pass, eax

	jmp 	Second_Jmp



First_Jmp:



	mov 	edx, CodiceOK

	and 	edx, 0FF000000h

	shr 	edx, 18h

	mov 	Check, edx

	and 	eax, 000000FFh

	add 	CodiceOK, eax

	add 	CodiceOK, edx

	shl 	CodiceOK, 08

	inc 	Ofs_Pass



Second_Jmp:



	mov 	edx, Ofs_Pass

	mov 	al, byte ptr [edx]

	test 	al, al

	jne 	First_Jmp

	mov 	eax, CodiceOK



<b>; \_______________ _ _ _</b>

<b>; END OF THE CRYPTING ROUTINE. THE RESULT IS IN EAX</b>



	cmp 	eax, Registro

	jne	Continue

	jmp	Show_The_Code	





Continue:



	xor	ebx, ebx

	inc	ebx

	xor	eax, eax



Pippo:



	cmp	byte ptr [edi+eax], LASTCHAR

	jne	PornoRiviste

	cmp	byte ptr [edi+eax+1], 00h

	jne	Shandon

	inc	esi

	mov	byte ptr [edi+eax+1], FIRSTCHAR

	mov	byte ptr [edi+eax], FIRSTCHAR	

	xor	ebx, ebx

	jmp	Pippo



Shandon:



	mov	byte ptr [edi+eax], FIRSTCHAR

	inc	eax

	jmp	Pippo



PornoRiviste:



	test	bl, bl

	je	Fine

	inc	byte ptr [edi+eax]



Fine:



	cmp	esi, MAX_CHAR

	jle	Punkreas

	jmp	Uncracked_Error



<b>; \____________________________________________ _ _ _</b>

<b>; END OF THE BRUTE-FORCING. IF THE PROGRAM HAS NOT FOUND ANY VALID KEY THEN THE</b>

<b>; PROGRAM SHOW AN ERROR MESSAGE</b>



<b>;  _______________________ _ _ _</b>

<b>; /</b>

<b>; THIS ROUTINE PLACES AT THE END OF THE &quot;Result&quot; MESSAGE THE CORRECT LOCK</b>

<b>; PASSWORD AND SHOW THE RESULT OF THE CRACK</b>



Show_The_Code:



	xor	ebx, ebx

	dec	ebx

	mov	eax, offset Result

	add	eax, LenRes



OtherChars:



	inc	ebx

	mov	cl, byte ptr [edi+ebx]

	mov	byte ptr [eax+ebx], cl

	cmp	byte ptr [edi+ebx], 0h

	jne	OtherChars

        <b>; IF THE CURRENT CHAR IS != '\0' THEN THERE ARE OTHER CHARS THAT MUST BE READED</b>



        call    <u>MessageBoxA</u>, NULL, offset Result, offset DoneCpt, MB_OK 

	jmp	End_App



<b>; \_______________________ _ _ _</b>

<b>; END OF THE ROUTINE SHOWING THE CORRECT UNLOCKING CODE</b>



<b>; ____________ _ _ _</b>

<b>;/</b>

<b>; ERROR MESSAGES</b>



Uncracked_Error:



        call    <u>MessageBoxA</u>, NULL, offset UnErr, offset FailCpt, MB_OK 

	jmp	End_App



Nokey_Error:



        call    <u>MessageBoxA</u>, NULL, offset NoErr, offset FailCpt, MB_OK

	jmp	End_App



Open_Error:



        call    <u>MessageBoxA</u>, NULL, offset OpErr, offset FailCpt, MB_OK

	jmp	End_App



Invalidkey_Error:



        call    <u>MessageBoxA</u>, NULL, offset InErr, offset FailCpt, MB_OK

	jmp	End_App



<b>;\____________ _ _ _</b>

<b>; END OF ERROR MESSAGES</b>





End_App:



        call    <u>ExitProcess</u>, NULL

	end	_start



_________________________________ _ _ _



Welll DONE !

This is the complete code of this brute-force cracker :)

I cannot explain every step of this code to keep quite small this tutorial,

however if you don't understand it.. mail me.



I've inserted some comments to help the reader. And I think that with a little

knowledge of the assembler this essay can be readed in a easy way.

(the names of the labels are referred to some italian punk groups &gt;:)



I've tested this executable on my Pentium 100 and it needs 43 seconds to crack

the word of 1 2 3 4 and 5 letters.

To do the same thing on the Pentium II 233 of a my friend it needs 9 seconds.



Of course this code can be also optimized.

We can also use this code with every other kind of bruteforce cracker, in fact

we can change only the:



1) Crypting routing.

2) Reading Operations of the masked code.



And.. you must remember that a crypted value can be the result of different

inserted password.



<i><b>I.E. :</b>

I set the password &quot;fabio&quot;

The bruteforce cracker find the password &quot;nobaa&quot;

In fact these two values inserted in the cripting routine give the same result: &quot;1657786368&quot;</i>



Moreover you can see that the number after the comma is obtained using the options

of the lock section.

If you set ON <u>only</u> the &quot;Ask on startup&quot; checkbox the number after the comma

is &quot;1&quot;. If you set OFF that checkbox, the number after the ',' becomes a &quot;0&quot;.

Of course there are also a great number of other combinations.



Ole' :-) I think that now mirc is totally reversed :P

</pre>

<br><br>



<!-- FINAL NOTES STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Final Notes</font>

</font></center></td></tr></table>



Ok. Now the tutorial is really finished. I hope that someone like it ;)

However i think that Information Wants To Be Free. Then I've decided to give

my very little knowledge to everyone that wants learn.

<br> 

<br>

Many thanks to: (<font color="blue">extremely detailed and long greetz-list 

semanthically condensed by fravia+</font> :-)

<br><br>

+xOANINO; +kill3xx; +Malattia; +Neural_Noise; +GEnius; RingZer0 and everyone that consider me a &quot;friend&quot;



<br>

Dear friends.. mail me @ <a HREF="mailto:along3x@geocities.com">along3x@geocities.com</a><br>

<br>

aLoNg3x ... un tipo perso dietro le nuvole e la poesia ...



<br><br>



<!-- OB DUH STARTS HERE -->

<table CELLPADDING="1" CELLSPACING="2" BORDER="1" WIDTH="100%" HEIGHT="22">

<tr><td bgcolor="#C6E7C6"><center><font size="+2"><font color="blue">Ob Duh</font></font>

</center></td></tr></table><center><i>I wont even bother explaining you 

   that you should BUY this target program if you intend to use it for a 

   longer period than the allowed one. Should you want to STEAL this 

   software instead, you don't need to crack its protection scheme at all: 

   you'll find it on most Warez sites, complete and already regged, 

   farewell, don't come back.</i></center>



<!-- WAY OUT STARTS HERE -->

<hr><center><i>You are deep inside fravia's page of reverse engineering,  

choose your way out:<br><br></i></center>

<br><center>

<!-- EITHER A NICE GIF LIKE THIS -->

<!-- <a href="project3.htm" tppabs="http://www.anticrack.de/fravia/project3.htm"><IMG SRC="project3.gif" tppabs="http://www.anticrack.de/fravia/project3.gif" ALT="projecT3" ALIGN=CENTER WIDTH=114 HEIGHT=43 BORDER=0 VSPACE=0 HSPACE=0></a><br><font color=gray>Back to project 3</FonT><br><bR>-->

<!-- OR JUST A LINK LIKE THIS -->



<!--<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN=BOTTOM WIDTH=13 HEIGHT=13 BORDER=0 VSPACE=0 HSPACE=0><A HREF="project1.htm" tppabs="http://www.anticrack.de/fravia/project1.htm">Back to Your_chosen_project</A> <hr width=33%>-->



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html">homepage</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="links.htm" tppabs="http://www.anticrack.de/fravia/links.htm">links</a> 

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm">search_forms</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm">+ORC</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="protec.htm" tppabs="http://www.anticrack.de/fravia/protec.htm">how to protect</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="academy.htm" tppabs="http://www.anticrack.de/fravia/academy.htm">academy database</a>

<br>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="realicra.htm" tppabs="http://www.anticrack.de/fravia/realicra.htm">reality cracking</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="howtosea.htm" tppabs="http://www.anticrack.de/fravia/howtosea.htm">how to search</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="javascri.htm" tppabs="http://www.anticrack.de/fravia/javascri.htm">javascript wars</a>

<br>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm">tools</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="noanon.htm" tppabs="http://www.anticrack.de/fravia/noanon.htm">anonymity academy</a> 

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm">cocktails</a>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="ideale.htm" tppabs="http://www.anticrack.de/fravia/ideale.htm">antismut CGI-scripts</a>



<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="info.htm" tppabs="http://www.anticrack.de/fravia/info.htm">mail_fravia+</a>

<br>

<img SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" ALIGN="BOTTOM" WIDTH="13" HEIGHT="13" BORDER="0" VSPACE="0" HSPACE="0"><a HREF="legal.htm" tppabs="http://www.anticrack.de/fravia/legal.htm">Is reverse engineering legal?</a>

</center>

<hr>

<a name="note"></a>(<font color="red">*</font>): means &quot;Hey Grandma&quot; in finnish.

<!-- THAT'S ALL, THANKS A LOT this will allow automated retrieval -->

</body>

</html>

